
radlogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d9c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002df0  08009f40  08009f40  00019f40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd30  0800cd30  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd30  0800cd30  0001cd30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd38  0800cd38  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd38  0800cd38  0001cd38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd3c  0800cd3c  0001cd3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800cd40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002940  20000210  0800cf50  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002b50  0800cf50  00022b50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e28  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d3e  00000000  00000000  00036068  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012b0  00000000  00000000  00038da8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001178  00000000  00000000  0003a058  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000188b3  00000000  00000000  0003b1d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f335  00000000  00000000  00053a83  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00091863  00000000  00000000  00062db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f461b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060cc  00000000  00000000  000f4698  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000210 	.word	0x20000210
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009f24 	.word	0x08009f24

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000214 	.word	0x20000214
 80001dc:	08009f24 	.word	0x08009f24

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <convertDegMinToDecDeg>:
#include "stm32f4xx.h"

GPS_t GPS;
//##################################################################################################################
double convertDegMinToDecDeg (float degMin)
{
 8000f98:	b5b0      	push	{r4, r5, r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	ed87 0a01 	vstr	s0, [r7, #4]
	double min = 0.0;
 8000fa2:	f04f 0300 	mov.w	r3, #0
 8000fa6:	f04f 0400 	mov.w	r4, #0
 8000faa:	e9c7 3404 	strd	r3, r4, [r7, #16]
	double decDeg = 0.0;
 8000fae:	f04f 0300 	mov.w	r3, #0
 8000fb2:	f04f 0400 	mov.w	r4, #0
 8000fb6:	e9c7 3402 	strd	r3, r4, [r7, #8]

	//get the minutes, fmod() requires double
	min = fmod((double)degMin, 100.0);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff facc 	bl	8000558 <__aeabi_f2d>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	460c      	mov	r4, r1
 8000fc4:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001030 <convertDegMinToDecDeg+0x98>
 8000fc8:	ec44 3b10 	vmov	d0, r3, r4
 8000fcc:	f008 fe32 	bl	8009c34 <fmod>
 8000fd0:	ed87 0b04 	vstr	d0, [r7, #16]

	//rebuild coordinates in decimal degrees
	degMin = (int) ( degMin / 100 );
 8000fd4:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fd8:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001038 <convertDegMinToDecDeg+0xa0>
 8000fdc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fe8:	edc7 7a01 	vstr	s15, [r7, #4]
	decDeg = degMin + ( min / 60 );
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff fab3 	bl	8000558 <__aeabi_f2d>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	460d      	mov	r5, r1
 8000ff6:	f04f 0200 	mov.w	r2, #0
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <convertDegMinToDecDeg+0xa4>)
 8000ffc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001000:	f7ff fc2c 	bl	800085c <__aeabi_ddiv>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4620      	mov	r0, r4
 800100a:	4629      	mov	r1, r5
 800100c:	f7ff f946 	bl	800029c <__adddf3>
 8001010:	4603      	mov	r3, r0
 8001012:	460c      	mov	r4, r1
 8001014:	e9c7 3402 	strd	r3, r4, [r7, #8]

	return decDeg;
 8001018:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800101c:	ec44 3b17 	vmov	d7, r3, r4
}
 8001020:	eeb0 0a47 	vmov.f32	s0, s14
 8001024:	eef0 0a67 	vmov.f32	s1, s15
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bdb0      	pop	{r4, r5, r7, pc}
 800102e:	bf00      	nop
 8001030:	00000000 	.word	0x00000000
 8001034:	40590000 	.word	0x40590000
 8001038:	42c80000 	.word	0x42c80000
 800103c:	404e0000 	.word	0x404e0000

08001040 <GPS_Init>:
//##################################################################################################################
void	GPS_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	GPS.rxIndex=0;
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <GPS_Init+0x1c>)
 8001046:	2200      	movs	r2, #0
 8001048:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	HAL_UART_Receive_IT(&huart2,&GPS.rxTmp,1);
 800104c:	2201      	movs	r2, #1
 800104e:	4904      	ldr	r1, [pc, #16]	; (8001060 <GPS_Init+0x20>)
 8001050:	4804      	ldr	r0, [pc, #16]	; (8001064 <GPS_Init+0x24>)
 8001052:	f003 fee2 	bl	8004e1a <HAL_UART_Receive_IT>
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000660 	.word	0x20000660
 8001060:	20000862 	.word	0x20000862
 8001064:	20000a94 	.word	0x20000a94

08001068 <GPS_CallBack>:
//##################################################################################################################
void	GPS_CallBack(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	GPS.LastTime=HAL_GetTick();
 800106c:	f001 ff66 	bl	8002f3c <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <GPS_CallBack+0x4c>)
 8001074:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	if(GPS.rxIndex < sizeof(GPS.rxBuffer)-2)
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <GPS_CallBack+0x4c>)
 800107a:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800107e:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8001082:	d210      	bcs.n	80010a6 <GPS_CallBack+0x3e>
	{
		GPS.rxBuffer[GPS.rxIndex] = GPS.rxTmp;
 8001084:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <GPS_CallBack+0x4c>)
 8001086:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800108a:	461a      	mov	r2, r3
 800108c:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <GPS_CallBack+0x4c>)
 800108e:	f893 1202 	ldrb.w	r1, [r3, #514]	; 0x202
 8001092:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <GPS_CallBack+0x4c>)
 8001094:	5499      	strb	r1, [r3, r2]
		GPS.rxIndex++;
 8001096:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <GPS_CallBack+0x4c>)
 8001098:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800109c:	3301      	adds	r3, #1
 800109e:	b29a      	uxth	r2, r3
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <GPS_CallBack+0x4c>)
 80010a2:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	}
	HAL_UART_Receive_IT(&huart2,&GPS.rxTmp,1);
 80010a6:	2201      	movs	r2, #1
 80010a8:	4903      	ldr	r1, [pc, #12]	; (80010b8 <GPS_CallBack+0x50>)
 80010aa:	4804      	ldr	r0, [pc, #16]	; (80010bc <GPS_CallBack+0x54>)
 80010ac:	f003 feb5 	bl	8004e1a <HAL_UART_Receive_IT>
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000660 	.word	0x20000660
 80010b8:	20000862 	.word	0x20000862
 80010bc:	20000a94 	.word	0x20000a94

080010c0 <GPS_Process>:
//##################################################################################################################
void	GPS_Process(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b098      	sub	sp, #96	; 0x60
 80010c4:	af12      	add	r7, sp, #72	; 0x48
	if( (HAL_GetTick()-GPS.LastTime>50) && (GPS.rxIndex>0))
 80010c6:	f001 ff39 	bl	8002f3c <HAL_GetTick>
 80010ca:	4602      	mov	r2, r0
 80010cc:	4b9f      	ldr	r3, [pc, #636]	; (800134c <GPS_Process+0x28c>)
 80010ce:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2b32      	cmp	r3, #50	; 0x32
 80010d6:	f240 8203 	bls.w	80014e0 <GPS_Process+0x420>
 80010da:	4b9c      	ldr	r3, [pc, #624]	; (800134c <GPS_Process+0x28c>)
 80010dc:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f000 81fd 	beq.w	80014e0 <GPS_Process+0x420>
	{
		char *ggaStr, *rmcStr, *gsaStr, *gsvStr, *vtgStr;
		ggaStr=strstr((char*)GPS.rxBuffer,"$GPGGA,");// checking whether
 80010e6:	499a      	ldr	r1, [pc, #616]	; (8001350 <GPS_Process+0x290>)
 80010e8:	4898      	ldr	r0, [pc, #608]	; (800134c <GPS_Process+0x28c>)
 80010ea:	f005 faaf 	bl	800664c <strstr>
 80010ee:	6178      	str	r0, [r7, #20]
		rmcStr=strstr((char*)GPS.rxBuffer,"$GPRMC,");// the incoming NMEA
 80010f0:	4998      	ldr	r1, [pc, #608]	; (8001354 <GPS_Process+0x294>)
 80010f2:	4896      	ldr	r0, [pc, #600]	; (800134c <GPS_Process+0x28c>)
 80010f4:	f005 faaa 	bl	800664c <strstr>
 80010f8:	6138      	str	r0, [r7, #16]
		gsaStr=strstr((char*)GPS.rxBuffer,"$GPGSA,");// data is a GGA, RMC,
 80010fa:	4997      	ldr	r1, [pc, #604]	; (8001358 <GPS_Process+0x298>)
 80010fc:	4893      	ldr	r0, [pc, #588]	; (800134c <GPS_Process+0x28c>)
 80010fe:	f005 faa5 	bl	800664c <strstr>
 8001102:	60f8      	str	r0, [r7, #12]
		gsvStr=strstr((char*)GPS.rxBuffer,"$GPGSV,");//	GSA, GSV or GTV sentence
 8001104:	4995      	ldr	r1, [pc, #596]	; (800135c <GPS_Process+0x29c>)
 8001106:	4891      	ldr	r0, [pc, #580]	; (800134c <GPS_Process+0x28c>)
 8001108:	f005 faa0 	bl	800664c <strstr>
 800110c:	60b8      	str	r0, [r7, #8]
		vtgStr=strstr((char*)GPS.rxBuffer,"$GPVTG,");//
 800110e:	4994      	ldr	r1, [pc, #592]	; (8001360 <GPS_Process+0x2a0>)
 8001110:	488e      	ldr	r0, [pc, #568]	; (800134c <GPS_Process+0x28c>)
 8001112:	f005 fa9b 	bl	800664c <strstr>
 8001116:	6078      	str	r0, [r7, #4]

		if(ggaStr!=NULL) //$GPGGA sentence found!
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d066      	beq.n	80011ec <GPS_Process+0x12c>
		{
			memset(&GPS.GPGGA,0,sizeof(GPS.GPGGA));
 800111e:	2248      	movs	r2, #72	; 0x48
 8001120:	2100      	movs	r1, #0
 8001122:	4890      	ldr	r0, [pc, #576]	; (8001364 <GPS_Process+0x2a4>)
 8001124:	f004 fbfa 	bl	800591c <memset>
			sscanf(ggaStr,"$GPGGA,%02d%02d%02d.%03hd,%f,%c,%f,%c,%2d,%2d,%f,%f,%c,%hd,%s,*%2s\r\n",&GPS.GPGGA.UTC_Hour,&GPS.GPGGA.UTC_Min,&GPS.GPGGA.UTC_Sec,&GPS.GPGGA.UTC_MicroSec,&GPS.GPGGA.Latitude,&GPS.GPGGA.NS_Indicator,&GPS.GPGGA.Longitude,&GPS.GPGGA.EW_Indicator,&GPS.GPGGA.PositionFixIndicator,&GPS.GPGGA.SatellitesUsed,&GPS.GPGGA.HDOP,&GPS.GPGGA.MSL_Altitude,&GPS.GPGGA.MSL_Units,&GPS.GPGGA.AgeofDiffCorr,GPS.GPGGA.DiffRefStationID,GPS.GPGGA.CheckSum);
 8001128:	4b8f      	ldr	r3, [pc, #572]	; (8001368 <GPS_Process+0x2a8>)
 800112a:	930d      	str	r3, [sp, #52]	; 0x34
 800112c:	4b8f      	ldr	r3, [pc, #572]	; (800136c <GPS_Process+0x2ac>)
 800112e:	930c      	str	r3, [sp, #48]	; 0x30
 8001130:	4b8f      	ldr	r3, [pc, #572]	; (8001370 <GPS_Process+0x2b0>)
 8001132:	930b      	str	r3, [sp, #44]	; 0x2c
 8001134:	4b8f      	ldr	r3, [pc, #572]	; (8001374 <GPS_Process+0x2b4>)
 8001136:	930a      	str	r3, [sp, #40]	; 0x28
 8001138:	4b8f      	ldr	r3, [pc, #572]	; (8001378 <GPS_Process+0x2b8>)
 800113a:	9309      	str	r3, [sp, #36]	; 0x24
 800113c:	4b8f      	ldr	r3, [pc, #572]	; (800137c <GPS_Process+0x2bc>)
 800113e:	9308      	str	r3, [sp, #32]
 8001140:	4b8f      	ldr	r3, [pc, #572]	; (8001380 <GPS_Process+0x2c0>)
 8001142:	9307      	str	r3, [sp, #28]
 8001144:	4b8f      	ldr	r3, [pc, #572]	; (8001384 <GPS_Process+0x2c4>)
 8001146:	9306      	str	r3, [sp, #24]
 8001148:	4b8f      	ldr	r3, [pc, #572]	; (8001388 <GPS_Process+0x2c8>)
 800114a:	9305      	str	r3, [sp, #20]
 800114c:	4b8f      	ldr	r3, [pc, #572]	; (800138c <GPS_Process+0x2cc>)
 800114e:	9304      	str	r3, [sp, #16]
 8001150:	4b8f      	ldr	r3, [pc, #572]	; (8001390 <GPS_Process+0x2d0>)
 8001152:	9303      	str	r3, [sp, #12]
 8001154:	4b8f      	ldr	r3, [pc, #572]	; (8001394 <GPS_Process+0x2d4>)
 8001156:	9302      	str	r3, [sp, #8]
 8001158:	4b8f      	ldr	r3, [pc, #572]	; (8001398 <GPS_Process+0x2d8>)
 800115a:	9301      	str	r3, [sp, #4]
 800115c:	4b8f      	ldr	r3, [pc, #572]	; (800139c <GPS_Process+0x2dc>)
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	4b8f      	ldr	r3, [pc, #572]	; (80013a0 <GPS_Process+0x2e0>)
 8001162:	4a80      	ldr	r2, [pc, #512]	; (8001364 <GPS_Process+0x2a4>)
 8001164:	498f      	ldr	r1, [pc, #572]	; (80013a4 <GPS_Process+0x2e4>)
 8001166:	6978      	ldr	r0, [r7, #20]
 8001168:	f005 fa44 	bl	80065f4 <siscanf>
			if(GPS.GPGGA.NS_Indicator==0)
 800116c:	4b77      	ldr	r3, [pc, #476]	; (800134c <GPS_Process+0x28c>)
 800116e:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 8001172:	2b00      	cmp	r3, #0
 8001174:	d103      	bne.n	800117e <GPS_Process+0xbe>
				GPS.GPGGA.NS_Indicator='-';
 8001176:	4b75      	ldr	r3, [pc, #468]	; (800134c <GPS_Process+0x28c>)
 8001178:	222d      	movs	r2, #45	; 0x2d
 800117a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
			if(GPS.GPGGA.EW_Indicator==0)
 800117e:	4b73      	ldr	r3, [pc, #460]	; (800134c <GPS_Process+0x28c>)
 8001180:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 8001184:	2b00      	cmp	r3, #0
 8001186:	d103      	bne.n	8001190 <GPS_Process+0xd0>
				GPS.GPGGA.EW_Indicator='-';
 8001188:	4b70      	ldr	r3, [pc, #448]	; (800134c <GPS_Process+0x28c>)
 800118a:	222d      	movs	r2, #45	; 0x2d
 800118c:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
			if(GPS.GPGGA.Geoid_Units==0)
 8001190:	4b6e      	ldr	r3, [pc, #440]	; (800134c <GPS_Process+0x28c>)
 8001192:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8001196:	2b00      	cmp	r3, #0
 8001198:	d103      	bne.n	80011a2 <GPS_Process+0xe2>
				GPS.GPGGA.Geoid_Units='-';
 800119a:	4b6c      	ldr	r3, [pc, #432]	; (800134c <GPS_Process+0x28c>)
 800119c:	222d      	movs	r2, #45	; 0x2d
 800119e:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
			if(GPS.GPGGA.MSL_Units==0)
 80011a2:	4b6a      	ldr	r3, [pc, #424]	; (800134c <GPS_Process+0x28c>)
 80011a4:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d103      	bne.n	80011b4 <GPS_Process+0xf4>
				GPS.GPGGA.MSL_Units='-';
 80011ac:	4b67      	ldr	r3, [pc, #412]	; (800134c <GPS_Process+0x28c>)
 80011ae:	222d      	movs	r2, #45	; 0x2d
 80011b0:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
			GPS.GPGGA.LatitudeDecimal=convertDegMinToDecDeg(GPS.GPGGA.Latitude);
 80011b4:	4b65      	ldr	r3, [pc, #404]	; (800134c <GPS_Process+0x28c>)
 80011b6:	edd3 7a84 	vldr	s15, [r3, #528]	; 0x210
 80011ba:	eeb0 0a67 	vmov.f32	s0, s15
 80011be:	f7ff feeb 	bl	8000f98 <convertDegMinToDecDeg>
 80011c2:	eeb0 7a40 	vmov.f32	s14, s0
 80011c6:	eef0 7a60 	vmov.f32	s15, s1
 80011ca:	4b60      	ldr	r3, [pc, #384]	; (800134c <GPS_Process+0x28c>)
 80011cc:	ed83 7b86 	vstr	d7, [r3, #536]	; 0x218
			GPS.GPGGA.LongitudeDecimal=convertDegMinToDecDeg(GPS.GPGGA.Longitude);
 80011d0:	4b5e      	ldr	r3, [pc, #376]	; (800134c <GPS_Process+0x28c>)
 80011d2:	edd3 7a89 	vldr	s15, [r3, #548]	; 0x224
 80011d6:	eeb0 0a67 	vmov.f32	s0, s15
 80011da:	f7ff fedd 	bl	8000f98 <convertDegMinToDecDeg>
 80011de:	eeb0 7a40 	vmov.f32	s14, s0
 80011e2:	eef0 7a60 	vmov.f32	s15, s1
 80011e6:	4b59      	ldr	r3, [pc, #356]	; (800134c <GPS_Process+0x28c>)
 80011e8:	ed83 7b8a 	vstr	d7, [r3, #552]	; 0x228
		}

		if(rmcStr!=NULL) //$GPRMC sentence found!
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d058      	beq.n	80012a4 <GPS_Process+0x1e4>
		{
			memset(&GPS.GPRMC,0,sizeof(GPS.GPRMC));
 80011f2:	2240      	movs	r2, #64	; 0x40
 80011f4:	2100      	movs	r1, #0
 80011f6:	486c      	ldr	r0, [pc, #432]	; (80013a8 <GPS_Process+0x2e8>)
 80011f8:	f004 fb90 	bl	800591c <memset>
			sscanf(rmcStr,"$GPRMC,%02d%02d%02d.%03hd,%c,%f,%c,%f,%c,%f,%f,%02d%02d%02d,%f,%c*%2s\r\n",&GPS.GPRMC.UTC_Hour,&GPS.GPRMC.UTC_Min,&GPS.GPRMC.UTC_Sec,&GPS.GPRMC.UTC_MicroSec,&GPS.GPRMC.Status,&GPS.GPRMC.Latitude,&GPS.GPRMC.NS_Indicator,&GPS.GPRMC.Longitude,&GPS.GPRMC.EW_Indicator,&GPS.GPRMC.GroundSpeed,&GPS.GPRMC.GroundCourse,&GPS.GPRMC.Date,&GPS.GPRMC.Month,&GPS.GPRMC.Year,&GPS.GPRMC.MagVariationDeg,&GPS.GPRMC.MagVariationEW_Indicator,&GPS.GPRMC.Mode,GPS.GPRMC.CheckSum);
 80011fc:	4b6b      	ldr	r3, [pc, #428]	; (80013ac <GPS_Process+0x2ec>)
 80011fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8001200:	4b6b      	ldr	r3, [pc, #428]	; (80013b0 <GPS_Process+0x2f0>)
 8001202:	930e      	str	r3, [sp, #56]	; 0x38
 8001204:	4b6b      	ldr	r3, [pc, #428]	; (80013b4 <GPS_Process+0x2f4>)
 8001206:	930d      	str	r3, [sp, #52]	; 0x34
 8001208:	4b6b      	ldr	r3, [pc, #428]	; (80013b8 <GPS_Process+0x2f8>)
 800120a:	930c      	str	r3, [sp, #48]	; 0x30
 800120c:	4b6b      	ldr	r3, [pc, #428]	; (80013bc <GPS_Process+0x2fc>)
 800120e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001210:	4b6b      	ldr	r3, [pc, #428]	; (80013c0 <GPS_Process+0x300>)
 8001212:	930a      	str	r3, [sp, #40]	; 0x28
 8001214:	4b6b      	ldr	r3, [pc, #428]	; (80013c4 <GPS_Process+0x304>)
 8001216:	9309      	str	r3, [sp, #36]	; 0x24
 8001218:	4b6b      	ldr	r3, [pc, #428]	; (80013c8 <GPS_Process+0x308>)
 800121a:	9308      	str	r3, [sp, #32]
 800121c:	4b6b      	ldr	r3, [pc, #428]	; (80013cc <GPS_Process+0x30c>)
 800121e:	9307      	str	r3, [sp, #28]
 8001220:	4b6b      	ldr	r3, [pc, #428]	; (80013d0 <GPS_Process+0x310>)
 8001222:	9306      	str	r3, [sp, #24]
 8001224:	4b6b      	ldr	r3, [pc, #428]	; (80013d4 <GPS_Process+0x314>)
 8001226:	9305      	str	r3, [sp, #20]
 8001228:	4b6b      	ldr	r3, [pc, #428]	; (80013d8 <GPS_Process+0x318>)
 800122a:	9304      	str	r3, [sp, #16]
 800122c:	4b6b      	ldr	r3, [pc, #428]	; (80013dc <GPS_Process+0x31c>)
 800122e:	9303      	str	r3, [sp, #12]
 8001230:	4b6b      	ldr	r3, [pc, #428]	; (80013e0 <GPS_Process+0x320>)
 8001232:	9302      	str	r3, [sp, #8]
 8001234:	4b6b      	ldr	r3, [pc, #428]	; (80013e4 <GPS_Process+0x324>)
 8001236:	9301      	str	r3, [sp, #4]
 8001238:	4b6b      	ldr	r3, [pc, #428]	; (80013e8 <GPS_Process+0x328>)
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	4b6b      	ldr	r3, [pc, #428]	; (80013ec <GPS_Process+0x32c>)
 800123e:	4a5a      	ldr	r2, [pc, #360]	; (80013a8 <GPS_Process+0x2e8>)
 8001240:	496b      	ldr	r1, [pc, #428]	; (80013f0 <GPS_Process+0x330>)
 8001242:	6938      	ldr	r0, [r7, #16]
 8001244:	f005 f9d6 	bl	80065f4 <siscanf>
			if(GPS.GPRMC.NS_Indicator==0)
 8001248:	4b40      	ldr	r3, [pc, #256]	; (800134c <GPS_Process+0x28c>)
 800124a:	f893 3268 	ldrb.w	r3, [r3, #616]	; 0x268
 800124e:	2b00      	cmp	r3, #0
 8001250:	d103      	bne.n	800125a <GPS_Process+0x19a>
				GPS.GPRMC.NS_Indicator='-';
 8001252:	4b3e      	ldr	r3, [pc, #248]	; (800134c <GPS_Process+0x28c>)
 8001254:	222d      	movs	r2, #45	; 0x2d
 8001256:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
			if(GPS.GPRMC.EW_Indicator==0)
 800125a:	4b3c      	ldr	r3, [pc, #240]	; (800134c <GPS_Process+0x28c>)
 800125c:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8001260:	2b00      	cmp	r3, #0
 8001262:	d103      	bne.n	800126c <GPS_Process+0x1ac>
				GPS.GPRMC.EW_Indicator='-';
 8001264:	4b39      	ldr	r3, [pc, #228]	; (800134c <GPS_Process+0x28c>)
 8001266:	222d      	movs	r2, #45	; 0x2d
 8001268:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
			GPS.GPRMC.LatitudeDecimal=convertDegMinToDecDeg(GPS.GPRMC.Latitude);
 800126c:	4b37      	ldr	r3, [pc, #220]	; (800134c <GPS_Process+0x28c>)
 800126e:	edd3 7a96 	vldr	s15, [r3, #600]	; 0x258
 8001272:	eeb0 0a67 	vmov.f32	s0, s15
 8001276:	f7ff fe8f 	bl	8000f98 <convertDegMinToDecDeg>
 800127a:	eeb0 7a40 	vmov.f32	s14, s0
 800127e:	eef0 7a60 	vmov.f32	s15, s1
 8001282:	4b32      	ldr	r3, [pc, #200]	; (800134c <GPS_Process+0x28c>)
 8001284:	ed83 7b98 	vstr	d7, [r3, #608]	; 0x260
			GPS.GPRMC.LongitudeDecimal=convertDegMinToDecDeg(GPS.GPRMC.Longitude);
 8001288:	4b30      	ldr	r3, [pc, #192]	; (800134c <GPS_Process+0x28c>)
 800128a:	edd3 7a9b 	vldr	s15, [r3, #620]	; 0x26c
 800128e:	eeb0 0a67 	vmov.f32	s0, s15
 8001292:	f7ff fe81 	bl	8000f98 <convertDegMinToDecDeg>
 8001296:	eeb0 7a40 	vmov.f32	s14, s0
 800129a:	eef0 7a60 	vmov.f32	s15, s1
 800129e:	4b2b      	ldr	r3, [pc, #172]	; (800134c <GPS_Process+0x28c>)
 80012a0:	ed83 7b9c 	vstr	d7, [r3, #624]	; 0x270
		}

		if(gsaStr!=NULL) //$GPGSA sentence found!
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d02a      	beq.n	8001300 <GPS_Process+0x240>
		{
			memset(&GPS.GPGSA,0,sizeof(GPS.GPGSA));
 80012aa:	2218      	movs	r2, #24
 80012ac:	2100      	movs	r1, #0
 80012ae:	4851      	ldr	r0, [pc, #324]	; (80013f4 <GPS_Process+0x334>)
 80012b0:	f004 fb34 	bl	800591c <memset>
			sscanf(gsaStr,"$GPGSA,%c,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%f,%f,%f*%2s\r\n",&GPS.GPGSA.Mode_1,&GPS.GPGSA.Mode_2,&GPS.GPGSA.SatsUsedOnCh[0],&GPS.GPGSA.SatsUsedOnCh[1],&GPS.GPGSA.SatsUsedOnCh[2],&GPS.GPGSA.SatsUsedOnCh[3],&GPS.GPGSA.SatsUsedOnCh[4],&GPS.GPGSA.SatsUsedOnCh[5],&GPS.GPGSA.SatsUsedOnCh[6],&GPS.GPGSA.SatsUsedOnCh[7],&GPS.GPGSA.SatsUsedOnCh[8],&GPS.GPGSA.SatsUsedOnCh[9],&GPS.GPGSA.SatsUsedOnCh[10],&GPS.GPGSA.SatsUsedOnCh[11],&GPS.GPGSA.PDOP,&GPS.GPGSA.HDOP,&GPS.GPGSA.VDOP,GPS.GPGSA.CheckSum);
 80012b4:	4b50      	ldr	r3, [pc, #320]	; (80013f8 <GPS_Process+0x338>)
 80012b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80012b8:	4b50      	ldr	r3, [pc, #320]	; (80013fc <GPS_Process+0x33c>)
 80012ba:	930e      	str	r3, [sp, #56]	; 0x38
 80012bc:	4b50      	ldr	r3, [pc, #320]	; (8001400 <GPS_Process+0x340>)
 80012be:	930d      	str	r3, [sp, #52]	; 0x34
 80012c0:	4b50      	ldr	r3, [pc, #320]	; (8001404 <GPS_Process+0x344>)
 80012c2:	930c      	str	r3, [sp, #48]	; 0x30
 80012c4:	4b50      	ldr	r3, [pc, #320]	; (8001408 <GPS_Process+0x348>)
 80012c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80012c8:	4b4d      	ldr	r3, [pc, #308]	; (8001400 <GPS_Process+0x340>)
 80012ca:	930a      	str	r3, [sp, #40]	; 0x28
 80012cc:	4b4f      	ldr	r3, [pc, #316]	; (800140c <GPS_Process+0x34c>)
 80012ce:	9309      	str	r3, [sp, #36]	; 0x24
 80012d0:	4b4f      	ldr	r3, [pc, #316]	; (8001410 <GPS_Process+0x350>)
 80012d2:	9308      	str	r3, [sp, #32]
 80012d4:	4b4f      	ldr	r3, [pc, #316]	; (8001414 <GPS_Process+0x354>)
 80012d6:	9307      	str	r3, [sp, #28]
 80012d8:	4b4a      	ldr	r3, [pc, #296]	; (8001404 <GPS_Process+0x344>)
 80012da:	9306      	str	r3, [sp, #24]
 80012dc:	4b4e      	ldr	r3, [pc, #312]	; (8001418 <GPS_Process+0x358>)
 80012de:	9305      	str	r3, [sp, #20]
 80012e0:	4b4e      	ldr	r3, [pc, #312]	; (800141c <GPS_Process+0x35c>)
 80012e2:	9304      	str	r3, [sp, #16]
 80012e4:	4b4e      	ldr	r3, [pc, #312]	; (8001420 <GPS_Process+0x360>)
 80012e6:	9303      	str	r3, [sp, #12]
 80012e8:	4b4e      	ldr	r3, [pc, #312]	; (8001424 <GPS_Process+0x364>)
 80012ea:	9302      	str	r3, [sp, #8]
 80012ec:	4b4e      	ldr	r3, [pc, #312]	; (8001428 <GPS_Process+0x368>)
 80012ee:	9301      	str	r3, [sp, #4]
 80012f0:	4b4e      	ldr	r3, [pc, #312]	; (800142c <GPS_Process+0x36c>)
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	4b4e      	ldr	r3, [pc, #312]	; (8001430 <GPS_Process+0x370>)
 80012f6:	4a3f      	ldr	r2, [pc, #252]	; (80013f4 <GPS_Process+0x334>)
 80012f8:	494e      	ldr	r1, [pc, #312]	; (8001434 <GPS_Process+0x374>)
 80012fa:	68f8      	ldr	r0, [r7, #12]
 80012fc:	f005 f97a 	bl	80065f4 <siscanf>
		}

		if(gsvStr!=NULL) //$GPGSV sentence found!
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	2b00      	cmp	r3, #0
 8001304:	f000 80c4 	beq.w	8001490 <GPS_Process+0x3d0>
		{
			memset(&GPS.GPGSV,0,sizeof(GPS.GPGSV));
 8001308:	2235      	movs	r2, #53	; 0x35
 800130a:	2100      	movs	r1, #0
 800130c:	484a      	ldr	r0, [pc, #296]	; (8001438 <GPS_Process+0x378>)
 800130e:	f004 fb05 	bl	800591c <memset>
			sscanf(gsvStr,"$GPGSV,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d*%2s\r\n",&GPS.GPGSV.NoOfMessages,&GPS.GPGSV.MessageNo,&GPS.GPGSV.SatsInView,&GPS.GPGSV.GPSSAT[0].SatteliteID,&GPS.GPGSV.GPSSAT[0].Elevation,&GPS.GPGSV.GPSSAT[0].Azimuth,&GPS.GPGSV.GPSSAT[0].SNR,&GPS.GPGSV.GPSSAT[1].SatteliteID,&GPS.GPGSV.GPSSAT[1].Elevation,&GPS.GPGSV.GPSSAT[1].Azimuth,&GPS.GPGSV.GPSSAT[1].SNR,&GPS.GPGSV.GPSSAT[2].SatteliteID,&GPS.GPGSV.GPSSAT[2].Elevation,&GPS.GPGSV.GPSSAT[2].Azimuth,&GPS.GPGSV.GPSSAT[2].SNR,&GPS.GPGSV.GPSSAT[3].SatteliteID,&GPS.GPGSV.GPSSAT[3].Elevation,&GPS.GPGSV.GPSSAT[3].Azimuth,&GPS.GPGSV.GPSSAT[3].SNR,GPS.GPGSV.CheckSum);
 8001312:	4b4a      	ldr	r3, [pc, #296]	; (800143c <GPS_Process+0x37c>)
 8001314:	9311      	str	r3, [sp, #68]	; 0x44
 8001316:	4b4a      	ldr	r3, [pc, #296]	; (8001440 <GPS_Process+0x380>)
 8001318:	9310      	str	r3, [sp, #64]	; 0x40
 800131a:	4b4a      	ldr	r3, [pc, #296]	; (8001444 <GPS_Process+0x384>)
 800131c:	930f      	str	r3, [sp, #60]	; 0x3c
 800131e:	4b4a      	ldr	r3, [pc, #296]	; (8001448 <GPS_Process+0x388>)
 8001320:	930e      	str	r3, [sp, #56]	; 0x38
 8001322:	4b4a      	ldr	r3, [pc, #296]	; (800144c <GPS_Process+0x38c>)
 8001324:	930d      	str	r3, [sp, #52]	; 0x34
 8001326:	4b4a      	ldr	r3, [pc, #296]	; (8001450 <GPS_Process+0x390>)
 8001328:	930c      	str	r3, [sp, #48]	; 0x30
 800132a:	4b4a      	ldr	r3, [pc, #296]	; (8001454 <GPS_Process+0x394>)
 800132c:	930b      	str	r3, [sp, #44]	; 0x2c
 800132e:	4b4a      	ldr	r3, [pc, #296]	; (8001458 <GPS_Process+0x398>)
 8001330:	930a      	str	r3, [sp, #40]	; 0x28
 8001332:	4b4a      	ldr	r3, [pc, #296]	; (800145c <GPS_Process+0x39c>)
 8001334:	9309      	str	r3, [sp, #36]	; 0x24
 8001336:	4b4a      	ldr	r3, [pc, #296]	; (8001460 <GPS_Process+0x3a0>)
 8001338:	9308      	str	r3, [sp, #32]
 800133a:	4b4a      	ldr	r3, [pc, #296]	; (8001464 <GPS_Process+0x3a4>)
 800133c:	9307      	str	r3, [sp, #28]
 800133e:	4b4a      	ldr	r3, [pc, #296]	; (8001468 <GPS_Process+0x3a8>)
 8001340:	9306      	str	r3, [sp, #24]
 8001342:	4b4a      	ldr	r3, [pc, #296]	; (800146c <GPS_Process+0x3ac>)
 8001344:	9305      	str	r3, [sp, #20]
 8001346:	4b4a      	ldr	r3, [pc, #296]	; (8001470 <GPS_Process+0x3b0>)
 8001348:	9304      	str	r3, [sp, #16]
 800134a:	e093      	b.n	8001474 <GPS_Process+0x3b4>
 800134c:	20000660 	.word	0x20000660
 8001350:	08009f40 	.word	0x08009f40
 8001354:	08009f48 	.word	0x08009f48
 8001358:	08009f50 	.word	0x08009f50
 800135c:	08009f58 	.word	0x08009f58
 8001360:	08009f60 	.word	0x08009f60
 8001364:	20000868 	.word	0x20000868
 8001368:	200008ac 	.word	0x200008ac
 800136c:	200008a8 	.word	0x200008a8
 8001370:	200008a6 	.word	0x200008a6
 8001374:	2000089c 	.word	0x2000089c
 8001378:	20000898 	.word	0x20000898
 800137c:	20000894 	.word	0x20000894
 8001380:	20000892 	.word	0x20000892
 8001384:	20000891 	.word	0x20000891
 8001388:	20000890 	.word	0x20000890
 800138c:	20000884 	.word	0x20000884
 8001390:	20000880 	.word	0x20000880
 8001394:	20000870 	.word	0x20000870
 8001398:	2000086c 	.word	0x2000086c
 800139c:	2000086a 	.word	0x2000086a
 80013a0:	20000869 	.word	0x20000869
 80013a4:	08009f68 	.word	0x08009f68
 80013a8:	200008b0 	.word	0x200008b0
 80013ac:	200008ee 	.word	0x200008ee
 80013b0:	200008ed 	.word	0x200008ed
 80013b4:	200008ec 	.word	0x200008ec
 80013b8:	200008e8 	.word	0x200008e8
 80013bc:	200008e6 	.word	0x200008e6
 80013c0:	200008e5 	.word	0x200008e5
 80013c4:	200008e4 	.word	0x200008e4
 80013c8:	200008e0 	.word	0x200008e0
 80013cc:	200008dc 	.word	0x200008dc
 80013d0:	200008d8 	.word	0x200008d8
 80013d4:	200008cc 	.word	0x200008cc
 80013d8:	200008c8 	.word	0x200008c8
 80013dc:	200008b8 	.word	0x200008b8
 80013e0:	200008b6 	.word	0x200008b6
 80013e4:	200008b4 	.word	0x200008b4
 80013e8:	200008b2 	.word	0x200008b2
 80013ec:	200008b1 	.word	0x200008b1
 80013f0:	08009fb0 	.word	0x08009fb0
 80013f4:	200008f0 	.word	0x200008f0
 80013f8:	20000904 	.word	0x20000904
 80013fc:	20000900 	.word	0x20000900
 8001400:	200008fc 	.word	0x200008fc
 8001404:	200008f8 	.word	0x200008f8
 8001408:	200008fd 	.word	0x200008fd
 800140c:	200008fb 	.word	0x200008fb
 8001410:	200008fa 	.word	0x200008fa
 8001414:	200008f9 	.word	0x200008f9
 8001418:	200008f7 	.word	0x200008f7
 800141c:	200008f6 	.word	0x200008f6
 8001420:	200008f5 	.word	0x200008f5
 8001424:	200008f4 	.word	0x200008f4
 8001428:	200008f3 	.word	0x200008f3
 800142c:	200008f2 	.word	0x200008f2
 8001430:	200008f1 	.word	0x200008f1
 8001434:	08009ff8 	.word	0x08009ff8
 8001438:	20000908 	.word	0x20000908
 800143c:	2000093b 	.word	0x2000093b
 8001440:	2000091a 	.word	0x2000091a
 8001444:	20000919 	.word	0x20000919
 8001448:	20000918 	.word	0x20000918
 800144c:	20000917 	.word	0x20000917
 8001450:	20000916 	.word	0x20000916
 8001454:	20000915 	.word	0x20000915
 8001458:	20000914 	.word	0x20000914
 800145c:	20000913 	.word	0x20000913
 8001460:	20000912 	.word	0x20000912
 8001464:	20000911 	.word	0x20000911
 8001468:	20000910 	.word	0x20000910
 800146c:	2000090f 	.word	0x2000090f
 8001470:	2000090e 	.word	0x2000090e
 8001474:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <GPS_Process+0x434>)
 8001476:	9303      	str	r3, [sp, #12]
 8001478:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <GPS_Process+0x438>)
 800147a:	9302      	str	r3, [sp, #8]
 800147c:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <GPS_Process+0x43c>)
 800147e:	9301      	str	r3, [sp, #4]
 8001480:	4b1f      	ldr	r3, [pc, #124]	; (8001500 <GPS_Process+0x440>)
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <GPS_Process+0x444>)
 8001486:	4a20      	ldr	r2, [pc, #128]	; (8001508 <GPS_Process+0x448>)
 8001488:	4920      	ldr	r1, [pc, #128]	; (800150c <GPS_Process+0x44c>)
 800148a:	68b8      	ldr	r0, [r7, #8]
 800148c:	f005 f8b2 	bl	80065f4 <siscanf>
		}

		if(vtgStr!=NULL) //$GPVTG sentence found!
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d01a      	beq.n	80014cc <GPS_Process+0x40c>
		{
			memset(&GPS.GPVTG,0,sizeof(GPS.GPVTG));
 8001496:	2220      	movs	r2, #32
 8001498:	2100      	movs	r1, #0
 800149a:	481d      	ldr	r0, [pc, #116]	; (8001510 <GPS_Process+0x450>)
 800149c:	f004 fa3e 	bl	800591c <memset>
			sscanf(vtgStr,"$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c,%c,%2s\r\n",&GPS.GPVTG.Course_1,&GPS.GPVTG.Reference_1,&GPS.GPVTG.Course_2,&GPS.GPVTG.Reference_2,&GPS.GPVTG.SpeedInKnots,&GPS.GPVTG.KnotsIndicator,&GPS.GPVTG.SpeedInKmh,&GPS.GPVTG.KmhIndicator,&GPS.GPVTG.Mode,GPS.GPVTG.CheckSum);
 80014a0:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <GPS_Process+0x454>)
 80014a2:	9307      	str	r3, [sp, #28]
 80014a4:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <GPS_Process+0x458>)
 80014a6:	9306      	str	r3, [sp, #24]
 80014a8:	4b1c      	ldr	r3, [pc, #112]	; (800151c <GPS_Process+0x45c>)
 80014aa:	9305      	str	r3, [sp, #20]
 80014ac:	4b1c      	ldr	r3, [pc, #112]	; (8001520 <GPS_Process+0x460>)
 80014ae:	9304      	str	r3, [sp, #16]
 80014b0:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <GPS_Process+0x464>)
 80014b2:	9303      	str	r3, [sp, #12]
 80014b4:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <GPS_Process+0x468>)
 80014b6:	9302      	str	r3, [sp, #8]
 80014b8:	4b1c      	ldr	r3, [pc, #112]	; (800152c <GPS_Process+0x46c>)
 80014ba:	9301      	str	r3, [sp, #4]
 80014bc:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <GPS_Process+0x470>)
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <GPS_Process+0x474>)
 80014c2:	4a13      	ldr	r2, [pc, #76]	; (8001510 <GPS_Process+0x450>)
 80014c4:	491c      	ldr	r1, [pc, #112]	; (8001538 <GPS_Process+0x478>)
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f005 f894 	bl	80065f4 <siscanf>
		}
		memset(GPS.rxBuffer,0,sizeof(GPS.rxBuffer));
 80014cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014d0:	2100      	movs	r1, #0
 80014d2:	481a      	ldr	r0, [pc, #104]	; (800153c <GPS_Process+0x47c>)
 80014d4:	f004 fa22 	bl	800591c <memset>
		GPS.rxIndex=0;
 80014d8:	4b18      	ldr	r3, [pc, #96]	; (800153c <GPS_Process+0x47c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	}
	HAL_UART_Receive_IT(&huart2,&GPS.rxTmp,1);
 80014e0:	2201      	movs	r2, #1
 80014e2:	4917      	ldr	r1, [pc, #92]	; (8001540 <GPS_Process+0x480>)
 80014e4:	4817      	ldr	r0, [pc, #92]	; (8001544 <GPS_Process+0x484>)
 80014e6:	f003 fc98 	bl	8004e1a <HAL_UART_Receive_IT>
}
 80014ea:	bf00      	nop
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	2000090d 	.word	0x2000090d
 80014f8:	2000090c 	.word	0x2000090c
 80014fc:	2000090b 	.word	0x2000090b
 8001500:	2000090a 	.word	0x2000090a
 8001504:	20000909 	.word	0x20000909
 8001508:	20000908 	.word	0x20000908
 800150c:	0800a038 	.word	0x0800a038
 8001510:	20000940 	.word	0x20000940
 8001514:	2000095e 	.word	0x2000095e
 8001518:	2000095d 	.word	0x2000095d
 800151c:	2000095c 	.word	0x2000095c
 8001520:	20000958 	.word	0x20000958
 8001524:	20000954 	.word	0x20000954
 8001528:	20000950 	.word	0x20000950
 800152c:	2000094c 	.word	0x2000094c
 8001530:	20000948 	.word	0x20000948
 8001534:	20000944 	.word	0x20000944
 8001538:	0800a090 	.word	0x0800a090
 800153c:	20000660 	.word	0x20000660
 8001540:	20000862 	.word	0x20000862
 8001544:	20000a94 	.word	0x20000a94

08001548 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800154c:	f001 fc90 	bl	8002e70 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001550:	f000 f8ae 	bl	80016b0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001554:	f000 f9c8 	bl	80018e8 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001558:	f000 f914 	bl	8001784 <MX_I2C1_Init>
	MX_SPI1_Init();
 800155c:	f000 f940 	bl	80017e0 <MX_SPI1_Init>
	MX_TIM10_Init();
 8001560:	f000 f974 	bl	800184c <MX_TIM10_Init>
	MX_USART2_UART_Init();
 8001564:	f000 f996 	bl	8001894 <MX_USART2_UART_Init>
	MX_FATFS_Init();
 8001568:	f004 f8e8 	bl	800573c <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */

	GPS_Init();
 800156c:	f7ff fd68 	bl	8001040 <GPS_Init>
	SSD1306_Init();
 8001570:	f000 fe82 	bl	8002278 <SSD1306_Init>

	SSD1306_Fill (0);  // fill display with black color
 8001574:	2000      	movs	r0, #0
 8001576:	f000 ff71 	bl	800245c <SSD1306_Fill>

	SSD1306_GotoXY (1, 30);
 800157a:	211e      	movs	r1, #30
 800157c:	2001      	movs	r0, #1
 800157e:	f000 ffe5 	bl	800254c <SSD1306_GotoXY>
	SSD1306_Puts ("Initializing", &Font_7x10, 1);
 8001582:	2201      	movs	r2, #1
 8001584:	4945      	ldr	r1, [pc, #276]	; (800169c <main+0x154>)
 8001586:	4846      	ldr	r0, [pc, #280]	; (80016a0 <main+0x158>)
 8001588:	f001 f876 	bl	8002678 <SSD1306_Puts>
	SSD1306_UpdateScreen ();  // update display
 800158c:	f000 ff38 	bl	8002400 <SSD1306_UpdateScreen>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		geigerCounter(); // read radiation sensor
 8001590:	f000 fab2 	bl	8001af8 <geigerCounter>
		GPS_Process(); // read and parse data from GPS
 8001594:	f7ff fd94 	bl	80010c0 <GPS_Process>
		readgpsTime(); // read and parse time from GPS data
 8001598:	f000 faf8 	bl	8001b8c <readgpsTime>
		switch(mode){
 800159c:	4b41      	ldr	r3, [pc, #260]	; (80016a4 <main+0x15c>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b05      	cmp	r3, #5
 80015a2:	d875      	bhi.n	8001690 <main+0x148>
 80015a4:	a201      	add	r2, pc, #4	; (adr r2, 80015ac <main+0x64>)
 80015a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015aa:	bf00      	nop
 80015ac:	080015ed 	.word	0x080015ed
 80015b0:	08001615 	.word	0x08001615
 80015b4:	08001643 	.word	0x08001643
 80015b8:	080015c5 	.word	0x080015c5
 80015bc:	08001677 	.word	0x08001677
 80015c0:	0800166b 	.word	0x0800166b
		case ALL:
			generalScreen();
 80015c4:	f000 fd58 	bl	8002078 <generalScreen>
			if(setBtn == PRESSED){
 80015c8:	4b37      	ldr	r3, [pc, #220]	; (80016a8 <main+0x160>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d102      	bne.n	80015d6 <main+0x8e>
				setBtn = OFF;
 80015d0:	4b35      	ldr	r3, [pc, #212]	; (80016a8 <main+0x160>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
			}
			if(modeBtn == PRESSED){
 80015d6:	4b35      	ldr	r3, [pc, #212]	; (80016ac <main+0x164>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d151      	bne.n	8001682 <main+0x13a>
				modeBtn = OFF;
 80015de:	4b33      	ldr	r3, [pc, #204]	; (80016ac <main+0x164>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
				mode = RADIATION;
 80015e4:	4b2f      	ldr	r3, [pc, #188]	; (80016a4 <main+0x15c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	701a      	strb	r2, [r3, #0]
			}
			break;
 80015ea:	e04a      	b.n	8001682 <main+0x13a>
		case RADIATION:
			radiationScreen();
 80015ec:	f000 fb92 	bl	8001d14 <radiationScreen>

			if(setBtn == PRESSED){
 80015f0:	4b2d      	ldr	r3, [pc, #180]	; (80016a8 <main+0x160>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d102      	bne.n	80015fe <main+0xb6>
				setBtn = OFF;
 80015f8:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <main+0x160>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	701a      	strb	r2, [r3, #0]
			}
			if(modeBtn == PRESSED){
 80015fe:	4b2b      	ldr	r3, [pc, #172]	; (80016ac <main+0x164>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d13f      	bne.n	8001686 <main+0x13e>
				modeBtn = OFF;
 8001606:	4b29      	ldr	r3, [pc, #164]	; (80016ac <main+0x164>)
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]
				mode = TIMEDATE;
 800160c:	4b25      	ldr	r3, [pc, #148]	; (80016a4 <main+0x15c>)
 800160e:	2201      	movs	r2, #1
 8001610:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001612:	e038      	b.n	8001686 <main+0x13e>
		case TIMEDATE:
			timedateScreen();
 8001614:	f000 fbe6 	bl	8001de4 <timedateScreen>

			if(setBtn == PRESSED){
 8001618:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <main+0x160>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d105      	bne.n	800162c <main+0xe4>
				setBtn = OFF;
 8001620:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <main+0x160>)
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
				mode = SETTIMEZONE;
 8001626:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <main+0x15c>)
 8001628:	2204      	movs	r2, #4
 800162a:	701a      	strb	r2, [r3, #0]
			}
			if(modeBtn == PRESSED){
 800162c:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <main+0x164>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d12a      	bne.n	800168a <main+0x142>
				modeBtn = OFF;
 8001634:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <main+0x164>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
				mode = GPSINFO;
 800163a:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <main+0x15c>)
 800163c:	2202      	movs	r2, #2
 800163e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001640:	e023      	b.n	800168a <main+0x142>

		case GPSINFO:
			gpsinfoScreen();
 8001642:	f000 fc55 	bl	8001ef0 <gpsinfoScreen>

			if(setBtn == PRESSED){
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <main+0x160>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d102      	bne.n	8001654 <main+0x10c>
				setBtn = OFF;
 800164e:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <main+0x160>)
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]
			}
			if(modeBtn == PRESSED){
 8001654:	4b15      	ldr	r3, [pc, #84]	; (80016ac <main+0x164>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d118      	bne.n	800168e <main+0x146>
				modeBtn = OFF;
 800165c:	4b13      	ldr	r3, [pc, #76]	; (80016ac <main+0x164>)
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]
				mode = STANDBY;
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <main+0x15c>)
 8001664:	2205      	movs	r2, #5
 8001666:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001668:	e011      	b.n	800168e <main+0x146>

		case STANDBY:
			standBy();
 800166a:	f000 fd9b 	bl	80021a4 <standBy>

			mode = ALL;
 800166e:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <main+0x15c>)
 8001670:	2203      	movs	r2, #3
 8001672:	701a      	strb	r2, [r3, #0]
			break;
 8001674:	e00c      	b.n	8001690 <main+0x148>

		case SETTIMEZONE:
			setTimeZone();
 8001676:	f000 fac5 	bl	8001c04 <setTimeZone>

			mode = RADIATION;
 800167a:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <main+0x15c>)
 800167c:	2200      	movs	r2, #0
 800167e:	701a      	strb	r2, [r3, #0]
			break;
 8001680:	e006      	b.n	8001690 <main+0x148>
			break;
 8001682:	bf00      	nop
 8001684:	e004      	b.n	8001690 <main+0x148>
			break;
 8001686:	bf00      	nop
 8001688:	e002      	b.n	8001690 <main+0x148>
			break;
 800168a:	bf00      	nop
 800168c:	e000      	b.n	8001690 <main+0x148>
			break;
 800168e:	bf00      	nop
		}
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_Delay(1000);
 8001690:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001694:	f001 fc5e 	bl	8002f54 <HAL_Delay>
		geigerCounter(); // read radiation sensor
 8001698:	e77a      	b.n	8001590 <main+0x48>
 800169a:	bf00      	nop
 800169c:	20000000 	.word	0x20000000
 80016a0:	0800a0b8 	.word	0x0800a0b8
 80016a4:	20000230 	.word	0x20000230
 80016a8:	2000022f 	.word	0x2000022f
 80016ac:	2000022e 	.word	0x2000022e

080016b0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b094      	sub	sp, #80	; 0x50
 80016b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016b6:	f107 0320 	add.w	r3, r7, #32
 80016ba:	2230      	movs	r2, #48	; 0x30
 80016bc:	2100      	movs	r1, #0
 80016be:	4618      	mov	r0, r3
 80016c0:	f004 f92c 	bl	800591c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c4:	f107 030c 	add.w	r3, r7, #12
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80016d4:	2300      	movs	r3, #0
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	4b28      	ldr	r3, [pc, #160]	; (800177c <SystemClock_Config+0xcc>)
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	4a27      	ldr	r2, [pc, #156]	; (800177c <SystemClock_Config+0xcc>)
 80016de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e2:	6413      	str	r3, [r2, #64]	; 0x40
 80016e4:	4b25      	ldr	r3, [pc, #148]	; (800177c <SystemClock_Config+0xcc>)
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80016f0:	2300      	movs	r3, #0
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	4b22      	ldr	r3, [pc, #136]	; (8001780 <SystemClock_Config+0xd0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016fc:	4a20      	ldr	r2, [pc, #128]	; (8001780 <SystemClock_Config+0xd0>)
 80016fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <SystemClock_Config+0xd0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001710:	2302      	movs	r3, #2
 8001712:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001714:	2301      	movs	r3, #1
 8001716:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001718:	2310      	movs	r3, #16
 800171a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800171c:	2302      	movs	r3, #2
 800171e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001720:	2300      	movs	r3, #0
 8001722:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001724:	2308      	movs	r3, #8
 8001726:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 8001728:	2354      	movs	r3, #84	; 0x54
 800172a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800172c:	2302      	movs	r3, #2
 800172e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001730:	2304      	movs	r3, #4
 8001732:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001734:	f107 0320 	add.w	r3, r7, #32
 8001738:	4618      	mov	r0, r3
 800173a:	f002 fc75 	bl	8004028 <HAL_RCC_OscConfig>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8001744:	f000 fd90 	bl	8002268 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001748:	230f      	movs	r3, #15
 800174a:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800174c:	2302      	movs	r3, #2
 800174e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001758:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800175e:	f107 030c 	add.w	r3, r7, #12
 8001762:	2102      	movs	r1, #2
 8001764:	4618      	mov	r0, r3
 8001766:	f002 fea1 	bl	80044ac <HAL_RCC_ClockConfig>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8001770:	f000 fd7a 	bl	8002268 <Error_Handler>
	}
}
 8001774:	bf00      	nop
 8001776:	3750      	adds	r7, #80	; 0x50
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40023800 	.word	0x40023800
 8001780:	40007000 	.word	0x40007000

08001784 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <MX_I2C1_Init+0x50>)
 800178a:	4a13      	ldr	r2, [pc, #76]	; (80017d8 <MX_I2C1_Init+0x54>)
 800178c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <MX_I2C1_Init+0x50>)
 8001790:	4a12      	ldr	r2, [pc, #72]	; (80017dc <MX_I2C1_Init+0x58>)
 8001792:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <MX_I2C1_Init+0x50>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800179a:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <MX_I2C1_Init+0x50>)
 800179c:	2200      	movs	r2, #0
 800179e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <MX_I2C1_Init+0x50>)
 80017a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017a6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017a8:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <MX_I2C1_Init+0x50>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <MX_I2C1_Init+0x50>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017b4:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <MX_I2C1_Init+0x50>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <MX_I2C1_Init+0x50>)
 80017bc:	2200      	movs	r2, #0
 80017be:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017c0:	4804      	ldr	r0, [pc, #16]	; (80017d4 <MX_I2C1_Init+0x50>)
 80017c2:	f001 feeb 	bl	800359c <HAL_I2C_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 80017cc:	f000 fd4c 	bl	8002268 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000960 	.word	0x20000960
 80017d8:	40005400 	.word	0x40005400
 80017dc:	00061a80 	.word	0x00061a80

080017e0 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80017e4:	4b17      	ldr	r3, [pc, #92]	; (8001844 <MX_SPI1_Init+0x64>)
 80017e6:	4a18      	ldr	r2, [pc, #96]	; (8001848 <MX_SPI1_Init+0x68>)
 80017e8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80017ea:	4b16      	ldr	r3, [pc, #88]	; (8001844 <MX_SPI1_Init+0x64>)
 80017ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017f0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017f2:	4b14      	ldr	r3, [pc, #80]	; (8001844 <MX_SPI1_Init+0x64>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <MX_SPI1_Init+0x64>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017fe:	4b11      	ldr	r3, [pc, #68]	; (8001844 <MX_SPI1_Init+0x64>)
 8001800:	2200      	movs	r2, #0
 8001802:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001804:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <MX_SPI1_Init+0x64>)
 8001806:	2200      	movs	r2, #0
 8001808:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <MX_SPI1_Init+0x64>)
 800180c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001810:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001812:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <MX_SPI1_Init+0x64>)
 8001814:	2210      	movs	r2, #16
 8001816:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001818:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <MX_SPI1_Init+0x64>)
 800181a:	2200      	movs	r2, #0
 800181c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <MX_SPI1_Init+0x64>)
 8001820:	2200      	movs	r2, #0
 8001822:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001824:	4b07      	ldr	r3, [pc, #28]	; (8001844 <MX_SPI1_Init+0x64>)
 8001826:	2200      	movs	r2, #0
 8001828:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <MX_SPI1_Init+0x64>)
 800182c:	220a      	movs	r2, #10
 800182e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001830:	4804      	ldr	r0, [pc, #16]	; (8001844 <MX_SPI1_Init+0x64>)
 8001832:	f003 f803 	bl	800483c <HAL_SPI_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 800183c:	f000 fd14 	bl	8002268 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000a3c 	.word	0x20000a3c
 8001848:	40013000 	.word	0x40013000

0800184c <MX_TIM10_Init>:
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8001850:	4b0e      	ldr	r3, [pc, #56]	; (800188c <MX_TIM10_Init+0x40>)
 8001852:	4a0f      	ldr	r2, [pc, #60]	; (8001890 <MX_TIM10_Init+0x44>)
 8001854:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 1343;
 8001856:	4b0d      	ldr	r3, [pc, #52]	; (800188c <MX_TIM10_Init+0x40>)
 8001858:	f240 523f 	movw	r2, #1343	; 0x53f
 800185c:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <MX_TIM10_Init+0x40>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 62499;
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <MX_TIM10_Init+0x40>)
 8001866:	f24f 4223 	movw	r2, #62499	; 0xf423
 800186a:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186c:	4b07      	ldr	r3, [pc, #28]	; (800188c <MX_TIM10_Init+0x40>)
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <MX_TIM10_Init+0x40>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001878:	4804      	ldr	r0, [pc, #16]	; (800188c <MX_TIM10_Init+0x40>)
 800187a:	f003 f843 	bl	8004904 <HAL_TIM_Base_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM10_Init+0x3c>
	{
		Error_Handler();
 8001884:	f000 fcf0 	bl	8002268 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}
 800188c:	200009b4 	.word	0x200009b4
 8001890:	40014400 	.word	0x40014400

08001894 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 800189a:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <MX_USART2_UART_Init+0x50>)
 800189c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 800189e:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018a4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80018b2:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018ba:	220c      	movs	r2, #12
 80018bc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018be:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018cc:	f003 fa58 	bl	8004d80 <HAL_UART_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 80018d6:	f000 fcc7 	bl	8002268 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000a94 	.word	0x20000a94
 80018e4:	40004400 	.word	0x40004400

080018e8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ee:	f107 030c 	add.w	r3, r7, #12
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
 80018fc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	4b4e      	ldr	r3, [pc, #312]	; (8001a3c <MX_GPIO_Init+0x154>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a4d      	ldr	r2, [pc, #308]	; (8001a3c <MX_GPIO_Init+0x154>)
 8001908:	f043 0304 	orr.w	r3, r3, #4
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b4b      	ldr	r3, [pc, #300]	; (8001a3c <MX_GPIO_Init+0x154>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0304 	and.w	r3, r3, #4
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	4b47      	ldr	r3, [pc, #284]	; (8001a3c <MX_GPIO_Init+0x154>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a46      	ldr	r2, [pc, #280]	; (8001a3c <MX_GPIO_Init+0x154>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b44      	ldr	r3, [pc, #272]	; (8001a3c <MX_GPIO_Init+0x154>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	603b      	str	r3, [r7, #0]
 800193a:	4b40      	ldr	r3, [pc, #256]	; (8001a3c <MX_GPIO_Init+0x154>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a3f      	ldr	r2, [pc, #252]	; (8001a3c <MX_GPIO_Init+0x154>)
 8001940:	f043 0302 	orr.w	r3, r3, #2
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b3d      	ldr	r3, [pc, #244]	; (8001a3c <MX_GPIO_Init+0x154>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, STATUS_LED_Pin|CARD_SELECT_Pin, GPIO_PIN_RESET);
 8001952:	2200      	movs	r2, #0
 8001954:	2181      	movs	r1, #129	; 0x81
 8001956:	483a      	ldr	r0, [pc, #232]	; (8001a40 <MX_GPIO_Init+0x158>)
 8001958:	f001 fdd4 	bl	8003504 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : STATUS_LED_Pin CARD_SELECT_Pin */
	GPIO_InitStruct.Pin = STATUS_LED_Pin|CARD_SELECT_Pin;
 800195c:	2381      	movs	r3, #129	; 0x81
 800195e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001960:	2301      	movs	r3, #1
 8001962:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800196c:	f107 030c 	add.w	r3, r7, #12
 8001970:	4619      	mov	r1, r3
 8001972:	4833      	ldr	r0, [pc, #204]	; (8001a40 <MX_GPIO_Init+0x158>)
 8001974:	f001 fc44 	bl	8003200 <HAL_GPIO_Init>

	/*Configure GPIO pin : GPS_FIX_Pin */
	GPIO_InitStruct.Pin = GPS_FIX_Pin;
 8001978:	2302      	movs	r3, #2
 800197a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800197c:	4b31      	ldr	r3, [pc, #196]	; (8001a44 <MX_GPIO_Init+0x15c>)
 800197e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001980:	2302      	movs	r3, #2
 8001982:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPS_FIX_GPIO_Port, &GPIO_InitStruct);
 8001984:	f107 030c 	add.w	r3, r7, #12
 8001988:	4619      	mov	r1, r3
 800198a:	482d      	ldr	r0, [pc, #180]	; (8001a40 <MX_GPIO_Init+0x158>)
 800198c:	f001 fc38 	bl	8003200 <HAL_GPIO_Init>

	/*Configure GPIO pin : PPS_Pin */
	GPIO_InitStruct.Pin = PPS_Pin;
 8001990:	2304      	movs	r3, #4
 8001992:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001994:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <MX_GPIO_Init+0x160>)
 8001996:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001998:	2302      	movs	r3, #2
 800199a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(PPS_GPIO_Port, &GPIO_InitStruct);
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	4619      	mov	r1, r3
 80019a2:	4827      	ldr	r0, [pc, #156]	; (8001a40 <MX_GPIO_Init+0x158>)
 80019a4:	f001 fc2c 	bl	8003200 <HAL_GPIO_Init>

	/*Configure GPIO pin : CARD_DETECT_Pin */
	GPIO_InitStruct.Pin = CARD_DETECT_Pin;
 80019a8:	2340      	movs	r3, #64	; 0x40
 80019aa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ac:	2300      	movs	r3, #0
 80019ae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019b0:	2302      	movs	r3, #2
 80019b2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(CARD_DETECT_GPIO_Port, &GPIO_InitStruct);
 80019b4:	f107 030c 	add.w	r3, r7, #12
 80019b8:	4619      	mov	r1, r3
 80019ba:	4821      	ldr	r0, [pc, #132]	; (8001a40 <MX_GPIO_Init+0x158>)
 80019bc:	f001 fc20 	bl	8003200 <HAL_GPIO_Init>

	/*Configure GPIO pin : GC_INT_Pin */
	GPIO_InitStruct.Pin = GC_INT_Pin;
 80019c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019c4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019c6:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <MX_GPIO_Init+0x160>)
 80019c8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ca:	2301      	movs	r3, #1
 80019cc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GC_INT_GPIO_Port, &GPIO_InitStruct);
 80019ce:	f107 030c 	add.w	r3, r7, #12
 80019d2:	4619      	mov	r1, r3
 80019d4:	481d      	ldr	r0, [pc, #116]	; (8001a4c <MX_GPIO_Init+0x164>)
 80019d6:	f001 fc13 	bl	8003200 <HAL_GPIO_Init>

	/*Configure GPIO pins : SET_BTN_Pin MODE_BTN_Pin */
	GPIO_InitStruct.Pin = SET_BTN_Pin|MODE_BTN_Pin;
 80019da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80019de:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019e0:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <MX_GPIO_Init+0x168>)
 80019e2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019e4:	2301      	movs	r3, #1
 80019e6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e8:	f107 030c 	add.w	r3, r7, #12
 80019ec:	4619      	mov	r1, r3
 80019ee:	4817      	ldr	r0, [pc, #92]	; (8001a4c <MX_GPIO_Init+0x164>)
 80019f0:	f001 fc06 	bl	8003200 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80019f4:	2200      	movs	r2, #0
 80019f6:	2100      	movs	r1, #0
 80019f8:	2007      	movs	r0, #7
 80019fa:	f001 fba8 	bl	800314e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80019fe:	2007      	movs	r0, #7
 8001a00:	f001 fbc1 	bl	8003186 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001a04:	2200      	movs	r2, #0
 8001a06:	2100      	movs	r1, #0
 8001a08:	2008      	movs	r0, #8
 8001a0a:	f001 fba0 	bl	800314e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001a0e:	2008      	movs	r0, #8
 8001a10:	f001 fbb9 	bl	8003186 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2100      	movs	r1, #0
 8001a18:	2017      	movs	r0, #23
 8001a1a:	f001 fb98 	bl	800314e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a1e:	2017      	movs	r0, #23
 8001a20:	f001 fbb1 	bl	8003186 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a24:	2200      	movs	r2, #0
 8001a26:	2100      	movs	r1, #0
 8001a28:	2028      	movs	r0, #40	; 0x28
 8001a2a:	f001 fb90 	bl	800314e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a2e:	2028      	movs	r0, #40	; 0x28
 8001a30:	f001 fba9 	bl	8003186 <HAL_NVIC_EnableIRQ>

}
 8001a34:	bf00      	nop
 8001a36:	3720      	adds	r7, #32
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40020800 	.word	0x40020800
 8001a44:	10310000 	.word	0x10310000
 8001a48:	10110000 	.word	0x10110000
 8001a4c:	40020000 	.word	0x40020000
 8001a50:	10210000 	.word	0x10210000

08001a54 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GC_INT_Pin){
 8001a5e:	88fb      	ldrh	r3, [r7, #6]
 8001a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a64:	d105      	bne.n	8001a72 <HAL_GPIO_EXTI_Callback+0x1e>
		gcTicks++;
 8001a66:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <HAL_GPIO_EXTI_Callback+0x50>)
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <HAL_GPIO_EXTI_Callback+0x50>)
 8001a70:	801a      	strh	r2, [r3, #0]
	}
	if(GPIO_Pin == MODE_BTN_Pin){
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a78:	d102      	bne.n	8001a80 <HAL_GPIO_EXTI_Callback+0x2c>
		modeBtn = PRESSED;
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <HAL_GPIO_EXTI_Callback+0x54>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == SET_BTN_Pin){
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a86:	d102      	bne.n	8001a8e <HAL_GPIO_EXTI_Callback+0x3a>
		setBtn = PRESSED;
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <HAL_GPIO_EXTI_Callback+0x58>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == GPS_FIX_Pin)
 8001a8e:	88fb      	ldrh	r3, [r7, #6]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d103      	bne.n	8001a9c <HAL_GPIO_EXTI_Callback+0x48>
		HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin); // status led shows GPS fix status
 8001a94:	2101      	movs	r1, #1
 8001a96:	4806      	ldr	r0, [pc, #24]	; (8001ab0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001a98:	f001 fd4d 	bl	8003536 <HAL_GPIO_TogglePin>
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	2000022c 	.word	0x2000022c
 8001aa8:	2000022e 	.word	0x2000022e
 8001aac:	2000022f 	.word	0x2000022f
 8001ab0:	40020800 	.word	0x40020800

08001ab4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	GPS_CallBack();
 8001abc:	f7ff fad4 	bl	8001068 <GPS_CallBack>
}
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	if (htim == &htim10)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a07      	ldr	r2, [pc, #28]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d104      	bne.n	8001ae2 <HAL_TIM_PeriodElapsedCallback+0x1a>
		secTick++;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	3301      	adds	r3, #1
 8001ade:	4a05      	ldr	r2, [pc, #20]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001ae0:	6013      	str	r3, [r2, #0]
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	200009b4 	.word	0x200009b4
 8001af4:	20000234 	.word	0x20000234

08001af8 <geigerCounter>:

void geigerCounter(){
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
	uint32_t currentTick = HAL_GetTick();
 8001afe:	f001 fa1d 	bl	8002f3c <HAL_GetTick>
 8001b02:	6078      	str	r0, [r7, #4]
	static uint32_t previousTick = 0;

	if (currentTick - previousTick > LOG_PERIOD){
 8001b04:	4b1c      	ldr	r3, [pc, #112]	; (8001b78 <geigerCounter+0x80>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d928      	bls.n	8001b66 <geigerCounter+0x6e>
		previousTick = currentTick;
 8001b14:	4a18      	ldr	r2, [pc, #96]	; (8001b78 <geigerCounter+0x80>)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6013      	str	r3, [r2, #0]
		cpm = gcTicks * MULTIPLIER;
 8001b1a:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <geigerCounter+0x84>)
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	f64e 2360 	movw	r3, #60000	; 0xea60
 8001b24:	fb03 f302 	mul.w	r3, r3, r2
 8001b28:	4a15      	ldr	r2, [pc, #84]	; (8001b80 <geigerCounter+0x88>)
 8001b2a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b2e:	1312      	asrs	r2, r2, #12
 8001b30:	17db      	asrs	r3, r3, #31
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <geigerCounter+0x8c>)
 8001b38:	801a      	strh	r2, [r3, #0]
		microSievert = cpm * CONVERSION_FACTOR;
 8001b3a:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <geigerCounter+0x8c>)
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe fcf8 	bl	8000534 <__aeabi_i2d>
 8001b44:	a30a      	add	r3, pc, #40	; (adr r3, 8001b70 <geigerCounter+0x78>)
 8001b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4a:	f7fe fd5d 	bl	8000608 <__aeabi_dmul>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	460c      	mov	r4, r1
 8001b52:	4618      	mov	r0, r3
 8001b54:	4621      	mov	r1, r4
 8001b56:	f7ff f84f 	bl	8000bf8 <__aeabi_d2f>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <geigerCounter+0x90>)
 8001b5e:	601a      	str	r2, [r3, #0]
		gcTicks = 0;
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <geigerCounter+0x84>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	801a      	strh	r2, [r3, #0]
	}
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd90      	pop	{r4, r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	e7967caf 	.word	0xe7967caf
 8001b74:	3f79ddc1 	.word	0x3f79ddc1
 8001b78:	2000023c 	.word	0x2000023c
 8001b7c:	2000022c 	.word	0x2000022c
 8001b80:	68db8bad 	.word	0x68db8bad
 8001b84:	200009f4 	.word	0x200009f4
 8001b88:	20000a38 	.word	0x20000a38

08001b8c <readgpsTime>:

void readgpsTime(){
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
	int8_t tmpHour = (GPS.GPRMC.UTC_Hour + utcHOffset);
 8001b92:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <readgpsTime+0x64>)
 8001b94:	f893 2250 	ldrb.w	r2, [r3, #592]	; 0x250
 8001b98:	4b16      	ldr	r3, [pc, #88]	; (8001bf4 <readgpsTime+0x68>)
 8001b9a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	71fb      	strb	r3, [r7, #7]

	if(tmpHour < 0)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	da05      	bge.n	8001bba <readgpsTime+0x2e>
		hour = 24 + tmpHour;
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	3318      	adds	r3, #24
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <readgpsTime+0x6c>)
 8001bb6:	701a      	strb	r2, [r3, #0]
 8001bb8:	e00a      	b.n	8001bd0 <readgpsTime+0x44>
	else if(tmpHour > 23)
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	2b17      	cmp	r3, #23
 8001bc0:	dd03      	ble.n	8001bca <readgpsTime+0x3e>
		hour = 0 + tmpHour;
 8001bc2:	79fa      	ldrb	r2, [r7, #7]
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <readgpsTime+0x6c>)
 8001bc6:	701a      	strb	r2, [r3, #0]
 8001bc8:	e002      	b.n	8001bd0 <readgpsTime+0x44>
	else
		hour = tmpHour;
 8001bca:	79fa      	ldrb	r2, [r7, #7]
 8001bcc:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <readgpsTime+0x6c>)
 8001bce:	701a      	strb	r2, [r3, #0]

	minute = GPS.GPRMC.UTC_Min;
 8001bd0:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <readgpsTime+0x64>)
 8001bd2:	f893 2251 	ldrb.w	r2, [r3, #593]	; 0x251
 8001bd6:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <readgpsTime+0x70>)
 8001bd8:	701a      	strb	r2, [r3, #0]
	second = GPS.GPRMC.UTC_Sec;
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <readgpsTime+0x64>)
 8001bdc:	f893 2252 	ldrb.w	r2, [r3, #594]	; 0x252
 8001be0:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <readgpsTime+0x74>)
 8001be2:	701a      	strb	r2, [r3, #0]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	20000660 	.word	0x20000660
 8001bf4:	20000018 	.word	0x20000018
 8001bf8:	20000238 	.word	0x20000238
 8001bfc:	20000239 	.word	0x20000239
 8001c00:	2000023a 	.word	0x2000023a

08001c04 <setTimeZone>:

void setTimeZone(){
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim10);
 8001c08:	483a      	ldr	r0, [pc, #232]	; (8001cf4 <setTimeZone+0xf0>)
 8001c0a:	f002 fea6 	bl	800495a <HAL_TIM_Base_Start_IT>
	SSD1306_Clear();
 8001c0e:	f000 fe53 	bl	80028b8 <SSD1306_Clear>
	SSD1306_GotoXY(10, 20);
 8001c12:	2114      	movs	r1, #20
 8001c14:	200a      	movs	r0, #10
 8001c16:	f000 fc99 	bl	800254c <SSD1306_GotoXY>
	sprintf(screenText, "UTC%+d", utcHOffset);
 8001c1a:	4b37      	ldr	r3, [pc, #220]	; (8001cf8 <setTimeZone+0xf4>)
 8001c1c:	f993 3000 	ldrsb.w	r3, [r3]
 8001c20:	461a      	mov	r2, r3
 8001c22:	4936      	ldr	r1, [pc, #216]	; (8001cfc <setTimeZone+0xf8>)
 8001c24:	4836      	ldr	r0, [pc, #216]	; (8001d00 <setTimeZone+0xfc>)
 8001c26:	f004 fcc5 	bl	80065b4 <siprintf>
	SSD1306_Puts(screenText, &Font_16x26, 1);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	4935      	ldr	r1, [pc, #212]	; (8001d04 <setTimeZone+0x100>)
 8001c2e:	4834      	ldr	r0, [pc, #208]	; (8001d00 <setTimeZone+0xfc>)
 8001c30:	f000 fd22 	bl	8002678 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001c34:	f000 fbe4 	bl	8002400 <SSD1306_UpdateScreen>

	while (secTick < 10){
 8001c38:	e050      	b.n	8001cdc <setTimeZone+0xd8>
		if (modeBtn == PRESSED){
 8001c3a:	4b33      	ldr	r3, [pc, #204]	; (8001d08 <setTimeZone+0x104>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d109      	bne.n	8001c56 <setTimeZone+0x52>
			modeBtn = OFF;
 8001c42:	4b31      	ldr	r3, [pc, #196]	; (8001d08 <setTimeZone+0x104>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim10);
 8001c48:	482a      	ldr	r0, [pc, #168]	; (8001cf4 <setTimeZone+0xf0>)
 8001c4a:	f002 feaa 	bl	80049a2 <HAL_TIM_Base_Stop_IT>
			secTick = 0;
 8001c4e:	4b2f      	ldr	r3, [pc, #188]	; (8001d0c <setTimeZone+0x108>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
			return;
 8001c54:	e04c      	b.n	8001cf0 <setTimeZone+0xec>
		}

		if(setBtn == PRESSED){
 8001c56:	4b2e      	ldr	r3, [pc, #184]	; (8001d10 <setTimeZone+0x10c>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d13a      	bne.n	8001cd4 <setTimeZone+0xd0>

			setBtn = OFF;
 8001c5e:	4b2c      	ldr	r3, [pc, #176]	; (8001d10 <setTimeZone+0x10c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
			utcHOffset++;
 8001c64:	4b24      	ldr	r3, [pc, #144]	; (8001cf8 <setTimeZone+0xf4>)
 8001c66:	f993 3000 	ldrsb.w	r3, [r3]
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	b25a      	sxtb	r2, r3
 8001c72:	4b21      	ldr	r3, [pc, #132]	; (8001cf8 <setTimeZone+0xf4>)
 8001c74:	701a      	strb	r2, [r3, #0]
			if(utcHOffset > 12 && utcHOffset > -12)
 8001c76:	4b20      	ldr	r3, [pc, #128]	; (8001cf8 <setTimeZone+0xf4>)
 8001c78:	f993 3000 	ldrsb.w	r3, [r3]
 8001c7c:	2b0c      	cmp	r3, #12
 8001c7e:	dd08      	ble.n	8001c92 <setTimeZone+0x8e>
 8001c80:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <setTimeZone+0xf4>)
 8001c82:	f993 3000 	ldrsb.w	r3, [r3]
 8001c86:	f113 0f0b 	cmn.w	r3, #11
 8001c8a:	db02      	blt.n	8001c92 <setTimeZone+0x8e>
				utcHOffset = -12;
 8001c8c:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <setTimeZone+0xf4>)
 8001c8e:	22f4      	movs	r2, #244	; 0xf4
 8001c90:	701a      	strb	r2, [r3, #0]
			if(utcHOffset < -12)
 8001c92:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <setTimeZone+0xf4>)
 8001c94:	f993 3000 	ldrsb.w	r3, [r3]
 8001c98:	f113 0f0c 	cmn.w	r3, #12
 8001c9c:	da02      	bge.n	8001ca4 <setTimeZone+0xa0>
				utcHOffset = 12;
 8001c9e:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <setTimeZone+0xf4>)
 8001ca0:	220c      	movs	r2, #12
 8001ca2:	701a      	strb	r2, [r3, #0]

			SSD1306_Clear();
 8001ca4:	f000 fe08 	bl	80028b8 <SSD1306_Clear>
			SSD1306_GotoXY(10, 20);
 8001ca8:	2114      	movs	r1, #20
 8001caa:	200a      	movs	r0, #10
 8001cac:	f000 fc4e 	bl	800254c <SSD1306_GotoXY>
			sprintf(screenText, "UTC%+d", utcHOffset);
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <setTimeZone+0xf4>)
 8001cb2:	f993 3000 	ldrsb.w	r3, [r3]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	4910      	ldr	r1, [pc, #64]	; (8001cfc <setTimeZone+0xf8>)
 8001cba:	4811      	ldr	r0, [pc, #68]	; (8001d00 <setTimeZone+0xfc>)
 8001cbc:	f004 fc7a 	bl	80065b4 <siprintf>
			SSD1306_Puts(screenText, &Font_16x26, 1);
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4910      	ldr	r1, [pc, #64]	; (8001d04 <setTimeZone+0x100>)
 8001cc4:	480e      	ldr	r0, [pc, #56]	; (8001d00 <setTimeZone+0xfc>)
 8001cc6:	f000 fcd7 	bl	8002678 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8001cca:	f000 fb99 	bl	8002400 <SSD1306_UpdateScreen>
			secTick = 0;
 8001cce:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <setTimeZone+0x108>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
		}

		HAL_Delay(500);
 8001cd4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cd8:	f001 f93c 	bl	8002f54 <HAL_Delay>
	while (secTick < 10){
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <setTimeZone+0x108>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b09      	cmp	r3, #9
 8001ce2:	d9aa      	bls.n	8001c3a <setTimeZone+0x36>
	}
	HAL_TIM_Base_Stop_IT(&htim10);
 8001ce4:	4803      	ldr	r0, [pc, #12]	; (8001cf4 <setTimeZone+0xf0>)
 8001ce6:	f002 fe5c 	bl	80049a2 <HAL_TIM_Base_Stop_IT>
	secTick = 0;
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <setTimeZone+0x108>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
}
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	200009b4 	.word	0x200009b4
 8001cf8:	20000018 	.word	0x20000018
 8001cfc:	0800a0c8 	.word	0x0800a0c8
 8001d00:	200009f8 	.word	0x200009f8
 8001d04:	20000010 	.word	0x20000010
 8001d08:	2000022e 	.word	0x2000022e
 8001d0c:	20000234 	.word	0x20000234
 8001d10:	2000022f 	.word	0x2000022f

08001d14 <radiationScreen>:

void radiationScreen(){
 8001d14:	b590      	push	{r4, r7, lr}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af02      	add	r7, sp, #8
	SSD1306_Clear();
 8001d1a:	f000 fdcd 	bl	80028b8 <SSD1306_Clear>
	sprintf(screenText, "CPM:%d", cpm);
 8001d1e:	4b25      	ldr	r3, [pc, #148]	; (8001db4 <radiationScreen+0xa0>)
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	4924      	ldr	r1, [pc, #144]	; (8001db8 <radiationScreen+0xa4>)
 8001d26:	4825      	ldr	r0, [pc, #148]	; (8001dbc <radiationScreen+0xa8>)
 8001d28:	f004 fc44 	bl	80065b4 <siprintf>
	SSD1306_GotoXY(1, 1);
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	2001      	movs	r0, #1
 8001d30:	f000 fc0c 	bl	800254c <SSD1306_GotoXY>
	SSD1306_Puts(screenText, &Font_16x26, 1);
 8001d34:	2201      	movs	r2, #1
 8001d36:	4922      	ldr	r1, [pc, #136]	; (8001dc0 <radiationScreen+0xac>)
 8001d38:	4820      	ldr	r0, [pc, #128]	; (8001dbc <radiationScreen+0xa8>)
 8001d3a:	f000 fc9d 	bl	8002678 <SSD1306_Puts>
	sprintf(screenText, "uSv/h:%0.3f", microSievert);
 8001d3e:	4b21      	ldr	r3, [pc, #132]	; (8001dc4 <radiationScreen+0xb0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fc08 	bl	8000558 <__aeabi_f2d>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	460c      	mov	r4, r1
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4623      	mov	r3, r4
 8001d50:	491d      	ldr	r1, [pc, #116]	; (8001dc8 <radiationScreen+0xb4>)
 8001d52:	481a      	ldr	r0, [pc, #104]	; (8001dbc <radiationScreen+0xa8>)
 8001d54:	f004 fc2e 	bl	80065b4 <siprintf>
	SSD1306_GotoXY(1, 30);
 8001d58:	211e      	movs	r1, #30
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	f000 fbf6 	bl	800254c <SSD1306_GotoXY>
	SSD1306_Puts(screenText, &Font_11x18, 1);
 8001d60:	2201      	movs	r2, #1
 8001d62:	491a      	ldr	r1, [pc, #104]	; (8001dcc <radiationScreen+0xb8>)
 8001d64:	4815      	ldr	r0, [pc, #84]	; (8001dbc <radiationScreen+0xa8>)
 8001d66:	f000 fc87 	bl	8002678 <SSD1306_Puts>
	SSD1306_DrawLine(1, 51, 128, 51, 1);
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	2333      	movs	r3, #51	; 0x33
 8001d70:	2280      	movs	r2, #128	; 0x80
 8001d72:	2133      	movs	r1, #51	; 0x33
 8001d74:	2001      	movs	r0, #1
 8001d76:	f000 fca4 	bl	80026c2 <SSD1306_DrawLine>
	sprintf(screenText, "Time: %02d:%02d:%02d", hour, minute, second);
 8001d7a:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <radiationScreen+0xbc>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <radiationScreen+0xc0>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	4619      	mov	r1, r3
 8001d86:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <radiationScreen+0xc4>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4913      	ldr	r1, [pc, #76]	; (8001ddc <radiationScreen+0xc8>)
 8001d90:	480a      	ldr	r0, [pc, #40]	; (8001dbc <radiationScreen+0xa8>)
 8001d92:	f004 fc0f 	bl	80065b4 <siprintf>
	SSD1306_GotoXY(1, 53);
 8001d96:	2135      	movs	r1, #53	; 0x35
 8001d98:	2001      	movs	r0, #1
 8001d9a:	f000 fbd7 	bl	800254c <SSD1306_GotoXY>
	SSD1306_Puts(screenText, &Font_7x10, 1);
 8001d9e:	2201      	movs	r2, #1
 8001da0:	490f      	ldr	r1, [pc, #60]	; (8001de0 <radiationScreen+0xcc>)
 8001da2:	4806      	ldr	r0, [pc, #24]	; (8001dbc <radiationScreen+0xa8>)
 8001da4:	f000 fc68 	bl	8002678 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001da8:	f000 fb2a 	bl	8002400 <SSD1306_UpdateScreen>
}
 8001dac:	bf00      	nop
 8001dae:	3704      	adds	r7, #4
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd90      	pop	{r4, r7, pc}
 8001db4:	200009f4 	.word	0x200009f4
 8001db8:	0800a0d0 	.word	0x0800a0d0
 8001dbc:	200009f8 	.word	0x200009f8
 8001dc0:	20000010 	.word	0x20000010
 8001dc4:	20000a38 	.word	0x20000a38
 8001dc8:	0800a0d8 	.word	0x0800a0d8
 8001dcc:	20000008 	.word	0x20000008
 8001dd0:	20000238 	.word	0x20000238
 8001dd4:	20000239 	.word	0x20000239
 8001dd8:	2000023a 	.word	0x2000023a
 8001ddc:	0800a0e4 	.word	0x0800a0e4
 8001de0:	20000000 	.word	0x20000000

08001de4 <timedateScreen>:

void timedateScreen(){
 8001de4:	b590      	push	{r4, r7, lr}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af02      	add	r7, sp, #8

	SSD1306_Clear();
 8001dea:	f000 fd65 	bl	80028b8 <SSD1306_Clear>
	sprintf(screenText, "UTC%+d", utcHOffset);
 8001dee:	4b33      	ldr	r3, [pc, #204]	; (8001ebc <timedateScreen+0xd8>)
 8001df0:	f993 3000 	ldrsb.w	r3, [r3]
 8001df4:	461a      	mov	r2, r3
 8001df6:	4932      	ldr	r1, [pc, #200]	; (8001ec0 <timedateScreen+0xdc>)
 8001df8:	4832      	ldr	r0, [pc, #200]	; (8001ec4 <timedateScreen+0xe0>)
 8001dfa:	f004 fbdb 	bl	80065b4 <siprintf>
	SSD1306_GotoXY(1, 1);
 8001dfe:	2101      	movs	r1, #1
 8001e00:	2001      	movs	r0, #1
 8001e02:	f000 fba3 	bl	800254c <SSD1306_GotoXY>
	SSD1306_Puts(screenText, &Font_11x18, 1);
 8001e06:	2201      	movs	r2, #1
 8001e08:	492f      	ldr	r1, [pc, #188]	; (8001ec8 <timedateScreen+0xe4>)
 8001e0a:	482e      	ldr	r0, [pc, #184]	; (8001ec4 <timedateScreen+0xe0>)
 8001e0c:	f000 fc34 	bl	8002678 <SSD1306_Puts>
	sprintf(screenText, "%02d:%02d:%02d", hour, minute, second);
 8001e10:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <timedateScreen+0xe8>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	461a      	mov	r2, r3
 8001e16:	4b2e      	ldr	r3, [pc, #184]	; (8001ed0 <timedateScreen+0xec>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4b2d      	ldr	r3, [pc, #180]	; (8001ed4 <timedateScreen+0xf0>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	460b      	mov	r3, r1
 8001e24:	492c      	ldr	r1, [pc, #176]	; (8001ed8 <timedateScreen+0xf4>)
 8001e26:	4827      	ldr	r0, [pc, #156]	; (8001ec4 <timedateScreen+0xe0>)
 8001e28:	f004 fbc4 	bl	80065b4 <siprintf>
	SSD1306_GotoXY(1, 17);
 8001e2c:	2111      	movs	r1, #17
 8001e2e:	2001      	movs	r0, #1
 8001e30:	f000 fb8c 	bl	800254c <SSD1306_GotoXY>
	SSD1306_Puts(screenText, &Font_11x18, 1);
 8001e34:	2201      	movs	r2, #1
 8001e36:	4924      	ldr	r1, [pc, #144]	; (8001ec8 <timedateScreen+0xe4>)
 8001e38:	4822      	ldr	r0, [pc, #136]	; (8001ec4 <timedateScreen+0xe0>)
 8001e3a:	f000 fc1d 	bl	8002678 <SSD1306_Puts>
	sprintf(screenText, "%02d-%02d-20%02d", GPS.GPRMC.Date, GPS.GPRMC.Month, GPS.GPRMC.Year);
 8001e3e:	4b27      	ldr	r3, [pc, #156]	; (8001edc <timedateScreen+0xf8>)
 8001e40:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b25      	ldr	r3, [pc, #148]	; (8001edc <timedateScreen+0xf8>)
 8001e48:	f893 3285 	ldrb.w	r3, [r3, #645]	; 0x285
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4b23      	ldr	r3, [pc, #140]	; (8001edc <timedateScreen+0xf8>)
 8001e50:	f893 3286 	ldrb.w	r3, [r3, #646]	; 0x286
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	460b      	mov	r3, r1
 8001e58:	4921      	ldr	r1, [pc, #132]	; (8001ee0 <timedateScreen+0xfc>)
 8001e5a:	481a      	ldr	r0, [pc, #104]	; (8001ec4 <timedateScreen+0xe0>)
 8001e5c:	f004 fbaa 	bl	80065b4 <siprintf>
	SSD1306_GotoXY(1, 32);
 8001e60:	2120      	movs	r1, #32
 8001e62:	2001      	movs	r0, #1
 8001e64:	f000 fb72 	bl	800254c <SSD1306_GotoXY>
	SSD1306_Puts(screenText, &Font_11x18, 1);
 8001e68:	2201      	movs	r2, #1
 8001e6a:	4917      	ldr	r1, [pc, #92]	; (8001ec8 <timedateScreen+0xe4>)
 8001e6c:	4815      	ldr	r0, [pc, #84]	; (8001ec4 <timedateScreen+0xe0>)
 8001e6e:	f000 fc03 	bl	8002678 <SSD1306_Puts>
	SSD1306_DrawLine(1, 51, 128, 51, 1);
 8001e72:	2301      	movs	r3, #1
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	2333      	movs	r3, #51	; 0x33
 8001e78:	2280      	movs	r2, #128	; 0x80
 8001e7a:	2133      	movs	r1, #51	; 0x33
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	f000 fc20 	bl	80026c2 <SSD1306_DrawLine>
	sprintf(screenText, "uSv/h: %0.3f", microSievert);
 8001e82:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <timedateScreen+0x100>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe fb66 	bl	8000558 <__aeabi_f2d>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	460c      	mov	r4, r1
 8001e90:	461a      	mov	r2, r3
 8001e92:	4623      	mov	r3, r4
 8001e94:	4914      	ldr	r1, [pc, #80]	; (8001ee8 <timedateScreen+0x104>)
 8001e96:	480b      	ldr	r0, [pc, #44]	; (8001ec4 <timedateScreen+0xe0>)
 8001e98:	f004 fb8c 	bl	80065b4 <siprintf>
	SSD1306_GotoXY(1, 53);
 8001e9c:	2135      	movs	r1, #53	; 0x35
 8001e9e:	2001      	movs	r0, #1
 8001ea0:	f000 fb54 	bl	800254c <SSD1306_GotoXY>
	SSD1306_Puts(screenText, &Font_7x10, 1);
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	4911      	ldr	r1, [pc, #68]	; (8001eec <timedateScreen+0x108>)
 8001ea8:	4806      	ldr	r0, [pc, #24]	; (8001ec4 <timedateScreen+0xe0>)
 8001eaa:	f000 fbe5 	bl	8002678 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001eae:	f000 faa7 	bl	8002400 <SSD1306_UpdateScreen>
}
 8001eb2:	bf00      	nop
 8001eb4:	3704      	adds	r7, #4
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd90      	pop	{r4, r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000018 	.word	0x20000018
 8001ec0:	0800a0c8 	.word	0x0800a0c8
 8001ec4:	200009f8 	.word	0x200009f8
 8001ec8:	20000008 	.word	0x20000008
 8001ecc:	20000238 	.word	0x20000238
 8001ed0:	20000239 	.word	0x20000239
 8001ed4:	2000023a 	.word	0x2000023a
 8001ed8:	0800a0fc 	.word	0x0800a0fc
 8001edc:	20000660 	.word	0x20000660
 8001ee0:	0800a10c 	.word	0x0800a10c
 8001ee4:	20000a38 	.word	0x20000a38
 8001ee8:	0800a120 	.word	0x0800a120
 8001eec:	20000000 	.word	0x20000000

08001ef0 <gpsinfoScreen>:

void gpsinfoScreen(){
 8001ef0:	b590      	push	{r4, r7, lr}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af02      	add	r7, sp, #8
	SSD1306_Clear();
 8001ef6:	f000 fcdf 	bl	80028b8 <SSD1306_Clear>
	sprintf(screenText, "Lat:  %c%f", GPS.GPGGA.NS_Indicator, GPS.GPGGA.LatitudeDecimal);
 8001efa:	4b53      	ldr	r3, [pc, #332]	; (8002048 <gpsinfoScreen+0x158>)
 8001efc:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 8001f00:	461a      	mov	r2, r3
 8001f02:	4b51      	ldr	r3, [pc, #324]	; (8002048 <gpsinfoScreen+0x158>)
 8001f04:	e9d3 3486 	ldrd	r3, r4, [r3, #536]	; 0x218
 8001f08:	e9cd 3400 	strd	r3, r4, [sp]
 8001f0c:	494f      	ldr	r1, [pc, #316]	; (800204c <gpsinfoScreen+0x15c>)
 8001f0e:	4850      	ldr	r0, [pc, #320]	; (8002050 <gpsinfoScreen+0x160>)
 8001f10:	f004 fb50 	bl	80065b4 <siprintf>
	SSD1306_GotoXY(1, 1);
 8001f14:	2101      	movs	r1, #1
 8001f16:	2001      	movs	r0, #1
 8001f18:	f000 fb18 	bl	800254c <SSD1306_GotoXY>
	SSD1306_Puts(screenText, &Font_7x10, 1);
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	494d      	ldr	r1, [pc, #308]	; (8002054 <gpsinfoScreen+0x164>)
 8001f20:	484b      	ldr	r0, [pc, #300]	; (8002050 <gpsinfoScreen+0x160>)
 8001f22:	f000 fba9 	bl	8002678 <SSD1306_Puts>
	sprintf(screenText, "Long: %c%f", GPS.GPGGA.EW_Indicator, GPS.GPGGA.LongitudeDecimal);
 8001f26:	4b48      	ldr	r3, [pc, #288]	; (8002048 <gpsinfoScreen+0x158>)
 8001f28:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4b46      	ldr	r3, [pc, #280]	; (8002048 <gpsinfoScreen+0x158>)
 8001f30:	e9d3 348a 	ldrd	r3, r4, [r3, #552]	; 0x228
 8001f34:	e9cd 3400 	strd	r3, r4, [sp]
 8001f38:	4947      	ldr	r1, [pc, #284]	; (8002058 <gpsinfoScreen+0x168>)
 8001f3a:	4845      	ldr	r0, [pc, #276]	; (8002050 <gpsinfoScreen+0x160>)
 8001f3c:	f004 fb3a 	bl	80065b4 <siprintf>
	SSD1306_GotoXY(1, 10);
 8001f40:	210a      	movs	r1, #10
 8001f42:	2001      	movs	r0, #1
 8001f44:	f000 fb02 	bl	800254c <SSD1306_GotoXY>
	SSD1306_Puts(screenText, &Font_7x10, 1);
 8001f48:	2201      	movs	r2, #1
 8001f4a:	4942      	ldr	r1, [pc, #264]	; (8002054 <gpsinfoScreen+0x164>)
 8001f4c:	4840      	ldr	r0, [pc, #256]	; (8002050 <gpsinfoScreen+0x160>)
 8001f4e:	f000 fb93 	bl	8002678 <SSD1306_Puts>
	sprintf(screenText, "Sats: %d", GPS.GPGGA.SatellitesUsed);
 8001f52:	4b3d      	ldr	r3, [pc, #244]	; (8002048 <gpsinfoScreen+0x158>)
 8001f54:	f893 3232 	ldrb.w	r3, [r3, #562]	; 0x232
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4940      	ldr	r1, [pc, #256]	; (800205c <gpsinfoScreen+0x16c>)
 8001f5c:	483c      	ldr	r0, [pc, #240]	; (8002050 <gpsinfoScreen+0x160>)
 8001f5e:	f004 fb29 	bl	80065b4 <siprintf>
	SSD1306_GotoXY(1, 20);
 8001f62:	2114      	movs	r1, #20
 8001f64:	2001      	movs	r0, #1
 8001f66:	f000 faf1 	bl	800254c <SSD1306_GotoXY>
	SSD1306_Puts(screenText, &Font_7x10, 1);
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	4939      	ldr	r1, [pc, #228]	; (8002054 <gpsinfoScreen+0x164>)
 8001f6e:	4838      	ldr	r0, [pc, #224]	; (8002050 <gpsinfoScreen+0x160>)
 8001f70:	f000 fb82 	bl	8002678 <SSD1306_Puts>
	switch(GPS.GPGGA.PositionFixIndicator){
 8001f74:	4b34      	ldr	r3, [pc, #208]	; (8002048 <gpsinfoScreen+0x158>)
 8001f76:	f893 3231 	ldrb.w	r3, [r3, #561]	; 0x231
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d00b      	beq.n	8001f96 <gpsinfoScreen+0xa6>
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d013      	beq.n	8001faa <gpsinfoScreen+0xba>
	default:
		SSD1306_GotoXY(1, 30);
 8001f82:	211e      	movs	r1, #30
 8001f84:	2001      	movs	r0, #1
 8001f86:	f000 fae1 	bl	800254c <SSD1306_GotoXY>
		SSD1306_Puts("Fix:  N/A", &Font_7x10, 1);
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4931      	ldr	r1, [pc, #196]	; (8002054 <gpsinfoScreen+0x164>)
 8001f8e:	4834      	ldr	r0, [pc, #208]	; (8002060 <gpsinfoScreen+0x170>)
 8001f90:	f000 fb72 	bl	8002678 <SSD1306_Puts>
		break;
 8001f94:	e012      	b.n	8001fbc <gpsinfoScreen+0xcc>
	case 1:
		SSD1306_GotoXY(1, 30);
 8001f96:	211e      	movs	r1, #30
 8001f98:	2001      	movs	r0, #1
 8001f9a:	f000 fad7 	bl	800254c <SSD1306_GotoXY>
		SSD1306_Puts("Fix:  2D", &Font_7x10, 1);
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	492c      	ldr	r1, [pc, #176]	; (8002054 <gpsinfoScreen+0x164>)
 8001fa2:	4830      	ldr	r0, [pc, #192]	; (8002064 <gpsinfoScreen+0x174>)
 8001fa4:	f000 fb68 	bl	8002678 <SSD1306_Puts>
		break;
 8001fa8:	e008      	b.n	8001fbc <gpsinfoScreen+0xcc>
	case 2:
		SSD1306_GotoXY(1, 30);
 8001faa:	211e      	movs	r1, #30
 8001fac:	2001      	movs	r0, #1
 8001fae:	f000 facd 	bl	800254c <SSD1306_GotoXY>
		SSD1306_Puts("Fix:  3D", &Font_7x10, 1);
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	4927      	ldr	r1, [pc, #156]	; (8002054 <gpsinfoScreen+0x164>)
 8001fb6:	482c      	ldr	r0, [pc, #176]	; (8002068 <gpsinfoScreen+0x178>)
 8001fb8:	f000 fb5e 	bl	8002678 <SSD1306_Puts>
	}
	sprintf(screenText, "Speed:%0.1f km/h", GPS.GPRMC.GroundSpeed * 1.852011);
 8001fbc:	4b22      	ldr	r3, [pc, #136]	; (8002048 <gpsinfoScreen+0x158>)
 8001fbe:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe fac8 	bl	8000558 <__aeabi_f2d>
 8001fc8:	a31d      	add	r3, pc, #116	; (adr r3, 8002040 <gpsinfoScreen+0x150>)
 8001fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fce:	f7fe fb1b 	bl	8000608 <__aeabi_dmul>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	460c      	mov	r4, r1
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	4623      	mov	r3, r4
 8001fda:	4924      	ldr	r1, [pc, #144]	; (800206c <gpsinfoScreen+0x17c>)
 8001fdc:	481c      	ldr	r0, [pc, #112]	; (8002050 <gpsinfoScreen+0x160>)
 8001fde:	f004 fae9 	bl	80065b4 <siprintf>
	SSD1306_GotoXY(1, 40);
 8001fe2:	2128      	movs	r1, #40	; 0x28
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	f000 fab1 	bl	800254c <SSD1306_GotoXY>
	SSD1306_Puts(screenText, &Font_7x10, 1);
 8001fea:	2201      	movs	r2, #1
 8001fec:	4919      	ldr	r1, [pc, #100]	; (8002054 <gpsinfoScreen+0x164>)
 8001fee:	4818      	ldr	r0, [pc, #96]	; (8002050 <gpsinfoScreen+0x160>)
 8001ff0:	f000 fb42 	bl	8002678 <SSD1306_Puts>
	SSD1306_DrawLine(1, 51, 128, 51, 1);
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	2333      	movs	r3, #51	; 0x33
 8001ffa:	2280      	movs	r2, #128	; 0x80
 8001ffc:	2133      	movs	r1, #51	; 0x33
 8001ffe:	2001      	movs	r0, #1
 8002000:	f000 fb5f 	bl	80026c2 <SSD1306_DrawLine>
	sprintf(screenText, "uSv/h: %0.3f", microSievert);
 8002004:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <gpsinfoScreen+0x180>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe faa5 	bl	8000558 <__aeabi_f2d>
 800200e:	4603      	mov	r3, r0
 8002010:	460c      	mov	r4, r1
 8002012:	461a      	mov	r2, r3
 8002014:	4623      	mov	r3, r4
 8002016:	4917      	ldr	r1, [pc, #92]	; (8002074 <gpsinfoScreen+0x184>)
 8002018:	480d      	ldr	r0, [pc, #52]	; (8002050 <gpsinfoScreen+0x160>)
 800201a:	f004 facb 	bl	80065b4 <siprintf>
	SSD1306_GotoXY(1, 53);
 800201e:	2135      	movs	r1, #53	; 0x35
 8002020:	2001      	movs	r0, #1
 8002022:	f000 fa93 	bl	800254c <SSD1306_GotoXY>
	SSD1306_Puts(screenText, &Font_7x10, 1);
 8002026:	2201      	movs	r2, #1
 8002028:	490a      	ldr	r1, [pc, #40]	; (8002054 <gpsinfoScreen+0x164>)
 800202a:	4809      	ldr	r0, [pc, #36]	; (8002050 <gpsinfoScreen+0x160>)
 800202c:	f000 fb24 	bl	8002678 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002030:	f000 f9e6 	bl	8002400 <SSD1306_UpdateScreen>
}
 8002034:	bf00      	nop
 8002036:	3704      	adds	r7, #4
 8002038:	46bd      	mov	sp, r7
 800203a:	bd90      	pop	{r4, r7, pc}
 800203c:	f3af 8000 	nop.w
 8002040:	494d50ec 	.word	0x494d50ec
 8002044:	3ffda1d6 	.word	0x3ffda1d6
 8002048:	20000660 	.word	0x20000660
 800204c:	0800a130 	.word	0x0800a130
 8002050:	200009f8 	.word	0x200009f8
 8002054:	20000000 	.word	0x20000000
 8002058:	0800a13c 	.word	0x0800a13c
 800205c:	0800a148 	.word	0x0800a148
 8002060:	0800a154 	.word	0x0800a154
 8002064:	0800a160 	.word	0x0800a160
 8002068:	0800a16c 	.word	0x0800a16c
 800206c:	0800a178 	.word	0x0800a178
 8002070:	20000a38 	.word	0x20000a38
 8002074:	0800a120 	.word	0x0800a120

08002078 <generalScreen>:

void generalScreen(){
 8002078:	b590      	push	{r4, r7, lr}
 800207a:	b083      	sub	sp, #12
 800207c:	af02      	add	r7, sp, #8
	SSD1306_Clear();
 800207e:	f000 fc1b 	bl	80028b8 <SSD1306_Clear>
	sprintf(screenText, "CPM:  %d", cpm);
 8002082:	4b3b      	ldr	r3, [pc, #236]	; (8002170 <generalScreen+0xf8>)
 8002084:	881b      	ldrh	r3, [r3, #0]
 8002086:	461a      	mov	r2, r3
 8002088:	493a      	ldr	r1, [pc, #232]	; (8002174 <generalScreen+0xfc>)
 800208a:	483b      	ldr	r0, [pc, #236]	; (8002178 <generalScreen+0x100>)
 800208c:	f004 fa92 	bl	80065b4 <siprintf>
	SSD1306_GotoXY(1, 1);
 8002090:	2101      	movs	r1, #1
 8002092:	2001      	movs	r0, #1
 8002094:	f000 fa5a 	bl	800254c <SSD1306_GotoXY>
	SSD1306_Puts(screenText, &Font_7x10, 1);
 8002098:	2201      	movs	r2, #1
 800209a:	4938      	ldr	r1, [pc, #224]	; (800217c <generalScreen+0x104>)
 800209c:	4836      	ldr	r0, [pc, #216]	; (8002178 <generalScreen+0x100>)
 800209e:	f000 faeb 	bl	8002678 <SSD1306_Puts>
	sprintf(screenText, "Time: %02d:%02d:%02d", hour, minute, second);
 80020a2:	4b37      	ldr	r3, [pc, #220]	; (8002180 <generalScreen+0x108>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	461a      	mov	r2, r3
 80020a8:	4b36      	ldr	r3, [pc, #216]	; (8002184 <generalScreen+0x10c>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	4619      	mov	r1, r3
 80020ae:	4b36      	ldr	r3, [pc, #216]	; (8002188 <generalScreen+0x110>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	460b      	mov	r3, r1
 80020b6:	4935      	ldr	r1, [pc, #212]	; (800218c <generalScreen+0x114>)
 80020b8:	482f      	ldr	r0, [pc, #188]	; (8002178 <generalScreen+0x100>)
 80020ba:	f004 fa7b 	bl	80065b4 <siprintf>
	SSD1306_GotoXY(1, 10);
 80020be:	210a      	movs	r1, #10
 80020c0:	2001      	movs	r0, #1
 80020c2:	f000 fa43 	bl	800254c <SSD1306_GotoXY>
	SSD1306_Puts(screenText, &Font_7x10, 1);
 80020c6:	2201      	movs	r2, #1
 80020c8:	492c      	ldr	r1, [pc, #176]	; (800217c <generalScreen+0x104>)
 80020ca:	482b      	ldr	r0, [pc, #172]	; (8002178 <generalScreen+0x100>)
 80020cc:	f000 fad4 	bl	8002678 <SSD1306_Puts>
	sprintf(screenText, "Lat:  %c%f", GPS.GPGGA.NS_Indicator, GPS.GPGGA.LatitudeDecimal);
 80020d0:	4b2f      	ldr	r3, [pc, #188]	; (8002190 <generalScreen+0x118>)
 80020d2:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 80020d6:	461a      	mov	r2, r3
 80020d8:	4b2d      	ldr	r3, [pc, #180]	; (8002190 <generalScreen+0x118>)
 80020da:	e9d3 3486 	ldrd	r3, r4, [r3, #536]	; 0x218
 80020de:	e9cd 3400 	strd	r3, r4, [sp]
 80020e2:	492c      	ldr	r1, [pc, #176]	; (8002194 <generalScreen+0x11c>)
 80020e4:	4824      	ldr	r0, [pc, #144]	; (8002178 <generalScreen+0x100>)
 80020e6:	f004 fa65 	bl	80065b4 <siprintf>
	SSD1306_GotoXY(1, 20);
 80020ea:	2114      	movs	r1, #20
 80020ec:	2001      	movs	r0, #1
 80020ee:	f000 fa2d 	bl	800254c <SSD1306_GotoXY>
	SSD1306_Puts(screenText, &Font_7x10, 1);
 80020f2:	2201      	movs	r2, #1
 80020f4:	4921      	ldr	r1, [pc, #132]	; (800217c <generalScreen+0x104>)
 80020f6:	4820      	ldr	r0, [pc, #128]	; (8002178 <generalScreen+0x100>)
 80020f8:	f000 fabe 	bl	8002678 <SSD1306_Puts>
	sprintf(screenText, "Long: %c%f", GPS.GPGGA.EW_Indicator, GPS.GPGGA.LongitudeDecimal);
 80020fc:	4b24      	ldr	r3, [pc, #144]	; (8002190 <generalScreen+0x118>)
 80020fe:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 8002102:	461a      	mov	r2, r3
 8002104:	4b22      	ldr	r3, [pc, #136]	; (8002190 <generalScreen+0x118>)
 8002106:	e9d3 348a 	ldrd	r3, r4, [r3, #552]	; 0x228
 800210a:	e9cd 3400 	strd	r3, r4, [sp]
 800210e:	4922      	ldr	r1, [pc, #136]	; (8002198 <generalScreen+0x120>)
 8002110:	4819      	ldr	r0, [pc, #100]	; (8002178 <generalScreen+0x100>)
 8002112:	f004 fa4f 	bl	80065b4 <siprintf>
	SSD1306_GotoXY(1, 30);
 8002116:	211e      	movs	r1, #30
 8002118:	2001      	movs	r0, #1
 800211a:	f000 fa17 	bl	800254c <SSD1306_GotoXY>
	SSD1306_Puts(screenText, &Font_7x10, 1);
 800211e:	2201      	movs	r2, #1
 8002120:	4916      	ldr	r1, [pc, #88]	; (800217c <generalScreen+0x104>)
 8002122:	4815      	ldr	r0, [pc, #84]	; (8002178 <generalScreen+0x100>)
 8002124:	f000 faa8 	bl	8002678 <SSD1306_Puts>
	SSD1306_DrawLine(1, 51, 128, 51, 1);
 8002128:	2301      	movs	r3, #1
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	2333      	movs	r3, #51	; 0x33
 800212e:	2280      	movs	r2, #128	; 0x80
 8002130:	2133      	movs	r1, #51	; 0x33
 8002132:	2001      	movs	r0, #1
 8002134:	f000 fac5 	bl	80026c2 <SSD1306_DrawLine>
	sprintf(screenText, "uSv/h: %0.3f", microSievert);
 8002138:	4b18      	ldr	r3, [pc, #96]	; (800219c <generalScreen+0x124>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe fa0b 	bl	8000558 <__aeabi_f2d>
 8002142:	4603      	mov	r3, r0
 8002144:	460c      	mov	r4, r1
 8002146:	461a      	mov	r2, r3
 8002148:	4623      	mov	r3, r4
 800214a:	4915      	ldr	r1, [pc, #84]	; (80021a0 <generalScreen+0x128>)
 800214c:	480a      	ldr	r0, [pc, #40]	; (8002178 <generalScreen+0x100>)
 800214e:	f004 fa31 	bl	80065b4 <siprintf>
	SSD1306_GotoXY(1, 53);
 8002152:	2135      	movs	r1, #53	; 0x35
 8002154:	2001      	movs	r0, #1
 8002156:	f000 f9f9 	bl	800254c <SSD1306_GotoXY>
	SSD1306_Puts(screenText, &Font_7x10, 1);
 800215a:	2201      	movs	r2, #1
 800215c:	4907      	ldr	r1, [pc, #28]	; (800217c <generalScreen+0x104>)
 800215e:	4806      	ldr	r0, [pc, #24]	; (8002178 <generalScreen+0x100>)
 8002160:	f000 fa8a 	bl	8002678 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002164:	f000 f94c 	bl	8002400 <SSD1306_UpdateScreen>
}
 8002168:	bf00      	nop
 800216a:	3704      	adds	r7, #4
 800216c:	46bd      	mov	sp, r7
 800216e:	bd90      	pop	{r4, r7, pc}
 8002170:	200009f4 	.word	0x200009f4
 8002174:	0800a18c 	.word	0x0800a18c
 8002178:	200009f8 	.word	0x200009f8
 800217c:	20000000 	.word	0x20000000
 8002180:	20000238 	.word	0x20000238
 8002184:	20000239 	.word	0x20000239
 8002188:	2000023a 	.word	0x2000023a
 800218c:	0800a0e4 	.word	0x0800a0e4
 8002190:	20000660 	.word	0x20000660
 8002194:	0800a130 	.word	0x0800a130
 8002198:	0800a13c 	.word	0x0800a13c
 800219c:	20000a38 	.word	0x20000a38
 80021a0:	0800a120 	.word	0x0800a120

080021a4 <standBy>:

void standBy(){
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 80021a8:	f000 fb86 	bl	80028b8 <SSD1306_Clear>
	SSD1306_GotoXY(20, 20);
 80021ac:	2114      	movs	r1, #20
 80021ae:	2014      	movs	r0, #20
 80021b0:	f000 f9cc 	bl	800254c <SSD1306_GotoXY>
	SSD1306_Puts("Entering", &Font_11x18, 1);
 80021b4:	2201      	movs	r2, #1
 80021b6:	4925      	ldr	r1, [pc, #148]	; (800224c <standBy+0xa8>)
 80021b8:	4825      	ldr	r0, [pc, #148]	; (8002250 <standBy+0xac>)
 80021ba:	f000 fa5d 	bl	8002678 <SSD1306_Puts>
	SSD1306_GotoXY(25, 40);
 80021be:	2128      	movs	r1, #40	; 0x28
 80021c0:	2019      	movs	r0, #25
 80021c2:	f000 f9c3 	bl	800254c <SSD1306_GotoXY>
	SSD1306_Puts("standby", &Font_11x18, 1);
 80021c6:	2201      	movs	r2, #1
 80021c8:	4920      	ldr	r1, [pc, #128]	; (800224c <standBy+0xa8>)
 80021ca:	4822      	ldr	r0, [pc, #136]	; (8002254 <standBy+0xb0>)
 80021cc:	f000 fa54 	bl	8002678 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80021d0:	f000 f916 	bl	8002400 <SSD1306_UpdateScreen>

	HAL_TIM_Base_Start_IT(&htim10);
 80021d4:	4820      	ldr	r0, [pc, #128]	; (8002258 <standBy+0xb4>)
 80021d6:	f002 fbc0 	bl	800495a <HAL_TIM_Base_Start_IT>
	while(secTick<6){
 80021da:	e01b      	b.n	8002214 <standBy+0x70>
		if(setBtn == PRESSED){
 80021dc:	4b1f      	ldr	r3, [pc, #124]	; (800225c <standBy+0xb8>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d109      	bne.n	80021f8 <standBy+0x54>
			setBtn = OFF;
 80021e4:	4b1d      	ldr	r3, [pc, #116]	; (800225c <standBy+0xb8>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim10);
 80021ea:	481b      	ldr	r0, [pc, #108]	; (8002258 <standBy+0xb4>)
 80021ec:	f002 fbd9 	bl	80049a2 <HAL_TIM_Base_Stop_IT>
			secTick = 0;
 80021f0:	4b1b      	ldr	r3, [pc, #108]	; (8002260 <standBy+0xbc>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
			return;
 80021f6:	e028      	b.n	800224a <standBy+0xa6>
		}

		if(modeBtn == PRESSED){
 80021f8:	4b1a      	ldr	r3, [pc, #104]	; (8002264 <standBy+0xc0>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d109      	bne.n	8002214 <standBy+0x70>
			modeBtn = OFF;
 8002200:	4b18      	ldr	r3, [pc, #96]	; (8002264 <standBy+0xc0>)
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim10);
 8002206:	4814      	ldr	r0, [pc, #80]	; (8002258 <standBy+0xb4>)
 8002208:	f002 fbcb 	bl	80049a2 <HAL_TIM_Base_Stop_IT>
			secTick = 0;
 800220c:	4b14      	ldr	r3, [pc, #80]	; (8002260 <standBy+0xbc>)
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
			return;
 8002212:	e01a      	b.n	800224a <standBy+0xa6>
	while(secTick<6){
 8002214:	4b12      	ldr	r3, [pc, #72]	; (8002260 <standBy+0xbc>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b05      	cmp	r3, #5
 800221a:	d9df      	bls.n	80021dc <standBy+0x38>
		}
	}
	HAL_TIM_Base_Stop_IT(&htim10);
 800221c:	480e      	ldr	r0, [pc, #56]	; (8002258 <standBy+0xb4>)
 800221e:	f002 fbc0 	bl	80049a2 <HAL_TIM_Base_Stop_IT>
	secTick = 0;
 8002222:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <standBy+0xbc>)
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
	SSD1306_Clear();
 8002228:	f000 fb46 	bl	80028b8 <SSD1306_Clear>
	while(1){
		if(setBtn == PRESSED){
 800222c:	4b0b      	ldr	r3, [pc, #44]	; (800225c <standBy+0xb8>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d103      	bne.n	800223c <standBy+0x98>
			setBtn = OFF;
 8002234:	4b09      	ldr	r3, [pc, #36]	; (800225c <standBy+0xb8>)
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]
			break;
 800223a:	e006      	b.n	800224a <standBy+0xa6>
		}

		if(modeBtn == PRESSED){
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <standBy+0xc0>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d1f3      	bne.n	800222c <standBy+0x88>
			modeBtn = OFF;
 8002244:	4b07      	ldr	r3, [pc, #28]	; (8002264 <standBy+0xc0>)
 8002246:	2200      	movs	r2, #0
 8002248:	701a      	strb	r2, [r3, #0]
			break;
		}
	}
}
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20000008 	.word	0x20000008
 8002250:	0800a198 	.word	0x0800a198
 8002254:	0800a1a4 	.word	0x0800a1a4
 8002258:	200009b4 	.word	0x200009b4
 800225c:	2000022f 	.word	0x2000022f
 8002260:	20000234 	.word	0x20000234
 8002264:	2000022e 	.word	0x2000022e

08002268 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
	...

08002278 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800227e:	f000 fb25 	bl	80028cc <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002282:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002286:	2201      	movs	r2, #1
 8002288:	2178      	movs	r1, #120	; 0x78
 800228a:	485b      	ldr	r0, [pc, #364]	; (80023f8 <SSD1306_Init+0x180>)
 800228c:	f001 fbac 	bl	80039e8 <HAL_I2C_IsDeviceReady>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002296:	2300      	movs	r3, #0
 8002298:	e0a9      	b.n	80023ee <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800229a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800229e:	607b      	str	r3, [r7, #4]
	while(p>0)
 80022a0:	e002      	b.n	80022a8 <SSD1306_Init+0x30>
		p--;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3b01      	subs	r3, #1
 80022a6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f9      	bne.n	80022a2 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80022ae:	22ae      	movs	r2, #174	; 0xae
 80022b0:	2100      	movs	r1, #0
 80022b2:	2078      	movs	r0, #120	; 0x78
 80022b4:	f000 fb66 	bl	8002984 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80022b8:	2220      	movs	r2, #32
 80022ba:	2100      	movs	r1, #0
 80022bc:	2078      	movs	r0, #120	; 0x78
 80022be:	f000 fb61 	bl	8002984 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80022c2:	2210      	movs	r2, #16
 80022c4:	2100      	movs	r1, #0
 80022c6:	2078      	movs	r0, #120	; 0x78
 80022c8:	f000 fb5c 	bl	8002984 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80022cc:	22b0      	movs	r2, #176	; 0xb0
 80022ce:	2100      	movs	r1, #0
 80022d0:	2078      	movs	r0, #120	; 0x78
 80022d2:	f000 fb57 	bl	8002984 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80022d6:	22c8      	movs	r2, #200	; 0xc8
 80022d8:	2100      	movs	r1, #0
 80022da:	2078      	movs	r0, #120	; 0x78
 80022dc:	f000 fb52 	bl	8002984 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80022e0:	2200      	movs	r2, #0
 80022e2:	2100      	movs	r1, #0
 80022e4:	2078      	movs	r0, #120	; 0x78
 80022e6:	f000 fb4d 	bl	8002984 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80022ea:	2210      	movs	r2, #16
 80022ec:	2100      	movs	r1, #0
 80022ee:	2078      	movs	r0, #120	; 0x78
 80022f0:	f000 fb48 	bl	8002984 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80022f4:	2240      	movs	r2, #64	; 0x40
 80022f6:	2100      	movs	r1, #0
 80022f8:	2078      	movs	r0, #120	; 0x78
 80022fa:	f000 fb43 	bl	8002984 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80022fe:	2281      	movs	r2, #129	; 0x81
 8002300:	2100      	movs	r1, #0
 8002302:	2078      	movs	r0, #120	; 0x78
 8002304:	f000 fb3e 	bl	8002984 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002308:	22ff      	movs	r2, #255	; 0xff
 800230a:	2100      	movs	r1, #0
 800230c:	2078      	movs	r0, #120	; 0x78
 800230e:	f000 fb39 	bl	8002984 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002312:	22a1      	movs	r2, #161	; 0xa1
 8002314:	2100      	movs	r1, #0
 8002316:	2078      	movs	r0, #120	; 0x78
 8002318:	f000 fb34 	bl	8002984 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800231c:	22a6      	movs	r2, #166	; 0xa6
 800231e:	2100      	movs	r1, #0
 8002320:	2078      	movs	r0, #120	; 0x78
 8002322:	f000 fb2f 	bl	8002984 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002326:	22a8      	movs	r2, #168	; 0xa8
 8002328:	2100      	movs	r1, #0
 800232a:	2078      	movs	r0, #120	; 0x78
 800232c:	f000 fb2a 	bl	8002984 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002330:	223f      	movs	r2, #63	; 0x3f
 8002332:	2100      	movs	r1, #0
 8002334:	2078      	movs	r0, #120	; 0x78
 8002336:	f000 fb25 	bl	8002984 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800233a:	22a4      	movs	r2, #164	; 0xa4
 800233c:	2100      	movs	r1, #0
 800233e:	2078      	movs	r0, #120	; 0x78
 8002340:	f000 fb20 	bl	8002984 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002344:	22d3      	movs	r2, #211	; 0xd3
 8002346:	2100      	movs	r1, #0
 8002348:	2078      	movs	r0, #120	; 0x78
 800234a:	f000 fb1b 	bl	8002984 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800234e:	2200      	movs	r2, #0
 8002350:	2100      	movs	r1, #0
 8002352:	2078      	movs	r0, #120	; 0x78
 8002354:	f000 fb16 	bl	8002984 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002358:	22d5      	movs	r2, #213	; 0xd5
 800235a:	2100      	movs	r1, #0
 800235c:	2078      	movs	r0, #120	; 0x78
 800235e:	f000 fb11 	bl	8002984 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002362:	22f0      	movs	r2, #240	; 0xf0
 8002364:	2100      	movs	r1, #0
 8002366:	2078      	movs	r0, #120	; 0x78
 8002368:	f000 fb0c 	bl	8002984 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800236c:	22d9      	movs	r2, #217	; 0xd9
 800236e:	2100      	movs	r1, #0
 8002370:	2078      	movs	r0, #120	; 0x78
 8002372:	f000 fb07 	bl	8002984 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002376:	2222      	movs	r2, #34	; 0x22
 8002378:	2100      	movs	r1, #0
 800237a:	2078      	movs	r0, #120	; 0x78
 800237c:	f000 fb02 	bl	8002984 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002380:	22da      	movs	r2, #218	; 0xda
 8002382:	2100      	movs	r1, #0
 8002384:	2078      	movs	r0, #120	; 0x78
 8002386:	f000 fafd 	bl	8002984 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800238a:	2212      	movs	r2, #18
 800238c:	2100      	movs	r1, #0
 800238e:	2078      	movs	r0, #120	; 0x78
 8002390:	f000 faf8 	bl	8002984 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002394:	22db      	movs	r2, #219	; 0xdb
 8002396:	2100      	movs	r1, #0
 8002398:	2078      	movs	r0, #120	; 0x78
 800239a:	f000 faf3 	bl	8002984 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800239e:	2220      	movs	r2, #32
 80023a0:	2100      	movs	r1, #0
 80023a2:	2078      	movs	r0, #120	; 0x78
 80023a4:	f000 faee 	bl	8002984 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80023a8:	228d      	movs	r2, #141	; 0x8d
 80023aa:	2100      	movs	r1, #0
 80023ac:	2078      	movs	r0, #120	; 0x78
 80023ae:	f000 fae9 	bl	8002984 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80023b2:	2214      	movs	r2, #20
 80023b4:	2100      	movs	r1, #0
 80023b6:	2078      	movs	r0, #120	; 0x78
 80023b8:	f000 fae4 	bl	8002984 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80023bc:	22af      	movs	r2, #175	; 0xaf
 80023be:	2100      	movs	r1, #0
 80023c0:	2078      	movs	r0, #120	; 0x78
 80023c2:	f000 fadf 	bl	8002984 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80023c6:	222e      	movs	r2, #46	; 0x2e
 80023c8:	2100      	movs	r1, #0
 80023ca:	2078      	movs	r0, #120	; 0x78
 80023cc:	f000 fada 	bl	8002984 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80023d0:	2000      	movs	r0, #0
 80023d2:	f000 f843 	bl	800245c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80023d6:	f000 f813 	bl	8002400 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80023da:	4b08      	ldr	r3, [pc, #32]	; (80023fc <SSD1306_Init+0x184>)
 80023dc:	2200      	movs	r2, #0
 80023de:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <SSD1306_Init+0x184>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80023e6:	4b05      	ldr	r3, [pc, #20]	; (80023fc <SSD1306_Init+0x184>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80023ec:	2301      	movs	r3, #1
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000960 	.word	0x20000960
 80023fc:	20000640 	.word	0x20000640

08002400 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8002406:	2300      	movs	r3, #0
 8002408:	71fb      	strb	r3, [r7, #7]
 800240a:	e01d      	b.n	8002448 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	3b50      	subs	r3, #80	; 0x50
 8002410:	b2db      	uxtb	r3, r3
 8002412:	461a      	mov	r2, r3
 8002414:	2100      	movs	r1, #0
 8002416:	2078      	movs	r0, #120	; 0x78
 8002418:	f000 fab4 	bl	8002984 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800241c:	2200      	movs	r2, #0
 800241e:	2100      	movs	r1, #0
 8002420:	2078      	movs	r0, #120	; 0x78
 8002422:	f000 faaf 	bl	8002984 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002426:	2210      	movs	r2, #16
 8002428:	2100      	movs	r1, #0
 800242a:	2078      	movs	r0, #120	; 0x78
 800242c:	f000 faaa 	bl	8002984 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002430:	79fb      	ldrb	r3, [r7, #7]
 8002432:	01db      	lsls	r3, r3, #7
 8002434:	4a08      	ldr	r2, [pc, #32]	; (8002458 <SSD1306_UpdateScreen+0x58>)
 8002436:	441a      	add	r2, r3
 8002438:	2380      	movs	r3, #128	; 0x80
 800243a:	2140      	movs	r1, #64	; 0x40
 800243c:	2078      	movs	r0, #120	; 0x78
 800243e:	f000 fa59 	bl	80028f4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	3301      	adds	r3, #1
 8002446:	71fb      	strb	r3, [r7, #7]
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	2b07      	cmp	r3, #7
 800244c:	d9de      	bls.n	800240c <SSD1306_UpdateScreen+0xc>
	}
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20000240 	.word	0x20000240

0800245c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002466:	79fb      	ldrb	r3, [r7, #7]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <SSD1306_Fill+0x14>
 800246c:	2300      	movs	r3, #0
 800246e:	e000      	b.n	8002472 <SSD1306_Fill+0x16>
 8002470:	23ff      	movs	r3, #255	; 0xff
 8002472:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002476:	4619      	mov	r1, r3
 8002478:	4803      	ldr	r0, [pc, #12]	; (8002488 <SSD1306_Fill+0x2c>)
 800247a:	f003 fa4f 	bl	800591c <memset>
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000240 	.word	0x20000240

0800248c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	80fb      	strh	r3, [r7, #6]
 8002496:	460b      	mov	r3, r1
 8002498:	80bb      	strh	r3, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	70fb      	strb	r3, [r7, #3]
	if (
 800249e:	88fb      	ldrh	r3, [r7, #6]
 80024a0:	2b7f      	cmp	r3, #127	; 0x7f
 80024a2:	d848      	bhi.n	8002536 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80024a4:	88bb      	ldrh	r3, [r7, #4]
 80024a6:	2b3f      	cmp	r3, #63	; 0x3f
 80024a8:	d845      	bhi.n	8002536 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80024aa:	4b26      	ldr	r3, [pc, #152]	; (8002544 <SSD1306_DrawPixel+0xb8>)
 80024ac:	791b      	ldrb	r3, [r3, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d006      	beq.n	80024c0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80024b2:	78fb      	ldrb	r3, [r7, #3]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	bf0c      	ite	eq
 80024b8:	2301      	moveq	r3, #1
 80024ba:	2300      	movne	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d11a      	bne.n	80024fc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80024c6:	88fa      	ldrh	r2, [r7, #6]
 80024c8:	88bb      	ldrh	r3, [r7, #4]
 80024ca:	08db      	lsrs	r3, r3, #3
 80024cc:	b298      	uxth	r0, r3
 80024ce:	4603      	mov	r3, r0
 80024d0:	01db      	lsls	r3, r3, #7
 80024d2:	4413      	add	r3, r2
 80024d4:	4a1c      	ldr	r2, [pc, #112]	; (8002548 <SSD1306_DrawPixel+0xbc>)
 80024d6:	5cd3      	ldrb	r3, [r2, r3]
 80024d8:	b25a      	sxtb	r2, r3
 80024da:	88bb      	ldrh	r3, [r7, #4]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	2101      	movs	r1, #1
 80024e2:	fa01 f303 	lsl.w	r3, r1, r3
 80024e6:	b25b      	sxtb	r3, r3
 80024e8:	4313      	orrs	r3, r2
 80024ea:	b259      	sxtb	r1, r3
 80024ec:	88fa      	ldrh	r2, [r7, #6]
 80024ee:	4603      	mov	r3, r0
 80024f0:	01db      	lsls	r3, r3, #7
 80024f2:	4413      	add	r3, r2
 80024f4:	b2c9      	uxtb	r1, r1
 80024f6:	4a14      	ldr	r2, [pc, #80]	; (8002548 <SSD1306_DrawPixel+0xbc>)
 80024f8:	54d1      	strb	r1, [r2, r3]
 80024fa:	e01d      	b.n	8002538 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80024fc:	88fa      	ldrh	r2, [r7, #6]
 80024fe:	88bb      	ldrh	r3, [r7, #4]
 8002500:	08db      	lsrs	r3, r3, #3
 8002502:	b298      	uxth	r0, r3
 8002504:	4603      	mov	r3, r0
 8002506:	01db      	lsls	r3, r3, #7
 8002508:	4413      	add	r3, r2
 800250a:	4a0f      	ldr	r2, [pc, #60]	; (8002548 <SSD1306_DrawPixel+0xbc>)
 800250c:	5cd3      	ldrb	r3, [r2, r3]
 800250e:	b25a      	sxtb	r2, r3
 8002510:	88bb      	ldrh	r3, [r7, #4]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	2101      	movs	r1, #1
 8002518:	fa01 f303 	lsl.w	r3, r1, r3
 800251c:	b25b      	sxtb	r3, r3
 800251e:	43db      	mvns	r3, r3
 8002520:	b25b      	sxtb	r3, r3
 8002522:	4013      	ands	r3, r2
 8002524:	b259      	sxtb	r1, r3
 8002526:	88fa      	ldrh	r2, [r7, #6]
 8002528:	4603      	mov	r3, r0
 800252a:	01db      	lsls	r3, r3, #7
 800252c:	4413      	add	r3, r2
 800252e:	b2c9      	uxtb	r1, r1
 8002530:	4a05      	ldr	r2, [pc, #20]	; (8002548 <SSD1306_DrawPixel+0xbc>)
 8002532:	54d1      	strb	r1, [r2, r3]
 8002534:	e000      	b.n	8002538 <SSD1306_DrawPixel+0xac>
		return;
 8002536:	bf00      	nop
	}
}
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	20000640 	.word	0x20000640
 8002548:	20000240 	.word	0x20000240

0800254c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	460a      	mov	r2, r1
 8002556:	80fb      	strh	r3, [r7, #6]
 8002558:	4613      	mov	r3, r2
 800255a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800255c:	4a05      	ldr	r2, [pc, #20]	; (8002574 <SSD1306_GotoXY+0x28>)
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002562:	4a04      	ldr	r2, [pc, #16]	; (8002574 <SSD1306_GotoXY+0x28>)
 8002564:	88bb      	ldrh	r3, [r7, #4]
 8002566:	8053      	strh	r3, [r2, #2]
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	20000640 	.word	0x20000640

08002578 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	6039      	str	r1, [r7, #0]
 8002582:	71fb      	strb	r3, [r7, #7]
 8002584:	4613      	mov	r3, r2
 8002586:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002588:	4b3a      	ldr	r3, [pc, #232]	; (8002674 <SSD1306_Putc+0xfc>)
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	461a      	mov	r2, r3
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	4413      	add	r3, r2
	if (
 8002594:	2b7f      	cmp	r3, #127	; 0x7f
 8002596:	dc07      	bgt.n	80025a8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002598:	4b36      	ldr	r3, [pc, #216]	; (8002674 <SSD1306_Putc+0xfc>)
 800259a:	885b      	ldrh	r3, [r3, #2]
 800259c:	461a      	mov	r2, r3
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	785b      	ldrb	r3, [r3, #1]
 80025a2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80025a4:	2b3f      	cmp	r3, #63	; 0x3f
 80025a6:	dd01      	ble.n	80025ac <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80025a8:	2300      	movs	r3, #0
 80025aa:	e05e      	b.n	800266a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	e04b      	b.n	800264a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	3b20      	subs	r3, #32
 80025ba:	6839      	ldr	r1, [r7, #0]
 80025bc:	7849      	ldrb	r1, [r1, #1]
 80025be:	fb01 f303 	mul.w	r3, r1, r3
 80025c2:	4619      	mov	r1, r3
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	440b      	add	r3, r1
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	4413      	add	r3, r2
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80025d0:	2300      	movs	r3, #0
 80025d2:	613b      	str	r3, [r7, #16]
 80025d4:	e030      	b.n	8002638 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d010      	beq.n	8002608 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80025e6:	4b23      	ldr	r3, [pc, #140]	; (8002674 <SSD1306_Putc+0xfc>)
 80025e8:	881a      	ldrh	r2, [r3, #0]
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	4413      	add	r3, r2
 80025f0:	b298      	uxth	r0, r3
 80025f2:	4b20      	ldr	r3, [pc, #128]	; (8002674 <SSD1306_Putc+0xfc>)
 80025f4:	885a      	ldrh	r2, [r3, #2]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	4413      	add	r3, r2
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	79ba      	ldrb	r2, [r7, #6]
 8002600:	4619      	mov	r1, r3
 8002602:	f7ff ff43 	bl	800248c <SSD1306_DrawPixel>
 8002606:	e014      	b.n	8002632 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002608:	4b1a      	ldr	r3, [pc, #104]	; (8002674 <SSD1306_Putc+0xfc>)
 800260a:	881a      	ldrh	r2, [r3, #0]
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	b29b      	uxth	r3, r3
 8002610:	4413      	add	r3, r2
 8002612:	b298      	uxth	r0, r3
 8002614:	4b17      	ldr	r3, [pc, #92]	; (8002674 <SSD1306_Putc+0xfc>)
 8002616:	885a      	ldrh	r2, [r3, #2]
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	b29b      	uxth	r3, r3
 800261c:	4413      	add	r3, r2
 800261e:	b299      	uxth	r1, r3
 8002620:	79bb      	ldrb	r3, [r7, #6]
 8002622:	2b00      	cmp	r3, #0
 8002624:	bf0c      	ite	eq
 8002626:	2301      	moveq	r3, #1
 8002628:	2300      	movne	r3, #0
 800262a:	b2db      	uxtb	r3, r3
 800262c:	461a      	mov	r2, r3
 800262e:	f7ff ff2d 	bl	800248c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	3301      	adds	r3, #1
 8002636:	613b      	str	r3, [r7, #16]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	461a      	mov	r2, r3
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4293      	cmp	r3, r2
 8002642:	d3c8      	bcc.n	80025d6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	3301      	adds	r3, #1
 8002648:	617b      	str	r3, [r7, #20]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	785b      	ldrb	r3, [r3, #1]
 800264e:	461a      	mov	r2, r3
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	4293      	cmp	r3, r2
 8002654:	d3ad      	bcc.n	80025b2 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002656:	4b07      	ldr	r3, [pc, #28]	; (8002674 <SSD1306_Putc+0xfc>)
 8002658:	881a      	ldrh	r2, [r3, #0]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	b29b      	uxth	r3, r3
 8002660:	4413      	add	r3, r2
 8002662:	b29a      	uxth	r2, r3
 8002664:	4b03      	ldr	r3, [pc, #12]	; (8002674 <SSD1306_Putc+0xfc>)
 8002666:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002668:	79fb      	ldrb	r3, [r7, #7]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000640 	.word	0x20000640

08002678 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	4613      	mov	r3, r2
 8002684:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002686:	e012      	b.n	80026ae <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	79fa      	ldrb	r2, [r7, #7]
 800268e:	68b9      	ldr	r1, [r7, #8]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff ff71 	bl	8002578 <SSD1306_Putc>
 8002696:	4603      	mov	r3, r0
 8002698:	461a      	mov	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d002      	beq.n	80026a8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	e008      	b.n	80026ba <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	3301      	adds	r3, #1
 80026ac:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1e8      	bne.n	8002688 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	781b      	ldrb	r3, [r3, #0]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 80026c2:	b590      	push	{r4, r7, lr}
 80026c4:	b087      	sub	sp, #28
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	4604      	mov	r4, r0
 80026ca:	4608      	mov	r0, r1
 80026cc:	4611      	mov	r1, r2
 80026ce:	461a      	mov	r2, r3
 80026d0:	4623      	mov	r3, r4
 80026d2:	80fb      	strh	r3, [r7, #6]
 80026d4:	4603      	mov	r3, r0
 80026d6:	80bb      	strh	r3, [r7, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	807b      	strh	r3, [r7, #2]
 80026dc:	4613      	mov	r3, r2
 80026de:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 80026e0:	88fb      	ldrh	r3, [r7, #6]
 80026e2:	2b7f      	cmp	r3, #127	; 0x7f
 80026e4:	d901      	bls.n	80026ea <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 80026e6:	237f      	movs	r3, #127	; 0x7f
 80026e8:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 80026ea:	887b      	ldrh	r3, [r7, #2]
 80026ec:	2b7f      	cmp	r3, #127	; 0x7f
 80026ee:	d901      	bls.n	80026f4 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 80026f0:	237f      	movs	r3, #127	; 0x7f
 80026f2:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 80026f4:	88bb      	ldrh	r3, [r7, #4]
 80026f6:	2b3f      	cmp	r3, #63	; 0x3f
 80026f8:	d901      	bls.n	80026fe <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 80026fa:	233f      	movs	r3, #63	; 0x3f
 80026fc:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 80026fe:	883b      	ldrh	r3, [r7, #0]
 8002700:	2b3f      	cmp	r3, #63	; 0x3f
 8002702:	d901      	bls.n	8002708 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8002704:	233f      	movs	r3, #63	; 0x3f
 8002706:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8002708:	88fa      	ldrh	r2, [r7, #6]
 800270a:	887b      	ldrh	r3, [r7, #2]
 800270c:	429a      	cmp	r2, r3
 800270e:	d205      	bcs.n	800271c <SSD1306_DrawLine+0x5a>
 8002710:	887a      	ldrh	r2, [r7, #2]
 8002712:	88fb      	ldrh	r3, [r7, #6]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	b29b      	uxth	r3, r3
 8002718:	b21b      	sxth	r3, r3
 800271a:	e004      	b.n	8002726 <SSD1306_DrawLine+0x64>
 800271c:	88fa      	ldrh	r2, [r7, #6]
 800271e:	887b      	ldrh	r3, [r7, #2]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	b29b      	uxth	r3, r3
 8002724:	b21b      	sxth	r3, r3
 8002726:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8002728:	88ba      	ldrh	r2, [r7, #4]
 800272a:	883b      	ldrh	r3, [r7, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d205      	bcs.n	800273c <SSD1306_DrawLine+0x7a>
 8002730:	883a      	ldrh	r2, [r7, #0]
 8002732:	88bb      	ldrh	r3, [r7, #4]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	b29b      	uxth	r3, r3
 8002738:	b21b      	sxth	r3, r3
 800273a:	e004      	b.n	8002746 <SSD1306_DrawLine+0x84>
 800273c:	88ba      	ldrh	r2, [r7, #4]
 800273e:	883b      	ldrh	r3, [r7, #0]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	b29b      	uxth	r3, r3
 8002744:	b21b      	sxth	r3, r3
 8002746:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8002748:	88fa      	ldrh	r2, [r7, #6]
 800274a:	887b      	ldrh	r3, [r7, #2]
 800274c:	429a      	cmp	r2, r3
 800274e:	d201      	bcs.n	8002754 <SSD1306_DrawLine+0x92>
 8002750:	2301      	movs	r3, #1
 8002752:	e001      	b.n	8002758 <SSD1306_DrawLine+0x96>
 8002754:	f04f 33ff 	mov.w	r3, #4294967295
 8002758:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 800275a:	88ba      	ldrh	r2, [r7, #4]
 800275c:	883b      	ldrh	r3, [r7, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d201      	bcs.n	8002766 <SSD1306_DrawLine+0xa4>
 8002762:	2301      	movs	r3, #1
 8002764:	e001      	b.n	800276a <SSD1306_DrawLine+0xa8>
 8002766:	f04f 33ff 	mov.w	r3, #4294967295
 800276a:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 800276c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002770:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002774:	429a      	cmp	r2, r3
 8002776:	dd06      	ble.n	8002786 <SSD1306_DrawLine+0xc4>
 8002778:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800277c:	0fda      	lsrs	r2, r3, #31
 800277e:	4413      	add	r3, r2
 8002780:	105b      	asrs	r3, r3, #1
 8002782:	b21b      	sxth	r3, r3
 8002784:	e006      	b.n	8002794 <SSD1306_DrawLine+0xd2>
 8002786:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800278a:	425b      	negs	r3, r3
 800278c:	0fda      	lsrs	r2, r3, #31
 800278e:	4413      	add	r3, r2
 8002790:	105b      	asrs	r3, r3, #1
 8002792:	b21b      	sxth	r3, r3
 8002794:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8002796:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d129      	bne.n	80027f2 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 800279e:	883a      	ldrh	r2, [r7, #0]
 80027a0:	88bb      	ldrh	r3, [r7, #4]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d205      	bcs.n	80027b2 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 80027a6:	883b      	ldrh	r3, [r7, #0]
 80027a8:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80027aa:	88bb      	ldrh	r3, [r7, #4]
 80027ac:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80027ae:	893b      	ldrh	r3, [r7, #8]
 80027b0:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80027b2:	887a      	ldrh	r2, [r7, #2]
 80027b4:	88fb      	ldrh	r3, [r7, #6]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d205      	bcs.n	80027c6 <SSD1306_DrawLine+0x104>
			tmp = x1;
 80027ba:	887b      	ldrh	r3, [r7, #2]
 80027bc:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80027c2:	893b      	ldrh	r3, [r7, #8]
 80027c4:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 80027c6:	88bb      	ldrh	r3, [r7, #4]
 80027c8:	82bb      	strh	r3, [r7, #20]
 80027ca:	e00c      	b.n	80027e6 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 80027cc:	8ab9      	ldrh	r1, [r7, #20]
 80027ce:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80027d2:	88fb      	ldrh	r3, [r7, #6]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff fe59 	bl	800248c <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 80027da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	3301      	adds	r3, #1
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	82bb      	strh	r3, [r7, #20]
 80027e6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80027ea:	883b      	ldrh	r3, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	dded      	ble.n	80027cc <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 80027f0:	e05f      	b.n	80028b2 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 80027f2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d129      	bne.n	800284e <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 80027fa:	883a      	ldrh	r2, [r7, #0]
 80027fc:	88bb      	ldrh	r3, [r7, #4]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d205      	bcs.n	800280e <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8002802:	883b      	ldrh	r3, [r7, #0]
 8002804:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8002806:	88bb      	ldrh	r3, [r7, #4]
 8002808:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800280a:	893b      	ldrh	r3, [r7, #8]
 800280c:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 800280e:	887a      	ldrh	r2, [r7, #2]
 8002810:	88fb      	ldrh	r3, [r7, #6]
 8002812:	429a      	cmp	r2, r3
 8002814:	d205      	bcs.n	8002822 <SSD1306_DrawLine+0x160>
			tmp = x1;
 8002816:	887b      	ldrh	r3, [r7, #2]
 8002818:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 800281a:	88fb      	ldrh	r3, [r7, #6]
 800281c:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800281e:	893b      	ldrh	r3, [r7, #8]
 8002820:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8002822:	88fb      	ldrh	r3, [r7, #6]
 8002824:	82bb      	strh	r3, [r7, #20]
 8002826:	e00c      	b.n	8002842 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8002828:	8abb      	ldrh	r3, [r7, #20]
 800282a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800282e:	88b9      	ldrh	r1, [r7, #4]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff fe2b 	bl	800248c <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8002836:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800283a:	b29b      	uxth	r3, r3
 800283c:	3301      	adds	r3, #1
 800283e:	b29b      	uxth	r3, r3
 8002840:	82bb      	strh	r3, [r7, #20]
 8002842:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002846:	887b      	ldrh	r3, [r7, #2]
 8002848:	429a      	cmp	r2, r3
 800284a:	dded      	ble.n	8002828 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 800284c:	e031      	b.n	80028b2 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 800284e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002852:	88b9      	ldrh	r1, [r7, #4]
 8002854:	88fb      	ldrh	r3, [r7, #6]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fe18 	bl	800248c <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 800285c:	88fa      	ldrh	r2, [r7, #6]
 800285e:	887b      	ldrh	r3, [r7, #2]
 8002860:	429a      	cmp	r2, r3
 8002862:	d103      	bne.n	800286c <SSD1306_DrawLine+0x1aa>
 8002864:	88ba      	ldrh	r2, [r7, #4]
 8002866:	883b      	ldrh	r3, [r7, #0]
 8002868:	429a      	cmp	r2, r3
 800286a:	d021      	beq.n	80028b0 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 800286c:	8afb      	ldrh	r3, [r7, #22]
 800286e:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8002870:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002874:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002878:	425b      	negs	r3, r3
 800287a:	429a      	cmp	r2, r3
 800287c:	dd08      	ble.n	8002890 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 800287e:	8afa      	ldrh	r2, [r7, #22]
 8002880:	8a3b      	ldrh	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	b29b      	uxth	r3, r3
 8002886:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8002888:	89fa      	ldrh	r2, [r7, #14]
 800288a:	88fb      	ldrh	r3, [r7, #6]
 800288c:	4413      	add	r3, r2
 800288e:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8002890:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002894:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002898:	429a      	cmp	r2, r3
 800289a:	dad8      	bge.n	800284e <SSD1306_DrawLine+0x18c>
			err += dx;
 800289c:	8afa      	ldrh	r2, [r7, #22]
 800289e:	8a7b      	ldrh	r3, [r7, #18]
 80028a0:	4413      	add	r3, r2
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 80028a6:	89ba      	ldrh	r2, [r7, #12]
 80028a8:	88bb      	ldrh	r3, [r7, #4]
 80028aa:	4413      	add	r3, r2
 80028ac:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 80028ae:	e7ce      	b.n	800284e <SSD1306_DrawLine+0x18c>
			break;
 80028b0:	bf00      	nop
		} 
	}
}
 80028b2:	371c      	adds	r7, #28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd90      	pop	{r4, r7, pc}

080028b8 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80028bc:	2000      	movs	r0, #0
 80028be:	f7ff fdcd 	bl	800245c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80028c2:	f7ff fd9d 	bl	8002400 <SSD1306_UpdateScreen>
}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80028d2:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <ssd1306_I2C_Init+0x24>)
 80028d4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80028d6:	e002      	b.n	80028de <ssd1306_I2C_Init+0x12>
		p--;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3b01      	subs	r3, #1
 80028dc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1f9      	bne.n	80028d8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	0003d090 	.word	0x0003d090

080028f4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80028f4:	b590      	push	{r4, r7, lr}
 80028f6:	b0c7      	sub	sp, #284	; 0x11c
 80028f8:	af02      	add	r7, sp, #8
 80028fa:	4604      	mov	r4, r0
 80028fc:	4608      	mov	r0, r1
 80028fe:	4639      	mov	r1, r7
 8002900:	600a      	str	r2, [r1, #0]
 8002902:	4619      	mov	r1, r3
 8002904:	1dfb      	adds	r3, r7, #7
 8002906:	4622      	mov	r2, r4
 8002908:	701a      	strb	r2, [r3, #0]
 800290a:	1dbb      	adds	r3, r7, #6
 800290c:	4602      	mov	r2, r0
 800290e:	701a      	strb	r2, [r3, #0]
 8002910:	1d3b      	adds	r3, r7, #4
 8002912:	460a      	mov	r2, r1
 8002914:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002916:	f107 030c 	add.w	r3, r7, #12
 800291a:	1dba      	adds	r2, r7, #6
 800291c:	7812      	ldrb	r2, [r2, #0]
 800291e:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002920:	2300      	movs	r3, #0
 8002922:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002926:	e010      	b.n	800294a <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8002928:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800292c:	463a      	mov	r2, r7
 800292e:	6812      	ldr	r2, [r2, #0]
 8002930:	441a      	add	r2, r3
 8002932:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002936:	3301      	adds	r3, #1
 8002938:	7811      	ldrb	r1, [r2, #0]
 800293a:	f107 020c 	add.w	r2, r7, #12
 800293e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002940:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002944:	3301      	adds	r3, #1
 8002946:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800294a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800294e:	b29b      	uxth	r3, r3
 8002950:	1d3a      	adds	r2, r7, #4
 8002952:	8812      	ldrh	r2, [r2, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d8e7      	bhi.n	8002928 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002958:	1dfb      	adds	r3, r7, #7
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	b299      	uxth	r1, r3
 800295e:	1d3b      	adds	r3, r7, #4
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	3301      	adds	r3, #1
 8002964:	b298      	uxth	r0, r3
 8002966:	f107 020c 	add.w	r2, r7, #12
 800296a:	230a      	movs	r3, #10
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	4603      	mov	r3, r0
 8002970:	4803      	ldr	r0, [pc, #12]	; (8002980 <ssd1306_I2C_WriteMulti+0x8c>)
 8002972:	f000 ff3b 	bl	80037ec <HAL_I2C_Master_Transmit>
}
 8002976:	bf00      	nop
 8002978:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800297c:	46bd      	mov	sp, r7
 800297e:	bd90      	pop	{r4, r7, pc}
 8002980:	20000960 	.word	0x20000960

08002984 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af02      	add	r7, sp, #8
 800298a:	4603      	mov	r3, r0
 800298c:	71fb      	strb	r3, [r7, #7]
 800298e:	460b      	mov	r3, r1
 8002990:	71bb      	strb	r3, [r7, #6]
 8002992:	4613      	mov	r3, r2
 8002994:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002996:	79bb      	ldrb	r3, [r7, #6]
 8002998:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800299a:	797b      	ldrb	r3, [r7, #5]
 800299c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800299e:	79fb      	ldrb	r3, [r7, #7]
 80029a0:	b299      	uxth	r1, r3
 80029a2:	f107 020c 	add.w	r2, r7, #12
 80029a6:	230a      	movs	r3, #10
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	2302      	movs	r3, #2
 80029ac:	4803      	ldr	r0, [pc, #12]	; (80029bc <ssd1306_I2C_Write+0x38>)
 80029ae:	f000 ff1d 	bl	80037ec <HAL_I2C_Master_Transmit>
}
 80029b2:	bf00      	nop
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20000960 	.word	0x20000960

080029c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	607b      	str	r3, [r7, #4]
 80029ca:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <HAL_MspInit+0x4c>)
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	4a0f      	ldr	r2, [pc, #60]	; (8002a0c <HAL_MspInit+0x4c>)
 80029d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029d4:	6453      	str	r3, [r2, #68]	; 0x44
 80029d6:	4b0d      	ldr	r3, [pc, #52]	; (8002a0c <HAL_MspInit+0x4c>)
 80029d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029de:	607b      	str	r3, [r7, #4]
 80029e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	603b      	str	r3, [r7, #0]
 80029e6:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <HAL_MspInit+0x4c>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	4a08      	ldr	r2, [pc, #32]	; (8002a0c <HAL_MspInit+0x4c>)
 80029ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f0:	6413      	str	r3, [r2, #64]	; 0x40
 80029f2:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <HAL_MspInit+0x4c>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fa:	603b      	str	r3, [r7, #0]
 80029fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	40023800 	.word	0x40023800

08002a10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08a      	sub	sp, #40	; 0x28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a18:	f107 0314 	add.w	r3, r7, #20
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a19      	ldr	r2, [pc, #100]	; (8002a94 <HAL_I2C_MspInit+0x84>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d12b      	bne.n	8002a8a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	4b18      	ldr	r3, [pc, #96]	; (8002a98 <HAL_I2C_MspInit+0x88>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	4a17      	ldr	r2, [pc, #92]	; (8002a98 <HAL_I2C_MspInit+0x88>)
 8002a3c:	f043 0302 	orr.w	r3, r3, #2
 8002a40:	6313      	str	r3, [r2, #48]	; 0x30
 8002a42:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <HAL_I2C_MspInit+0x88>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a4e:	23c0      	movs	r3, #192	; 0xc0
 8002a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a52:	2312      	movs	r3, #18
 8002a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a56:	2301      	movs	r3, #1
 8002a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a5e:	2304      	movs	r3, #4
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a62:	f107 0314 	add.w	r3, r7, #20
 8002a66:	4619      	mov	r1, r3
 8002a68:	480c      	ldr	r0, [pc, #48]	; (8002a9c <HAL_I2C_MspInit+0x8c>)
 8002a6a:	f000 fbc9 	bl	8003200 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <HAL_I2C_MspInit+0x88>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	4a08      	ldr	r2, [pc, #32]	; (8002a98 <HAL_I2C_MspInit+0x88>)
 8002a78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a7e:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <HAL_I2C_MspInit+0x88>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a8a:	bf00      	nop
 8002a8c:	3728      	adds	r7, #40	; 0x28
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40005400 	.word	0x40005400
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	40020400 	.word	0x40020400

08002aa0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08a      	sub	sp, #40	; 0x28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a19      	ldr	r2, [pc, #100]	; (8002b24 <HAL_SPI_MspInit+0x84>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d12b      	bne.n	8002b1a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	4b18      	ldr	r3, [pc, #96]	; (8002b28 <HAL_SPI_MspInit+0x88>)
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	4a17      	ldr	r2, [pc, #92]	; (8002b28 <HAL_SPI_MspInit+0x88>)
 8002acc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ad2:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <HAL_SPI_MspInit+0x88>)
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ada:	613b      	str	r3, [r7, #16]
 8002adc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	4b11      	ldr	r3, [pc, #68]	; (8002b28 <HAL_SPI_MspInit+0x88>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	4a10      	ldr	r2, [pc, #64]	; (8002b28 <HAL_SPI_MspInit+0x88>)
 8002ae8:	f043 0301 	orr.w	r3, r3, #1
 8002aec:	6313      	str	r3, [r2, #48]	; 0x30
 8002aee:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <HAL_SPI_MspInit+0x88>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002afa:	23e0      	movs	r3, #224	; 0xe0
 8002afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afe:	2302      	movs	r3, #2
 8002b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b06:	2303      	movs	r3, #3
 8002b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b0a:	2305      	movs	r3, #5
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b0e:	f107 0314 	add.w	r3, r7, #20
 8002b12:	4619      	mov	r1, r3
 8002b14:	4805      	ldr	r0, [pc, #20]	; (8002b2c <HAL_SPI_MspInit+0x8c>)
 8002b16:	f000 fb73 	bl	8003200 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b1a:	bf00      	nop
 8002b1c:	3728      	adds	r7, #40	; 0x28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40013000 	.word	0x40013000
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40020000 	.word	0x40020000

08002b30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a0e      	ldr	r2, [pc, #56]	; (8002b78 <HAL_TIM_Base_MspInit+0x48>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d115      	bne.n	8002b6e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	4b0d      	ldr	r3, [pc, #52]	; (8002b7c <HAL_TIM_Base_MspInit+0x4c>)
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	4a0c      	ldr	r2, [pc, #48]	; (8002b7c <HAL_TIM_Base_MspInit+0x4c>)
 8002b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b50:	6453      	str	r3, [r2, #68]	; 0x44
 8002b52:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <HAL_TIM_Base_MspInit+0x4c>)
 8002b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002b5e:	2200      	movs	r2, #0
 8002b60:	2100      	movs	r1, #0
 8002b62:	2019      	movs	r0, #25
 8002b64:	f000 faf3 	bl	800314e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002b68:	2019      	movs	r0, #25
 8002b6a:	f000 fb0c 	bl	8003186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002b6e:	bf00      	nop
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40014400 	.word	0x40014400
 8002b7c:	40023800 	.word	0x40023800

08002b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b08a      	sub	sp, #40	; 0x28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b88:	f107 0314 	add.w	r3, r7, #20
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	609a      	str	r2, [r3, #8]
 8002b94:	60da      	str	r2, [r3, #12]
 8002b96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a1d      	ldr	r2, [pc, #116]	; (8002c14 <HAL_UART_MspInit+0x94>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d133      	bne.n	8002c0a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	4b1c      	ldr	r3, [pc, #112]	; (8002c18 <HAL_UART_MspInit+0x98>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	4a1b      	ldr	r2, [pc, #108]	; (8002c18 <HAL_UART_MspInit+0x98>)
 8002bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb2:	4b19      	ldr	r3, [pc, #100]	; (8002c18 <HAL_UART_MspInit+0x98>)
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bba:	613b      	str	r3, [r7, #16]
 8002bbc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	4b15      	ldr	r3, [pc, #84]	; (8002c18 <HAL_UART_MspInit+0x98>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	4a14      	ldr	r2, [pc, #80]	; (8002c18 <HAL_UART_MspInit+0x98>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bce:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <HAL_UART_MspInit+0x98>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002bda:	230c      	movs	r3, #12
 8002bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bde:	2302      	movs	r3, #2
 8002be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002be2:	2301      	movs	r3, #1
 8002be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be6:	2303      	movs	r3, #3
 8002be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bea:	2307      	movs	r3, #7
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bee:	f107 0314 	add.w	r3, r7, #20
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4809      	ldr	r0, [pc, #36]	; (8002c1c <HAL_UART_MspInit+0x9c>)
 8002bf6:	f000 fb03 	bl	8003200 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	2026      	movs	r0, #38	; 0x26
 8002c00:	f000 faa5 	bl	800314e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c04:	2026      	movs	r0, #38	; 0x26
 8002c06:	f000 fabe 	bl	8003186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c0a:	bf00      	nop
 8002c0c:	3728      	adds	r7, #40	; 0x28
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40004400 	.word	0x40004400
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40020000 	.word	0x40020000

08002c20 <SDTimer_Handler>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SDTimer_Handler(void){
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8002c24:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <SDTimer_Handler+0x40>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d006      	beq.n	8002c3c <SDTimer_Handler+0x1c>
		Timer1--;
 8002c2e:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <SDTimer_Handler+0x40>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <SDTimer_Handler+0x40>)
 8002c3a:	701a      	strb	r2, [r3, #0]

	if(Timer2 > 0)
 8002c3c:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <SDTimer_Handler+0x44>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d006      	beq.n	8002c54 <SDTimer_Handler+0x34>
		Timer2--;
 8002c46:	4b07      	ldr	r3, [pc, #28]	; (8002c64 <SDTimer_Handler+0x44>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	4b04      	ldr	r3, [pc, #16]	; (8002c64 <SDTimer_Handler+0x44>)
 8002c52:	701a      	strb	r2, [r3, #0]
}
 8002c54:	bf00      	nop
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	20000ad5 	.word	0x20000ad5
 8002c64:	20000ad4 	.word	0x20000ad4

08002c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c6c:	bf00      	nop
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c76:	b480      	push	{r7}
 8002c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c7a:	e7fe      	b.n	8002c7a <HardFault_Handler+0x4>

08002c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c80:	e7fe      	b.n	8002c80 <MemManage_Handler+0x4>

08002c82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c82:	b480      	push	{r7}
 8002c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c86:	e7fe      	b.n	8002c86 <BusFault_Handler+0x4>

08002c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c8c:	e7fe      	b.n	8002c8c <UsageFault_Handler+0x4>

08002c8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ca0:	bf00      	nop
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002caa:	b480      	push	{r7}
 8002cac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002cbc:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <SysTick_Handler+0x30>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <SysTick_Handler+0x30>)
 8002cc8:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10){
 8002cca:	4b07      	ldr	r3, [pc, #28]	; (8002ce8 <SysTick_Handler+0x30>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b09      	cmp	r3, #9
 8002cd2:	d904      	bls.n	8002cde <SysTick_Handler+0x26>
		FatFsCnt = 0;
 8002cd4:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <SysTick_Handler+0x30>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8002cda:	f7ff ffa1 	bl	8002c20 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cde:	f000 f919 	bl	8002f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20000646 	.word	0x20000646

08002cec <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002cf0:	2002      	movs	r0, #2
 8002cf2:	f000 fc3b 	bl	800356c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002cfe:	2004      	movs	r0, #4
 8002d00:	f000 fc34 	bl	800356c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002d04:	bf00      	nop
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002d0c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002d10:	f000 fc2c 	bl	800356c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002d14:	bf00      	nop
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002d1c:	4802      	ldr	r0, [pc, #8]	; (8002d28 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002d1e:	f001 fe6b 	bl	80049f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	200009b4 	.word	0x200009b4

08002d2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002d30:	4802      	ldr	r0, [pc, #8]	; (8002d3c <USART2_IRQHandler+0x10>)
 8002d32:	f002 f8c7 	bl	8004ec4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20000a94 	.word	0x20000a94

08002d40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002d44:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002d48:	f000 fc10 	bl	800356c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002d4c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002d50:	f000 fc0c 	bl	800356c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d54:	bf00      	nop
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002d60:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <_sbrk+0x50>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d102      	bne.n	8002d6e <_sbrk+0x16>
		heap_end = &end;
 8002d68:	4b0f      	ldr	r3, [pc, #60]	; (8002da8 <_sbrk+0x50>)
 8002d6a:	4a10      	ldr	r2, [pc, #64]	; (8002dac <_sbrk+0x54>)
 8002d6c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002d6e:	4b0e      	ldr	r3, [pc, #56]	; (8002da8 <_sbrk+0x50>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002d74:	4b0c      	ldr	r3, [pc, #48]	; (8002da8 <_sbrk+0x50>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	466a      	mov	r2, sp
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d907      	bls.n	8002d92 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002d82:	f002 fda1 	bl	80058c8 <__errno>
 8002d86:	4602      	mov	r2, r0
 8002d88:	230c      	movs	r3, #12
 8002d8a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d90:	e006      	b.n	8002da0 <_sbrk+0x48>
	}

	heap_end += incr;
 8002d92:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <_sbrk+0x50>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4413      	add	r3, r2
 8002d9a:	4a03      	ldr	r2, [pc, #12]	; (8002da8 <_sbrk+0x50>)
 8002d9c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20000648 	.word	0x20000648
 8002dac:	20002b50 	.word	0x20002b50

08002db0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002db4:	4b16      	ldr	r3, [pc, #88]	; (8002e10 <SystemInit+0x60>)
 8002db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dba:	4a15      	ldr	r2, [pc, #84]	; (8002e10 <SystemInit+0x60>)
 8002dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002dc4:	4b13      	ldr	r3, [pc, #76]	; (8002e14 <SystemInit+0x64>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a12      	ldr	r2, [pc, #72]	; (8002e14 <SystemInit+0x64>)
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002dd0:	4b10      	ldr	r3, [pc, #64]	; (8002e14 <SystemInit+0x64>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002dd6:	4b0f      	ldr	r3, [pc, #60]	; (8002e14 <SystemInit+0x64>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a0e      	ldr	r2, [pc, #56]	; (8002e14 <SystemInit+0x64>)
 8002ddc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002de6:	4b0b      	ldr	r3, [pc, #44]	; (8002e14 <SystemInit+0x64>)
 8002de8:	4a0b      	ldr	r2, [pc, #44]	; (8002e18 <SystemInit+0x68>)
 8002dea:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002dec:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <SystemInit+0x64>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a08      	ldr	r2, [pc, #32]	; (8002e14 <SystemInit+0x64>)
 8002df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002df6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002df8:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <SystemInit+0x64>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002dfe:	4b04      	ldr	r3, [pc, #16]	; (8002e10 <SystemInit+0x60>)
 8002e00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e04:	609a      	str	r2, [r3, #8]
#endif
}
 8002e06:	bf00      	nop
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	e000ed00 	.word	0xe000ed00
 8002e14:	40023800 	.word	0x40023800
 8002e18:	24003010 	.word	0x24003010

08002e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e54 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e22:	e003      	b.n	8002e2c <LoopCopyDataInit>

08002e24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e24:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002e26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e2a:	3104      	adds	r1, #4

08002e2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e2c:	480b      	ldr	r0, [pc, #44]	; (8002e5c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002e2e:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002e30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002e34:	d3f6      	bcc.n	8002e24 <CopyDataInit>
  ldr  r2, =_sbss
 8002e36:	4a0b      	ldr	r2, [pc, #44]	; (8002e64 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002e38:	e002      	b.n	8002e40 <LoopFillZerobss>

08002e3a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002e3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002e3c:	f842 3b04 	str.w	r3, [r2], #4

08002e40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002e40:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002e42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002e44:	d3f9      	bcc.n	8002e3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e46:	f7ff ffb3 	bl	8002db0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e4a:	f002 fd43 	bl	80058d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e4e:	f7fe fb7b 	bl	8001548 <main>
  bx  lr    
 8002e52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e54:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002e58:	0800cd40 	.word	0x0800cd40
  ldr  r0, =_sdata
 8002e5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002e60:	20000210 	.word	0x20000210
  ldr  r2, =_sbss
 8002e64:	20000210 	.word	0x20000210
  ldr  r3, = _ebss
 8002e68:	20002b50 	.word	0x20002b50

08002e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e6c:	e7fe      	b.n	8002e6c <ADC_IRQHandler>
	...

08002e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e74:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <HAL_Init+0x40>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a0d      	ldr	r2, [pc, #52]	; (8002eb0 <HAL_Init+0x40>)
 8002e7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e80:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <HAL_Init+0x40>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a0a      	ldr	r2, [pc, #40]	; (8002eb0 <HAL_Init+0x40>)
 8002e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e8c:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <HAL_Init+0x40>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a07      	ldr	r2, [pc, #28]	; (8002eb0 <HAL_Init+0x40>)
 8002e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e98:	2003      	movs	r0, #3
 8002e9a:	f000 f94d 	bl	8003138 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	f000 f808 	bl	8002eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ea4:	f7ff fd8c 	bl	80029c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40023c00 	.word	0x40023c00

08002eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ebc:	4b12      	ldr	r3, [pc, #72]	; (8002f08 <HAL_InitTick+0x54>)
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	4b12      	ldr	r3, [pc, #72]	; (8002f0c <HAL_InitTick+0x58>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 f965 	bl	80031a2 <HAL_SYSTICK_Config>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e00e      	b.n	8002f00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b0f      	cmp	r3, #15
 8002ee6:	d80a      	bhi.n	8002efe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ee8:	2200      	movs	r2, #0
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef0:	f000 f92d 	bl	800314e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ef4:	4a06      	ldr	r2, [pc, #24]	; (8002f10 <HAL_InitTick+0x5c>)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	e000      	b.n	8002f00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	2000001c 	.word	0x2000001c
 8002f0c:	20000024 	.word	0x20000024
 8002f10:	20000020 	.word	0x20000020

08002f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f18:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <HAL_IncTick+0x20>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <HAL_IncTick+0x24>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4413      	add	r3, r2
 8002f24:	4a04      	ldr	r2, [pc, #16]	; (8002f38 <HAL_IncTick+0x24>)
 8002f26:	6013      	str	r3, [r2, #0]
}
 8002f28:	bf00      	nop
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	20000024 	.word	0x20000024
 8002f38:	20000ad8 	.word	0x20000ad8

08002f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f40:	4b03      	ldr	r3, [pc, #12]	; (8002f50 <HAL_GetTick+0x14>)
 8002f42:	681b      	ldr	r3, [r3, #0]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	20000ad8 	.word	0x20000ad8

08002f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f5c:	f7ff ffee 	bl	8002f3c <HAL_GetTick>
 8002f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6c:	d005      	beq.n	8002f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f6e:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <HAL_Delay+0x40>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	461a      	mov	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	4413      	add	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f7a:	bf00      	nop
 8002f7c:	f7ff ffde 	bl	8002f3c <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d8f7      	bhi.n	8002f7c <HAL_Delay+0x28>
  {
  }
}
 8002f8c:	bf00      	nop
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	20000024 	.word	0x20000024

08002f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fa8:	4b0c      	ldr	r3, [pc, #48]	; (8002fdc <__NVIC_SetPriorityGrouping+0x44>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fca:	4a04      	ldr	r2, [pc, #16]	; (8002fdc <__NVIC_SetPriorityGrouping+0x44>)
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	60d3      	str	r3, [r2, #12]
}
 8002fd0:	bf00      	nop
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fe4:	4b04      	ldr	r3, [pc, #16]	; (8002ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	0a1b      	lsrs	r3, r3, #8
 8002fea:	f003 0307 	and.w	r3, r3, #7
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	e000ed00 	.word	0xe000ed00

08002ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300a:	2b00      	cmp	r3, #0
 800300c:	db0b      	blt.n	8003026 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	f003 021f 	and.w	r2, r3, #31
 8003014:	4907      	ldr	r1, [pc, #28]	; (8003034 <__NVIC_EnableIRQ+0x38>)
 8003016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301a:	095b      	lsrs	r3, r3, #5
 800301c:	2001      	movs	r0, #1
 800301e:	fa00 f202 	lsl.w	r2, r0, r2
 8003022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	e000e100 	.word	0xe000e100

08003038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	6039      	str	r1, [r7, #0]
 8003042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003048:	2b00      	cmp	r3, #0
 800304a:	db0a      	blt.n	8003062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	b2da      	uxtb	r2, r3
 8003050:	490c      	ldr	r1, [pc, #48]	; (8003084 <__NVIC_SetPriority+0x4c>)
 8003052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003056:	0112      	lsls	r2, r2, #4
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	440b      	add	r3, r1
 800305c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003060:	e00a      	b.n	8003078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	b2da      	uxtb	r2, r3
 8003066:	4908      	ldr	r1, [pc, #32]	; (8003088 <__NVIC_SetPriority+0x50>)
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	3b04      	subs	r3, #4
 8003070:	0112      	lsls	r2, r2, #4
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	440b      	add	r3, r1
 8003076:	761a      	strb	r2, [r3, #24]
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	e000e100 	.word	0xe000e100
 8003088:	e000ed00 	.word	0xe000ed00

0800308c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800308c:	b480      	push	{r7}
 800308e:	b089      	sub	sp, #36	; 0x24
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f1c3 0307 	rsb	r3, r3, #7
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	bf28      	it	cs
 80030aa:	2304      	movcs	r3, #4
 80030ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	3304      	adds	r3, #4
 80030b2:	2b06      	cmp	r3, #6
 80030b4:	d902      	bls.n	80030bc <NVIC_EncodePriority+0x30>
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	3b03      	subs	r3, #3
 80030ba:	e000      	b.n	80030be <NVIC_EncodePriority+0x32>
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c0:	f04f 32ff 	mov.w	r2, #4294967295
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	43da      	mvns	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	401a      	ands	r2, r3
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030d4:	f04f 31ff 	mov.w	r1, #4294967295
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	fa01 f303 	lsl.w	r3, r1, r3
 80030de:	43d9      	mvns	r1, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e4:	4313      	orrs	r3, r2
         );
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3724      	adds	r7, #36	; 0x24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
	...

080030f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3b01      	subs	r3, #1
 8003100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003104:	d301      	bcc.n	800310a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003106:	2301      	movs	r3, #1
 8003108:	e00f      	b.n	800312a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800310a:	4a0a      	ldr	r2, [pc, #40]	; (8003134 <SysTick_Config+0x40>)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3b01      	subs	r3, #1
 8003110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003112:	210f      	movs	r1, #15
 8003114:	f04f 30ff 	mov.w	r0, #4294967295
 8003118:	f7ff ff8e 	bl	8003038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800311c:	4b05      	ldr	r3, [pc, #20]	; (8003134 <SysTick_Config+0x40>)
 800311e:	2200      	movs	r2, #0
 8003120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003122:	4b04      	ldr	r3, [pc, #16]	; (8003134 <SysTick_Config+0x40>)
 8003124:	2207      	movs	r2, #7
 8003126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	e000e010 	.word	0xe000e010

08003138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7ff ff29 	bl	8002f98 <__NVIC_SetPriorityGrouping>
}
 8003146:	bf00      	nop
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800314e:	b580      	push	{r7, lr}
 8003150:	b086      	sub	sp, #24
 8003152:	af00      	add	r7, sp, #0
 8003154:	4603      	mov	r3, r0
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	607a      	str	r2, [r7, #4]
 800315a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003160:	f7ff ff3e 	bl	8002fe0 <__NVIC_GetPriorityGrouping>
 8003164:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	6978      	ldr	r0, [r7, #20]
 800316c:	f7ff ff8e 	bl	800308c <NVIC_EncodePriority>
 8003170:	4602      	mov	r2, r0
 8003172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003176:	4611      	mov	r1, r2
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff ff5d 	bl	8003038 <__NVIC_SetPriority>
}
 800317e:	bf00      	nop
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	4603      	mov	r3, r0
 800318e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff ff31 	bl	8002ffc <__NVIC_EnableIRQ>
}
 800319a:	bf00      	nop
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7ff ffa2 	bl	80030f4 <SysTick_Config>
 80031b0:	4603      	mov	r3, r0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d004      	beq.n	80031d8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2280      	movs	r2, #128	; 0x80
 80031d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e00c      	b.n	80031f2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2205      	movs	r2, #5
 80031dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 0201 	bic.w	r2, r2, #1
 80031ee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
	...

08003200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003200:	b480      	push	{r7}
 8003202:	b089      	sub	sp, #36	; 0x24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800320a:	2300      	movs	r3, #0
 800320c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800320e:	2300      	movs	r3, #0
 8003210:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003212:	2300      	movs	r3, #0
 8003214:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003216:	2300      	movs	r3, #0
 8003218:	61fb      	str	r3, [r7, #28]
 800321a:	e159      	b.n	80034d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800321c:	2201      	movs	r2, #1
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	4013      	ands	r3, r2
 800322e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	429a      	cmp	r2, r3
 8003236:	f040 8148 	bne.w	80034ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d003      	beq.n	800324a <HAL_GPIO_Init+0x4a>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b12      	cmp	r3, #18
 8003248:	d123      	bne.n	8003292 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	08da      	lsrs	r2, r3, #3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3208      	adds	r2, #8
 8003252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003256:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	220f      	movs	r2, #15
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43db      	mvns	r3, r3
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4013      	ands	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	691a      	ldr	r2, [r3, #16]
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	4313      	orrs	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	08da      	lsrs	r2, r3, #3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3208      	adds	r2, #8
 800328c:	69b9      	ldr	r1, [r7, #24]
 800328e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	2203      	movs	r2, #3
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f003 0203 	and.w	r2, r3, #3
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	4313      	orrs	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d00b      	beq.n	80032e6 <HAL_GPIO_Init+0xe6>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d007      	beq.n	80032e6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032da:	2b11      	cmp	r3, #17
 80032dc:	d003      	beq.n	80032e6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b12      	cmp	r3, #18
 80032e4:	d130      	bne.n	8003348 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	2203      	movs	r2, #3
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43db      	mvns	r3, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4013      	ands	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4313      	orrs	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800331c:	2201      	movs	r2, #1
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	43db      	mvns	r3, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4013      	ands	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	091b      	lsrs	r3, r3, #4
 8003332:	f003 0201 	and.w	r2, r3, #1
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4313      	orrs	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	2203      	movs	r2, #3
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	43db      	mvns	r3, r3
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4013      	ands	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 80a2 	beq.w	80034ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003386:	2300      	movs	r3, #0
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	4b56      	ldr	r3, [pc, #344]	; (80034e4 <HAL_GPIO_Init+0x2e4>)
 800338c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338e:	4a55      	ldr	r2, [pc, #340]	; (80034e4 <HAL_GPIO_Init+0x2e4>)
 8003390:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003394:	6453      	str	r3, [r2, #68]	; 0x44
 8003396:	4b53      	ldr	r3, [pc, #332]	; (80034e4 <HAL_GPIO_Init+0x2e4>)
 8003398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033a2:	4a51      	ldr	r2, [pc, #324]	; (80034e8 <HAL_GPIO_Init+0x2e8>)
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	089b      	lsrs	r3, r3, #2
 80033a8:	3302      	adds	r3, #2
 80033aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	220f      	movs	r2, #15
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	43db      	mvns	r3, r3
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	4013      	ands	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a48      	ldr	r2, [pc, #288]	; (80034ec <HAL_GPIO_Init+0x2ec>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d019      	beq.n	8003402 <HAL_GPIO_Init+0x202>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a47      	ldr	r2, [pc, #284]	; (80034f0 <HAL_GPIO_Init+0x2f0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d013      	beq.n	80033fe <HAL_GPIO_Init+0x1fe>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a46      	ldr	r2, [pc, #280]	; (80034f4 <HAL_GPIO_Init+0x2f4>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d00d      	beq.n	80033fa <HAL_GPIO_Init+0x1fa>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a45      	ldr	r2, [pc, #276]	; (80034f8 <HAL_GPIO_Init+0x2f8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d007      	beq.n	80033f6 <HAL_GPIO_Init+0x1f6>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a44      	ldr	r2, [pc, #272]	; (80034fc <HAL_GPIO_Init+0x2fc>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d101      	bne.n	80033f2 <HAL_GPIO_Init+0x1f2>
 80033ee:	2304      	movs	r3, #4
 80033f0:	e008      	b.n	8003404 <HAL_GPIO_Init+0x204>
 80033f2:	2307      	movs	r3, #7
 80033f4:	e006      	b.n	8003404 <HAL_GPIO_Init+0x204>
 80033f6:	2303      	movs	r3, #3
 80033f8:	e004      	b.n	8003404 <HAL_GPIO_Init+0x204>
 80033fa:	2302      	movs	r3, #2
 80033fc:	e002      	b.n	8003404 <HAL_GPIO_Init+0x204>
 80033fe:	2301      	movs	r3, #1
 8003400:	e000      	b.n	8003404 <HAL_GPIO_Init+0x204>
 8003402:	2300      	movs	r3, #0
 8003404:	69fa      	ldr	r2, [r7, #28]
 8003406:	f002 0203 	and.w	r2, r2, #3
 800340a:	0092      	lsls	r2, r2, #2
 800340c:	4093      	lsls	r3, r2
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	4313      	orrs	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003414:	4934      	ldr	r1, [pc, #208]	; (80034e8 <HAL_GPIO_Init+0x2e8>)
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	089b      	lsrs	r3, r3, #2
 800341a:	3302      	adds	r3, #2
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003422:	4b37      	ldr	r3, [pc, #220]	; (8003500 <HAL_GPIO_Init+0x300>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	43db      	mvns	r3, r3
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	4013      	ands	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	4313      	orrs	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003446:	4a2e      	ldr	r2, [pc, #184]	; (8003500 <HAL_GPIO_Init+0x300>)
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800344c:	4b2c      	ldr	r3, [pc, #176]	; (8003500 <HAL_GPIO_Init+0x300>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	43db      	mvns	r3, r3
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4013      	ands	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	4313      	orrs	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003470:	4a23      	ldr	r2, [pc, #140]	; (8003500 <HAL_GPIO_Init+0x300>)
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003476:	4b22      	ldr	r3, [pc, #136]	; (8003500 <HAL_GPIO_Init+0x300>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	43db      	mvns	r3, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4013      	ands	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	4313      	orrs	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800349a:	4a19      	ldr	r2, [pc, #100]	; (8003500 <HAL_GPIO_Init+0x300>)
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034a0:	4b17      	ldr	r3, [pc, #92]	; (8003500 <HAL_GPIO_Init+0x300>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	43db      	mvns	r3, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4013      	ands	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034c4:	4a0e      	ldr	r2, [pc, #56]	; (8003500 <HAL_GPIO_Init+0x300>)
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	3301      	adds	r3, #1
 80034ce:	61fb      	str	r3, [r7, #28]
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	2b0f      	cmp	r3, #15
 80034d4:	f67f aea2 	bls.w	800321c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034d8:	bf00      	nop
 80034da:	3724      	adds	r7, #36	; 0x24
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	40023800 	.word	0x40023800
 80034e8:	40013800 	.word	0x40013800
 80034ec:	40020000 	.word	0x40020000
 80034f0:	40020400 	.word	0x40020400
 80034f4:	40020800 	.word	0x40020800
 80034f8:	40020c00 	.word	0x40020c00
 80034fc:	40021000 	.word	0x40021000
 8003500:	40013c00 	.word	0x40013c00

08003504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	807b      	strh	r3, [r7, #2]
 8003510:	4613      	mov	r3, r2
 8003512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003514:	787b      	ldrb	r3, [r7, #1]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800351a:	887a      	ldrh	r2, [r7, #2]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003520:	e003      	b.n	800352a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003522:	887b      	ldrh	r3, [r7, #2]
 8003524:	041a      	lsls	r2, r3, #16
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	619a      	str	r2, [r3, #24]
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	460b      	mov	r3, r1
 8003540:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695a      	ldr	r2, [r3, #20]
 8003546:	887b      	ldrh	r3, [r7, #2]
 8003548:	401a      	ands	r2, r3
 800354a:	887b      	ldrh	r3, [r7, #2]
 800354c:	429a      	cmp	r2, r3
 800354e:	d104      	bne.n	800355a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003550:	887b      	ldrh	r3, [r7, #2]
 8003552:	041a      	lsls	r2, r3, #16
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003558:	e002      	b.n	8003560 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800355a:	887a      	ldrh	r2, [r7, #2]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	619a      	str	r2, [r3, #24]
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003576:	4b08      	ldr	r3, [pc, #32]	; (8003598 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003578:	695a      	ldr	r2, [r3, #20]
 800357a:	88fb      	ldrh	r3, [r7, #6]
 800357c:	4013      	ands	r3, r2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d006      	beq.n	8003590 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003582:	4a05      	ldr	r2, [pc, #20]	; (8003598 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003584:	88fb      	ldrh	r3, [r7, #6]
 8003586:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003588:	88fb      	ldrh	r3, [r7, #6]
 800358a:	4618      	mov	r0, r3
 800358c:	f7fe fa62 	bl	8001a54 <HAL_GPIO_EXTI_Callback>
  }
}
 8003590:	bf00      	nop
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40013c00 	.word	0x40013c00

0800359c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e10f      	b.n	80037ce <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d106      	bne.n	80035c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff fa24 	bl	8002a10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2224      	movs	r2, #36	; 0x24
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0201 	bic.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035e0:	f001 f904 	bl	80047ec <HAL_RCC_GetPCLK1Freq>
 80035e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	4a7b      	ldr	r2, [pc, #492]	; (80037d8 <HAL_I2C_Init+0x23c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d807      	bhi.n	8003600 <HAL_I2C_Init+0x64>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4a7a      	ldr	r2, [pc, #488]	; (80037dc <HAL_I2C_Init+0x240>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	bf94      	ite	ls
 80035f8:	2301      	movls	r3, #1
 80035fa:	2300      	movhi	r3, #0
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	e006      	b.n	800360e <HAL_I2C_Init+0x72>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4a77      	ldr	r2, [pc, #476]	; (80037e0 <HAL_I2C_Init+0x244>)
 8003604:	4293      	cmp	r3, r2
 8003606:	bf94      	ite	ls
 8003608:	2301      	movls	r3, #1
 800360a:	2300      	movhi	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e0db      	b.n	80037ce <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	4a72      	ldr	r2, [pc, #456]	; (80037e4 <HAL_I2C_Init+0x248>)
 800361a:	fba2 2303 	umull	r2, r3, r2, r3
 800361e:	0c9b      	lsrs	r3, r3, #18
 8003620:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	430a      	orrs	r2, r1
 8003634:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	4a64      	ldr	r2, [pc, #400]	; (80037d8 <HAL_I2C_Init+0x23c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d802      	bhi.n	8003650 <HAL_I2C_Init+0xb4>
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	3301      	adds	r3, #1
 800364e:	e009      	b.n	8003664 <HAL_I2C_Init+0xc8>
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003656:	fb02 f303 	mul.w	r3, r2, r3
 800365a:	4a63      	ldr	r2, [pc, #396]	; (80037e8 <HAL_I2C_Init+0x24c>)
 800365c:	fba2 2303 	umull	r2, r3, r2, r3
 8003660:	099b      	lsrs	r3, r3, #6
 8003662:	3301      	adds	r3, #1
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6812      	ldr	r2, [r2, #0]
 8003668:	430b      	orrs	r3, r1
 800366a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003676:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	4956      	ldr	r1, [pc, #344]	; (80037d8 <HAL_I2C_Init+0x23c>)
 8003680:	428b      	cmp	r3, r1
 8003682:	d80d      	bhi.n	80036a0 <HAL_I2C_Init+0x104>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	1e59      	subs	r1, r3, #1
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003692:	3301      	adds	r3, #1
 8003694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003698:	2b04      	cmp	r3, #4
 800369a:	bf38      	it	cc
 800369c:	2304      	movcc	r3, #4
 800369e:	e04f      	b.n	8003740 <HAL_I2C_Init+0x1a4>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d111      	bne.n	80036cc <HAL_I2C_Init+0x130>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	1e58      	subs	r0, r3, #1
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6859      	ldr	r1, [r3, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	440b      	add	r3, r1
 80036b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ba:	3301      	adds	r3, #1
 80036bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	bf0c      	ite	eq
 80036c4:	2301      	moveq	r3, #1
 80036c6:	2300      	movne	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	e012      	b.n	80036f2 <HAL_I2C_Init+0x156>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	1e58      	subs	r0, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6859      	ldr	r1, [r3, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	0099      	lsls	r1, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	fbb0 f3f3 	udiv	r3, r0, r3
 80036e2:	3301      	adds	r3, #1
 80036e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	bf0c      	ite	eq
 80036ec:	2301      	moveq	r3, #1
 80036ee:	2300      	movne	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_I2C_Init+0x15e>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e022      	b.n	8003740 <HAL_I2C_Init+0x1a4>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10e      	bne.n	8003720 <HAL_I2C_Init+0x184>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1e58      	subs	r0, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6859      	ldr	r1, [r3, #4]
 800370a:	460b      	mov	r3, r1
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	440b      	add	r3, r1
 8003710:	fbb0 f3f3 	udiv	r3, r0, r3
 8003714:	3301      	adds	r3, #1
 8003716:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800371a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800371e:	e00f      	b.n	8003740 <HAL_I2C_Init+0x1a4>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	1e58      	subs	r0, r3, #1
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6859      	ldr	r1, [r3, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	0099      	lsls	r1, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	fbb0 f3f3 	udiv	r3, r0, r3
 8003736:	3301      	adds	r3, #1
 8003738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800373c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	6809      	ldr	r1, [r1, #0]
 8003744:	4313      	orrs	r3, r2
 8003746:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69da      	ldr	r2, [r3, #28]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800376e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6911      	ldr	r1, [r2, #16]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	68d2      	ldr	r2, [r2, #12]
 800377a:	4311      	orrs	r1, r2
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	430b      	orrs	r3, r1
 8003782:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	695a      	ldr	r2, [r3, #20]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2220      	movs	r2, #32
 80037ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	000186a0 	.word	0x000186a0
 80037dc:	001e847f 	.word	0x001e847f
 80037e0:	003d08ff 	.word	0x003d08ff
 80037e4:	431bde83 	.word	0x431bde83
 80037e8:	10624dd3 	.word	0x10624dd3

080037ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	607a      	str	r2, [r7, #4]
 80037f6:	461a      	mov	r2, r3
 80037f8:	460b      	mov	r3, r1
 80037fa:	817b      	strh	r3, [r7, #10]
 80037fc:	4613      	mov	r3, r2
 80037fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003800:	f7ff fb9c 	bl	8002f3c <HAL_GetTick>
 8003804:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b20      	cmp	r3, #32
 8003810:	f040 80e0 	bne.w	80039d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	2319      	movs	r3, #25
 800381a:	2201      	movs	r2, #1
 800381c:	4970      	ldr	r1, [pc, #448]	; (80039e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 fa7a 	bl	8003d18 <I2C_WaitOnFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800382a:	2302      	movs	r3, #2
 800382c:	e0d3      	b.n	80039d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_I2C_Master_Transmit+0x50>
 8003838:	2302      	movs	r3, #2
 800383a:	e0cc      	b.n	80039d6 <HAL_I2C_Master_Transmit+0x1ea>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b01      	cmp	r3, #1
 8003850:	d007      	beq.n	8003862 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f042 0201 	orr.w	r2, r2, #1
 8003860:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003870:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2221      	movs	r2, #33	; 0x21
 8003876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2210      	movs	r2, #16
 800387e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	893a      	ldrh	r2, [r7, #8]
 8003892:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003898:	b29a      	uxth	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4a50      	ldr	r2, [pc, #320]	; (80039e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80038a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038a4:	8979      	ldrh	r1, [r7, #10]
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	6a3a      	ldr	r2, [r7, #32]
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 f9be 	bl	8003c2c <I2C_MasterRequestWrite>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e08d      	b.n	80039d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ba:	2300      	movs	r3, #0
 80038bc:	613b      	str	r3, [r7, #16]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	613b      	str	r3, [r7, #16]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80038d0:	e066      	b.n	80039a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	6a39      	ldr	r1, [r7, #32]
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 faf4 	bl	8003ec4 <I2C_WaitOnTXEFlagUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00d      	beq.n	80038fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d107      	bne.n	80038fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e06b      	b.n	80039d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	781a      	ldrb	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003918:	b29b      	uxth	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003926:	3b01      	subs	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b04      	cmp	r3, #4
 800393a:	d11b      	bne.n	8003974 <HAL_I2C_Master_Transmit+0x188>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003940:	2b00      	cmp	r3, #0
 8003942:	d017      	beq.n	8003974 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	781a      	ldrb	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395e:	b29b      	uxth	r3, r3
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	6a39      	ldr	r1, [r7, #32]
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 fae4 	bl	8003f46 <I2C_WaitOnBTFFlagUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00d      	beq.n	80039a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	2b04      	cmp	r3, #4
 800398a:	d107      	bne.n	800399c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800399a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e01a      	b.n	80039d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d194      	bne.n	80038d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	e000      	b.n	80039d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80039d4:	2302      	movs	r3, #2
  }
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	00100002 	.word	0x00100002
 80039e4:	ffff0000 	.word	0xffff0000

080039e8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08a      	sub	sp, #40	; 0x28
 80039ec:	af02      	add	r7, sp, #8
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	607a      	str	r2, [r7, #4]
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	460b      	mov	r3, r1
 80039f6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80039f8:	f7ff faa0 	bl	8002f3c <HAL_GetTick>
 80039fc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80039fe:	2301      	movs	r3, #1
 8003a00:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b20      	cmp	r3, #32
 8003a0c:	f040 8105 	bne.w	8003c1a <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	2319      	movs	r3, #25
 8003a16:	2201      	movs	r2, #1
 8003a18:	4982      	ldr	r1, [pc, #520]	; (8003c24 <HAL_I2C_IsDeviceReady+0x23c>)
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 f97c 	bl	8003d18 <I2C_WaitOnFlagUntilTimeout>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003a26:	2302      	movs	r3, #2
 8003a28:	e0f8      	b.n	8003c1c <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d101      	bne.n	8003a38 <HAL_I2C_IsDeviceReady+0x50>
 8003a34:	2302      	movs	r3, #2
 8003a36:	e0f1      	b.n	8003c1c <HAL_I2C_IsDeviceReady+0x234>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d007      	beq.n	8003a5e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f042 0201 	orr.w	r2, r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2224      	movs	r2, #36	; 0x24
 8003a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4a6a      	ldr	r2, [pc, #424]	; (8003c28 <HAL_I2C_IsDeviceReady+0x240>)
 8003a80:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a90:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 f93a 	bl	8003d18 <I2C_WaitOnFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e0b6      	b.n	8003c1c <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003aae:	897b      	ldrh	r3, [r7, #10]
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003abc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003abe:	f7ff fa3d 	bl	8002f3c <HAL_GetTick>
 8003ac2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	bf0c      	ite	eq
 8003ad2:	2301      	moveq	r3, #1
 8003ad4:	2300      	movne	r3, #0
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae8:	bf0c      	ite	eq
 8003aea:	2301      	moveq	r3, #1
 8003aec:	2300      	movne	r3, #0
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003af2:	e025      	b.n	8003b40 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003af4:	f7ff fa22 	bl	8002f3c <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d302      	bcc.n	8003b0a <HAL_I2C_IsDeviceReady+0x122>
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d103      	bne.n	8003b12 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	22a0      	movs	r2, #160	; 0xa0
 8003b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	bf0c      	ite	eq
 8003b20:	2301      	moveq	r3, #1
 8003b22:	2300      	movne	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b36:	bf0c      	ite	eq
 8003b38:	2301      	moveq	r3, #1
 8003b3a:	2300      	movne	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2ba0      	cmp	r3, #160	; 0xa0
 8003b4a:	d005      	beq.n	8003b58 <HAL_I2C_IsDeviceReady+0x170>
 8003b4c:	7dfb      	ldrb	r3, [r7, #23]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d102      	bne.n	8003b58 <HAL_I2C_IsDeviceReady+0x170>
 8003b52:	7dbb      	ldrb	r3, [r7, #22]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0cd      	beq.n	8003af4 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d129      	bne.n	8003bc2 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b7c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b7e:	2300      	movs	r3, #0
 8003b80:	613b      	str	r3, [r7, #16]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	613b      	str	r3, [r7, #16]
 8003b92:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	2319      	movs	r3, #25
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	4921      	ldr	r1, [pc, #132]	; (8003c24 <HAL_I2C_IsDeviceReady+0x23c>)
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 f8ba 	bl	8003d18 <I2C_WaitOnFlagUntilTimeout>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e036      	b.n	8003c1c <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	e02c      	b.n	8003c1c <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bda:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	2319      	movs	r3, #25
 8003be2:	2201      	movs	r2, #1
 8003be4:	490f      	ldr	r1, [pc, #60]	; (8003c24 <HAL_I2C_IsDeviceReady+0x23c>)
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 f896 	bl	8003d18 <I2C_WaitOnFlagUntilTimeout>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e012      	b.n	8003c1c <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	f4ff af3e 	bcc.w	8003a82 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8003c1a:	2302      	movs	r3, #2
  }
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3720      	adds	r7, #32
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	00100002 	.word	0x00100002
 8003c28:	ffff0000 	.word	0xffff0000

08003c2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b088      	sub	sp, #32
 8003c30:	af02      	add	r7, sp, #8
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	607a      	str	r2, [r7, #4]
 8003c36:	603b      	str	r3, [r7, #0]
 8003c38:	460b      	mov	r3, r1
 8003c3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d006      	beq.n	8003c56 <I2C_MasterRequestWrite+0x2a>
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d003      	beq.n	8003c56 <I2C_MasterRequestWrite+0x2a>
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c54:	d108      	bne.n	8003c68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	e00b      	b.n	8003c80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6c:	2b12      	cmp	r3, #18
 8003c6e:	d107      	bne.n	8003c80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 f843 	bl	8003d18 <I2C_WaitOnFlagUntilTimeout>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e035      	b.n	8003d08 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ca4:	d108      	bne.n	8003cb8 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ca6:	897b      	ldrh	r3, [r7, #10]
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	461a      	mov	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cb4:	611a      	str	r2, [r3, #16]
 8003cb6:	e01b      	b.n	8003cf0 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003cb8:	897b      	ldrh	r3, [r7, #10]
 8003cba:	11db      	asrs	r3, r3, #7
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	f003 0306 	and.w	r3, r3, #6
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	f063 030f 	orn	r3, r3, #15
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	490e      	ldr	r1, [pc, #56]	; (8003d10 <I2C_MasterRequestWrite+0xe4>)
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 f875 	bl	8003dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e010      	b.n	8003d08 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ce6:	897b      	ldrh	r3, [r7, #10]
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	4907      	ldr	r1, [pc, #28]	; (8003d14 <I2C_MasterRequestWrite+0xe8>)
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f000 f865 	bl	8003dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	00010008 	.word	0x00010008
 8003d14:	00010002 	.word	0x00010002

08003d18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	603b      	str	r3, [r7, #0]
 8003d24:	4613      	mov	r3, r2
 8003d26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d28:	e025      	b.n	8003d76 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d30:	d021      	beq.n	8003d76 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d32:	f7ff f903 	bl	8002f3c <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d302      	bcc.n	8003d48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d116      	bne.n	8003d76 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2220      	movs	r2, #32
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	f043 0220 	orr.w	r2, r3, #32
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e023      	b.n	8003dbe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	0c1b      	lsrs	r3, r3, #16
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d10d      	bne.n	8003d9c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	43da      	mvns	r2, r3
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	bf0c      	ite	eq
 8003d92:	2301      	moveq	r3, #1
 8003d94:	2300      	movne	r3, #0
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	461a      	mov	r2, r3
 8003d9a:	e00c      	b.n	8003db6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	43da      	mvns	r2, r3
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	4013      	ands	r3, r2
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	bf0c      	ite	eq
 8003dae:	2301      	moveq	r3, #1
 8003db0:	2300      	movne	r3, #0
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	461a      	mov	r2, r3
 8003db6:	79fb      	ldrb	r3, [r7, #7]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d0b6      	beq.n	8003d2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b084      	sub	sp, #16
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	607a      	str	r2, [r7, #4]
 8003dd2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dd4:	e051      	b.n	8003e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de4:	d123      	bne.n	8003e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dfe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	f043 0204 	orr.w	r2, r3, #4
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e046      	b.n	8003ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e34:	d021      	beq.n	8003e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e36:	f7ff f881 	bl	8002f3c <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d302      	bcc.n	8003e4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d116      	bne.n	8003e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2220      	movs	r2, #32
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	f043 0220 	orr.w	r2, r3, #32
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e020      	b.n	8003ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	0c1b      	lsrs	r3, r3, #16
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d10c      	bne.n	8003e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	43da      	mvns	r2, r3
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	bf14      	ite	ne
 8003e96:	2301      	movne	r3, #1
 8003e98:	2300      	moveq	r3, #0
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	e00b      	b.n	8003eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	43da      	mvns	r2, r3
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	bf14      	ite	ne
 8003eb0:	2301      	movne	r3, #1
 8003eb2:	2300      	moveq	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d18d      	bne.n	8003dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ed0:	e02d      	b.n	8003f2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f000 f878 	bl	8003fc8 <I2C_IsAcknowledgeFailed>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e02d      	b.n	8003f3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee8:	d021      	beq.n	8003f2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eea:	f7ff f827 	bl	8002f3c <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d302      	bcc.n	8003f00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d116      	bne.n	8003f2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	f043 0220 	orr.w	r2, r3, #32
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e007      	b.n	8003f3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f38:	2b80      	cmp	r3, #128	; 0x80
 8003f3a:	d1ca      	bne.n	8003ed2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b084      	sub	sp, #16
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	60f8      	str	r0, [r7, #12]
 8003f4e:	60b9      	str	r1, [r7, #8]
 8003f50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f52:	e02d      	b.n	8003fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 f837 	bl	8003fc8 <I2C_IsAcknowledgeFailed>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e02d      	b.n	8003fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6a:	d021      	beq.n	8003fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f6c:	f7fe ffe6 	bl	8002f3c <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d302      	bcc.n	8003f82 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d116      	bne.n	8003fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	f043 0220 	orr.w	r2, r3, #32
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e007      	b.n	8003fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	f003 0304 	and.w	r3, r3, #4
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d1ca      	bne.n	8003f54 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fde:	d11b      	bne.n	8004018 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fe8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	f043 0204 	orr.w	r2, r3, #4
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e000      	b.n	800401a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
	...

08004028 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e22d      	b.n	8004496 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d075      	beq.n	8004132 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004046:	4ba3      	ldr	r3, [pc, #652]	; (80042d4 <HAL_RCC_OscConfig+0x2ac>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f003 030c 	and.w	r3, r3, #12
 800404e:	2b04      	cmp	r3, #4
 8004050:	d00c      	beq.n	800406c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004052:	4ba0      	ldr	r3, [pc, #640]	; (80042d4 <HAL_RCC_OscConfig+0x2ac>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800405a:	2b08      	cmp	r3, #8
 800405c:	d112      	bne.n	8004084 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800405e:	4b9d      	ldr	r3, [pc, #628]	; (80042d4 <HAL_RCC_OscConfig+0x2ac>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004066:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800406a:	d10b      	bne.n	8004084 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800406c:	4b99      	ldr	r3, [pc, #612]	; (80042d4 <HAL_RCC_OscConfig+0x2ac>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d05b      	beq.n	8004130 <HAL_RCC_OscConfig+0x108>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d157      	bne.n	8004130 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e208      	b.n	8004496 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800408c:	d106      	bne.n	800409c <HAL_RCC_OscConfig+0x74>
 800408e:	4b91      	ldr	r3, [pc, #580]	; (80042d4 <HAL_RCC_OscConfig+0x2ac>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a90      	ldr	r2, [pc, #576]	; (80042d4 <HAL_RCC_OscConfig+0x2ac>)
 8004094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004098:	6013      	str	r3, [r2, #0]
 800409a:	e01d      	b.n	80040d8 <HAL_RCC_OscConfig+0xb0>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040a4:	d10c      	bne.n	80040c0 <HAL_RCC_OscConfig+0x98>
 80040a6:	4b8b      	ldr	r3, [pc, #556]	; (80042d4 <HAL_RCC_OscConfig+0x2ac>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a8a      	ldr	r2, [pc, #552]	; (80042d4 <HAL_RCC_OscConfig+0x2ac>)
 80040ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	4b88      	ldr	r3, [pc, #544]	; (80042d4 <HAL_RCC_OscConfig+0x2ac>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a87      	ldr	r2, [pc, #540]	; (80042d4 <HAL_RCC_OscConfig+0x2ac>)
 80040b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	e00b      	b.n	80040d8 <HAL_RCC_OscConfig+0xb0>
 80040c0:	4b84      	ldr	r3, [pc, #528]	; (80042d4 <HAL_RCC_OscConfig+0x2ac>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a83      	ldr	r2, [pc, #524]	; (80042d4 <HAL_RCC_OscConfig+0x2ac>)
 80040c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ca:	6013      	str	r3, [r2, #0]
 80040cc:	4b81      	ldr	r3, [pc, #516]	; (80042d4 <HAL_RCC_OscConfig+0x2ac>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a80      	ldr	r2, [pc, #512]	; (80042d4 <HAL_RCC_OscConfig+0x2ac>)
 80040d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d013      	beq.n	8004108 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e0:	f7fe ff2c 	bl	8002f3c <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040e8:	f7fe ff28 	bl	8002f3c <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b64      	cmp	r3, #100	; 0x64
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e1cd      	b.n	8004496 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040fa:	4b76      	ldr	r3, [pc, #472]	; (80042d4 <HAL_RCC_OscConfig+0x2ac>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0f0      	beq.n	80040e8 <HAL_RCC_OscConfig+0xc0>
 8004106:	e014      	b.n	8004132 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004108:	f7fe ff18 	bl	8002f3c <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004110:	f7fe ff14 	bl	8002f3c <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b64      	cmp	r3, #100	; 0x64
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e1b9      	b.n	8004496 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004122:	4b6c      	ldr	r3, [pc, #432]	; (80042d4 <HAL_RCC_OscConfig+0x2ac>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1f0      	bne.n	8004110 <HAL_RCC_OscConfig+0xe8>
 800412e:	e000      	b.n	8004132 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d063      	beq.n	8004206 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800413e:	4b65      	ldr	r3, [pc, #404]	; (80042d4 <HAL_RCC_OscConfig+0x2ac>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 030c 	and.w	r3, r3, #12
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00b      	beq.n	8004162 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800414a:	4b62      	ldr	r3, [pc, #392]	; (80042d4 <HAL_RCC_OscConfig+0x2ac>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004152:	2b08      	cmp	r3, #8
 8004154:	d11c      	bne.n	8004190 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004156:	4b5f      	ldr	r3, [pc, #380]	; (80042d4 <HAL_RCC_OscConfig+0x2ac>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d116      	bne.n	8004190 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004162:	4b5c      	ldr	r3, [pc, #368]	; (80042d4 <HAL_RCC_OscConfig+0x2ac>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d005      	beq.n	800417a <HAL_RCC_OscConfig+0x152>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d001      	beq.n	800417a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e18d      	b.n	8004496 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800417a:	4b56      	ldr	r3, [pc, #344]	; (80042d4 <HAL_RCC_OscConfig+0x2ac>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	4952      	ldr	r1, [pc, #328]	; (80042d4 <HAL_RCC_OscConfig+0x2ac>)
 800418a:	4313      	orrs	r3, r2
 800418c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800418e:	e03a      	b.n	8004206 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d020      	beq.n	80041da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004198:	4b4f      	ldr	r3, [pc, #316]	; (80042d8 <HAL_RCC_OscConfig+0x2b0>)
 800419a:	2201      	movs	r2, #1
 800419c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419e:	f7fe fecd 	bl	8002f3c <HAL_GetTick>
 80041a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a4:	e008      	b.n	80041b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041a6:	f7fe fec9 	bl	8002f3c <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d901      	bls.n	80041b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e16e      	b.n	8004496 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b8:	4b46      	ldr	r3, [pc, #280]	; (80042d4 <HAL_RCC_OscConfig+0x2ac>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d0f0      	beq.n	80041a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c4:	4b43      	ldr	r3, [pc, #268]	; (80042d4 <HAL_RCC_OscConfig+0x2ac>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	4940      	ldr	r1, [pc, #256]	; (80042d4 <HAL_RCC_OscConfig+0x2ac>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	600b      	str	r3, [r1, #0]
 80041d8:	e015      	b.n	8004206 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041da:	4b3f      	ldr	r3, [pc, #252]	; (80042d8 <HAL_RCC_OscConfig+0x2b0>)
 80041dc:	2200      	movs	r2, #0
 80041de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e0:	f7fe feac 	bl	8002f3c <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041e8:	f7fe fea8 	bl	8002f3c <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e14d      	b.n	8004496 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041fa:	4b36      	ldr	r3, [pc, #216]	; (80042d4 <HAL_RCC_OscConfig+0x2ac>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1f0      	bne.n	80041e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	2b00      	cmp	r3, #0
 8004210:	d030      	beq.n	8004274 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d016      	beq.n	8004248 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800421a:	4b30      	ldr	r3, [pc, #192]	; (80042dc <HAL_RCC_OscConfig+0x2b4>)
 800421c:	2201      	movs	r2, #1
 800421e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004220:	f7fe fe8c 	bl	8002f3c <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004228:	f7fe fe88 	bl	8002f3c <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e12d      	b.n	8004496 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800423a:	4b26      	ldr	r3, [pc, #152]	; (80042d4 <HAL_RCC_OscConfig+0x2ac>)
 800423c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0f0      	beq.n	8004228 <HAL_RCC_OscConfig+0x200>
 8004246:	e015      	b.n	8004274 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004248:	4b24      	ldr	r3, [pc, #144]	; (80042dc <HAL_RCC_OscConfig+0x2b4>)
 800424a:	2200      	movs	r2, #0
 800424c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800424e:	f7fe fe75 	bl	8002f3c <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004254:	e008      	b.n	8004268 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004256:	f7fe fe71 	bl	8002f3c <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e116      	b.n	8004496 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004268:	4b1a      	ldr	r3, [pc, #104]	; (80042d4 <HAL_RCC_OscConfig+0x2ac>)
 800426a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1f0      	bne.n	8004256 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 80a0 	beq.w	80043c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004282:	2300      	movs	r3, #0
 8004284:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004286:	4b13      	ldr	r3, [pc, #76]	; (80042d4 <HAL_RCC_OscConfig+0x2ac>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10f      	bne.n	80042b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004292:	2300      	movs	r3, #0
 8004294:	60fb      	str	r3, [r7, #12]
 8004296:	4b0f      	ldr	r3, [pc, #60]	; (80042d4 <HAL_RCC_OscConfig+0x2ac>)
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	4a0e      	ldr	r2, [pc, #56]	; (80042d4 <HAL_RCC_OscConfig+0x2ac>)
 800429c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a0:	6413      	str	r3, [r2, #64]	; 0x40
 80042a2:	4b0c      	ldr	r3, [pc, #48]	; (80042d4 <HAL_RCC_OscConfig+0x2ac>)
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042aa:	60fb      	str	r3, [r7, #12]
 80042ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80042ae:	2301      	movs	r3, #1
 80042b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b2:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <HAL_RCC_OscConfig+0x2b8>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d121      	bne.n	8004302 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042be:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <HAL_RCC_OscConfig+0x2b8>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a07      	ldr	r2, [pc, #28]	; (80042e0 <HAL_RCC_OscConfig+0x2b8>)
 80042c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042ca:	f7fe fe37 	bl	8002f3c <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d0:	e011      	b.n	80042f6 <HAL_RCC_OscConfig+0x2ce>
 80042d2:	bf00      	nop
 80042d4:	40023800 	.word	0x40023800
 80042d8:	42470000 	.word	0x42470000
 80042dc:	42470e80 	.word	0x42470e80
 80042e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042e4:	f7fe fe2a 	bl	8002f3c <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e0cf      	b.n	8004496 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f6:	4b6a      	ldr	r3, [pc, #424]	; (80044a0 <HAL_RCC_OscConfig+0x478>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0f0      	beq.n	80042e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d106      	bne.n	8004318 <HAL_RCC_OscConfig+0x2f0>
 800430a:	4b66      	ldr	r3, [pc, #408]	; (80044a4 <HAL_RCC_OscConfig+0x47c>)
 800430c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430e:	4a65      	ldr	r2, [pc, #404]	; (80044a4 <HAL_RCC_OscConfig+0x47c>)
 8004310:	f043 0301 	orr.w	r3, r3, #1
 8004314:	6713      	str	r3, [r2, #112]	; 0x70
 8004316:	e01c      	b.n	8004352 <HAL_RCC_OscConfig+0x32a>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	2b05      	cmp	r3, #5
 800431e:	d10c      	bne.n	800433a <HAL_RCC_OscConfig+0x312>
 8004320:	4b60      	ldr	r3, [pc, #384]	; (80044a4 <HAL_RCC_OscConfig+0x47c>)
 8004322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004324:	4a5f      	ldr	r2, [pc, #380]	; (80044a4 <HAL_RCC_OscConfig+0x47c>)
 8004326:	f043 0304 	orr.w	r3, r3, #4
 800432a:	6713      	str	r3, [r2, #112]	; 0x70
 800432c:	4b5d      	ldr	r3, [pc, #372]	; (80044a4 <HAL_RCC_OscConfig+0x47c>)
 800432e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004330:	4a5c      	ldr	r2, [pc, #368]	; (80044a4 <HAL_RCC_OscConfig+0x47c>)
 8004332:	f043 0301 	orr.w	r3, r3, #1
 8004336:	6713      	str	r3, [r2, #112]	; 0x70
 8004338:	e00b      	b.n	8004352 <HAL_RCC_OscConfig+0x32a>
 800433a:	4b5a      	ldr	r3, [pc, #360]	; (80044a4 <HAL_RCC_OscConfig+0x47c>)
 800433c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433e:	4a59      	ldr	r2, [pc, #356]	; (80044a4 <HAL_RCC_OscConfig+0x47c>)
 8004340:	f023 0301 	bic.w	r3, r3, #1
 8004344:	6713      	str	r3, [r2, #112]	; 0x70
 8004346:	4b57      	ldr	r3, [pc, #348]	; (80044a4 <HAL_RCC_OscConfig+0x47c>)
 8004348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434a:	4a56      	ldr	r2, [pc, #344]	; (80044a4 <HAL_RCC_OscConfig+0x47c>)
 800434c:	f023 0304 	bic.w	r3, r3, #4
 8004350:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d015      	beq.n	8004386 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800435a:	f7fe fdef 	bl	8002f3c <HAL_GetTick>
 800435e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004360:	e00a      	b.n	8004378 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004362:	f7fe fdeb 	bl	8002f3c <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004370:	4293      	cmp	r3, r2
 8004372:	d901      	bls.n	8004378 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e08e      	b.n	8004496 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004378:	4b4a      	ldr	r3, [pc, #296]	; (80044a4 <HAL_RCC_OscConfig+0x47c>)
 800437a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0ee      	beq.n	8004362 <HAL_RCC_OscConfig+0x33a>
 8004384:	e014      	b.n	80043b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004386:	f7fe fdd9 	bl	8002f3c <HAL_GetTick>
 800438a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800438c:	e00a      	b.n	80043a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800438e:	f7fe fdd5 	bl	8002f3c <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	f241 3288 	movw	r2, #5000	; 0x1388
 800439c:	4293      	cmp	r3, r2
 800439e:	d901      	bls.n	80043a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e078      	b.n	8004496 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043a4:	4b3f      	ldr	r3, [pc, #252]	; (80044a4 <HAL_RCC_OscConfig+0x47c>)
 80043a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1ee      	bne.n	800438e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043b0:	7dfb      	ldrb	r3, [r7, #23]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d105      	bne.n	80043c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043b6:	4b3b      	ldr	r3, [pc, #236]	; (80044a4 <HAL_RCC_OscConfig+0x47c>)
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	4a3a      	ldr	r2, [pc, #232]	; (80044a4 <HAL_RCC_OscConfig+0x47c>)
 80043bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d064      	beq.n	8004494 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043ca:	4b36      	ldr	r3, [pc, #216]	; (80044a4 <HAL_RCC_OscConfig+0x47c>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 030c 	and.w	r3, r3, #12
 80043d2:	2b08      	cmp	r3, #8
 80043d4:	d05c      	beq.n	8004490 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d141      	bne.n	8004462 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043de:	4b32      	ldr	r3, [pc, #200]	; (80044a8 <HAL_RCC_OscConfig+0x480>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e4:	f7fe fdaa 	bl	8002f3c <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043ec:	f7fe fda6 	bl	8002f3c <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e04b      	b.n	8004496 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043fe:	4b29      	ldr	r3, [pc, #164]	; (80044a4 <HAL_RCC_OscConfig+0x47c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1f0      	bne.n	80043ec <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69da      	ldr	r2, [r3, #28]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	431a      	orrs	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	019b      	lsls	r3, r3, #6
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004420:	085b      	lsrs	r3, r3, #1
 8004422:	3b01      	subs	r3, #1
 8004424:	041b      	lsls	r3, r3, #16
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442c:	061b      	lsls	r3, r3, #24
 800442e:	491d      	ldr	r1, [pc, #116]	; (80044a4 <HAL_RCC_OscConfig+0x47c>)
 8004430:	4313      	orrs	r3, r2
 8004432:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004434:	4b1c      	ldr	r3, [pc, #112]	; (80044a8 <HAL_RCC_OscConfig+0x480>)
 8004436:	2201      	movs	r2, #1
 8004438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443a:	f7fe fd7f 	bl	8002f3c <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004442:	f7fe fd7b 	bl	8002f3c <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e020      	b.n	8004496 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004454:	4b13      	ldr	r3, [pc, #76]	; (80044a4 <HAL_RCC_OscConfig+0x47c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0f0      	beq.n	8004442 <HAL_RCC_OscConfig+0x41a>
 8004460:	e018      	b.n	8004494 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004462:	4b11      	ldr	r3, [pc, #68]	; (80044a8 <HAL_RCC_OscConfig+0x480>)
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004468:	f7fe fd68 	bl	8002f3c <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004470:	f7fe fd64 	bl	8002f3c <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e009      	b.n	8004496 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004482:	4b08      	ldr	r3, [pc, #32]	; (80044a4 <HAL_RCC_OscConfig+0x47c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1f0      	bne.n	8004470 <HAL_RCC_OscConfig+0x448>
 800448e:	e001      	b.n	8004494 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e000      	b.n	8004496 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	40007000 	.word	0x40007000
 80044a4:	40023800 	.word	0x40023800
 80044a8:	42470060 	.word	0x42470060

080044ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e0ca      	b.n	8004656 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044c0:	4b67      	ldr	r3, [pc, #412]	; (8004660 <HAL_RCC_ClockConfig+0x1b4>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 030f 	and.w	r3, r3, #15
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d90c      	bls.n	80044e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ce:	4b64      	ldr	r3, [pc, #400]	; (8004660 <HAL_RCC_ClockConfig+0x1b4>)
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	b2d2      	uxtb	r2, r2
 80044d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d6:	4b62      	ldr	r3, [pc, #392]	; (8004660 <HAL_RCC_ClockConfig+0x1b4>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d001      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e0b6      	b.n	8004656 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d020      	beq.n	8004536 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d005      	beq.n	800450c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004500:	4b58      	ldr	r3, [pc, #352]	; (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	4a57      	ldr	r2, [pc, #348]	; (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 8004506:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800450a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0308 	and.w	r3, r3, #8
 8004514:	2b00      	cmp	r3, #0
 8004516:	d005      	beq.n	8004524 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004518:	4b52      	ldr	r3, [pc, #328]	; (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	4a51      	ldr	r2, [pc, #324]	; (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 800451e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004522:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004524:	4b4f      	ldr	r3, [pc, #316]	; (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	494c      	ldr	r1, [pc, #304]	; (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 8004532:	4313      	orrs	r3, r2
 8004534:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d044      	beq.n	80045cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d107      	bne.n	800455a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454a:	4b46      	ldr	r3, [pc, #280]	; (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d119      	bne.n	800458a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e07d      	b.n	8004656 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2b02      	cmp	r3, #2
 8004560:	d003      	beq.n	800456a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004566:	2b03      	cmp	r3, #3
 8004568:	d107      	bne.n	800457a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800456a:	4b3e      	ldr	r3, [pc, #248]	; (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d109      	bne.n	800458a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e06d      	b.n	8004656 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800457a:	4b3a      	ldr	r3, [pc, #232]	; (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e065      	b.n	8004656 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800458a:	4b36      	ldr	r3, [pc, #216]	; (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f023 0203 	bic.w	r2, r3, #3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	4933      	ldr	r1, [pc, #204]	; (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 8004598:	4313      	orrs	r3, r2
 800459a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800459c:	f7fe fcce 	bl	8002f3c <HAL_GetTick>
 80045a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045a2:	e00a      	b.n	80045ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045a4:	f7fe fcca 	bl	8002f3c <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e04d      	b.n	8004656 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ba:	4b2a      	ldr	r3, [pc, #168]	; (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 020c 	and.w	r2, r3, #12
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d1eb      	bne.n	80045a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045cc:	4b24      	ldr	r3, [pc, #144]	; (8004660 <HAL_RCC_ClockConfig+0x1b4>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 030f 	and.w	r3, r3, #15
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d20c      	bcs.n	80045f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045da:	4b21      	ldr	r3, [pc, #132]	; (8004660 <HAL_RCC_ClockConfig+0x1b4>)
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e2:	4b1f      	ldr	r3, [pc, #124]	; (8004660 <HAL_RCC_ClockConfig+0x1b4>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d001      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e030      	b.n	8004656 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d008      	beq.n	8004612 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004600:	4b18      	ldr	r3, [pc, #96]	; (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	4915      	ldr	r1, [pc, #84]	; (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 800460e:	4313      	orrs	r3, r2
 8004610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b00      	cmp	r3, #0
 800461c:	d009      	beq.n	8004632 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800461e:	4b11      	ldr	r3, [pc, #68]	; (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	490d      	ldr	r1, [pc, #52]	; (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 800462e:	4313      	orrs	r3, r2
 8004630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004632:	f000 f81d 	bl	8004670 <HAL_RCC_GetSysClockFreq>
 8004636:	4601      	mov	r1, r0
 8004638:	4b0a      	ldr	r3, [pc, #40]	; (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	091b      	lsrs	r3, r3, #4
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	4a09      	ldr	r2, [pc, #36]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 8004644:	5cd3      	ldrb	r3, [r2, r3]
 8004646:	fa21 f303 	lsr.w	r3, r1, r3
 800464a:	4a08      	ldr	r2, [pc, #32]	; (800466c <HAL_RCC_ClockConfig+0x1c0>)
 800464c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800464e:	2000      	movs	r0, #0
 8004650:	f7fe fc30 	bl	8002eb4 <HAL_InitTick>

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	40023c00 	.word	0x40023c00
 8004664:	40023800 	.word	0x40023800
 8004668:	0800c9cc 	.word	0x0800c9cc
 800466c:	2000001c 	.word	0x2000001c

08004670 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004676:	2300      	movs	r3, #0
 8004678:	607b      	str	r3, [r7, #4]
 800467a:	2300      	movs	r3, #0
 800467c:	60fb      	str	r3, [r7, #12]
 800467e:	2300      	movs	r3, #0
 8004680:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004682:	2300      	movs	r3, #0
 8004684:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004686:	4b50      	ldr	r3, [pc, #320]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 030c 	and.w	r3, r3, #12
 800468e:	2b04      	cmp	r3, #4
 8004690:	d007      	beq.n	80046a2 <HAL_RCC_GetSysClockFreq+0x32>
 8004692:	2b08      	cmp	r3, #8
 8004694:	d008      	beq.n	80046a8 <HAL_RCC_GetSysClockFreq+0x38>
 8004696:	2b00      	cmp	r3, #0
 8004698:	f040 808d 	bne.w	80047b6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800469c:	4b4b      	ldr	r3, [pc, #300]	; (80047cc <HAL_RCC_GetSysClockFreq+0x15c>)
 800469e:	60bb      	str	r3, [r7, #8]
       break;
 80046a0:	e08c      	b.n	80047bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046a2:	4b4b      	ldr	r3, [pc, #300]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80046a4:	60bb      	str	r3, [r7, #8]
      break;
 80046a6:	e089      	b.n	80047bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046a8:	4b47      	ldr	r3, [pc, #284]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046b2:	4b45      	ldr	r3, [pc, #276]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d023      	beq.n	8004706 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046be:	4b42      	ldr	r3, [pc, #264]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	099b      	lsrs	r3, r3, #6
 80046c4:	f04f 0400 	mov.w	r4, #0
 80046c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80046cc:	f04f 0200 	mov.w	r2, #0
 80046d0:	ea03 0501 	and.w	r5, r3, r1
 80046d4:	ea04 0602 	and.w	r6, r4, r2
 80046d8:	4a3d      	ldr	r2, [pc, #244]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80046da:	fb02 f106 	mul.w	r1, r2, r6
 80046de:	2200      	movs	r2, #0
 80046e0:	fb02 f205 	mul.w	r2, r2, r5
 80046e4:	440a      	add	r2, r1
 80046e6:	493a      	ldr	r1, [pc, #232]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80046e8:	fba5 0101 	umull	r0, r1, r5, r1
 80046ec:	1853      	adds	r3, r2, r1
 80046ee:	4619      	mov	r1, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f04f 0400 	mov.w	r4, #0
 80046f6:	461a      	mov	r2, r3
 80046f8:	4623      	mov	r3, r4
 80046fa:	f7fc facd 	bl	8000c98 <__aeabi_uldivmod>
 80046fe:	4603      	mov	r3, r0
 8004700:	460c      	mov	r4, r1
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	e049      	b.n	800479a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004706:	4b30      	ldr	r3, [pc, #192]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	099b      	lsrs	r3, r3, #6
 800470c:	f04f 0400 	mov.w	r4, #0
 8004710:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004714:	f04f 0200 	mov.w	r2, #0
 8004718:	ea03 0501 	and.w	r5, r3, r1
 800471c:	ea04 0602 	and.w	r6, r4, r2
 8004720:	4629      	mov	r1, r5
 8004722:	4632      	mov	r2, r6
 8004724:	f04f 0300 	mov.w	r3, #0
 8004728:	f04f 0400 	mov.w	r4, #0
 800472c:	0154      	lsls	r4, r2, #5
 800472e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004732:	014b      	lsls	r3, r1, #5
 8004734:	4619      	mov	r1, r3
 8004736:	4622      	mov	r2, r4
 8004738:	1b49      	subs	r1, r1, r5
 800473a:	eb62 0206 	sbc.w	r2, r2, r6
 800473e:	f04f 0300 	mov.w	r3, #0
 8004742:	f04f 0400 	mov.w	r4, #0
 8004746:	0194      	lsls	r4, r2, #6
 8004748:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800474c:	018b      	lsls	r3, r1, #6
 800474e:	1a5b      	subs	r3, r3, r1
 8004750:	eb64 0402 	sbc.w	r4, r4, r2
 8004754:	f04f 0100 	mov.w	r1, #0
 8004758:	f04f 0200 	mov.w	r2, #0
 800475c:	00e2      	lsls	r2, r4, #3
 800475e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004762:	00d9      	lsls	r1, r3, #3
 8004764:	460b      	mov	r3, r1
 8004766:	4614      	mov	r4, r2
 8004768:	195b      	adds	r3, r3, r5
 800476a:	eb44 0406 	adc.w	r4, r4, r6
 800476e:	f04f 0100 	mov.w	r1, #0
 8004772:	f04f 0200 	mov.w	r2, #0
 8004776:	02a2      	lsls	r2, r4, #10
 8004778:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800477c:	0299      	lsls	r1, r3, #10
 800477e:	460b      	mov	r3, r1
 8004780:	4614      	mov	r4, r2
 8004782:	4618      	mov	r0, r3
 8004784:	4621      	mov	r1, r4
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f04f 0400 	mov.w	r4, #0
 800478c:	461a      	mov	r2, r3
 800478e:	4623      	mov	r3, r4
 8004790:	f7fc fa82 	bl	8000c98 <__aeabi_uldivmod>
 8004794:	4603      	mov	r3, r0
 8004796:	460c      	mov	r4, r1
 8004798:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800479a:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x158>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	0c1b      	lsrs	r3, r3, #16
 80047a0:	f003 0303 	and.w	r3, r3, #3
 80047a4:	3301      	adds	r3, #1
 80047a6:	005b      	lsls	r3, r3, #1
 80047a8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b2:	60bb      	str	r3, [r7, #8]
      break;
 80047b4:	e002      	b.n	80047bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047b6:	4b05      	ldr	r3, [pc, #20]	; (80047cc <HAL_RCC_GetSysClockFreq+0x15c>)
 80047b8:	60bb      	str	r3, [r7, #8]
      break;
 80047ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047bc:	68bb      	ldr	r3, [r7, #8]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3714      	adds	r7, #20
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40023800 	.word	0x40023800
 80047cc:	00f42400 	.word	0x00f42400
 80047d0:	017d7840 	.word	0x017d7840

080047d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047d8:	4b03      	ldr	r3, [pc, #12]	; (80047e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80047da:	681b      	ldr	r3, [r3, #0]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	2000001c 	.word	0x2000001c

080047ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047f0:	f7ff fff0 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 80047f4:	4601      	mov	r1, r0
 80047f6:	4b05      	ldr	r3, [pc, #20]	; (800480c <HAL_RCC_GetPCLK1Freq+0x20>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	0a9b      	lsrs	r3, r3, #10
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	4a03      	ldr	r2, [pc, #12]	; (8004810 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004802:	5cd3      	ldrb	r3, [r2, r3]
 8004804:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004808:	4618      	mov	r0, r3
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40023800 	.word	0x40023800
 8004810:	0800c9dc 	.word	0x0800c9dc

08004814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004818:	f7ff ffdc 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 800481c:	4601      	mov	r1, r0
 800481e:	4b05      	ldr	r3, [pc, #20]	; (8004834 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	0b5b      	lsrs	r3, r3, #13
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	4a03      	ldr	r2, [pc, #12]	; (8004838 <HAL_RCC_GetPCLK2Freq+0x24>)
 800482a:	5cd3      	ldrb	r3, [r2, r3]
 800482c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004830:	4618      	mov	r0, r3
 8004832:	bd80      	pop	{r7, pc}
 8004834:	40023800 	.word	0x40023800
 8004838:	0800c9dc 	.word	0x0800c9dc

0800483c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e056      	b.n	80048fc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	d106      	bne.n	800486e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7fe f919 	bl	8002aa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2202      	movs	r2, #2
 8004872:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004884:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	431a      	orrs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	431a      	orrs	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	431a      	orrs	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	ea42 0103 	orr.w	r1, r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	0c1b      	lsrs	r3, r3, #16
 80048cc:	f003 0104 	and.w	r1, r3, #4
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	69da      	ldr	r2, [r3, #28]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e01d      	b.n	8004952 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d106      	bne.n	8004930 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7fe f900 	bl	8002b30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3304      	adds	r3, #4
 8004940:	4619      	mov	r1, r3
 8004942:	4610      	mov	r0, r2
 8004944:	f000 f988 	bl	8004c58 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800495a:	b480      	push	{r7}
 800495c:	b085      	sub	sp, #20
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68da      	ldr	r2, [r3, #12]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f042 0201 	orr.w	r2, r2, #1
 8004970:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f003 0307 	and.w	r3, r3, #7
 800497c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2b06      	cmp	r3, #6
 8004982:	d007      	beq.n	8004994 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0201 	orr.w	r2, r2, #1
 8004992:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0201 	bic.w	r2, r2, #1
 80049b8:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6a1a      	ldr	r2, [r3, #32]
 80049c0:	f241 1311 	movw	r3, #4369	; 0x1111
 80049c4:	4013      	ands	r3, r2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10f      	bne.n	80049ea <HAL_TIM_Base_Stop_IT+0x48>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6a1a      	ldr	r2, [r3, #32]
 80049d0:	f240 4344 	movw	r3, #1092	; 0x444
 80049d4:	4013      	ands	r3, r2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d107      	bne.n	80049ea <HAL_TIM_Base_Stop_IT+0x48>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 0201 	bic.w	r2, r2, #1
 80049e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d122      	bne.n	8004a54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d11b      	bne.n	8004a54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f06f 0202 	mvn.w	r2, #2
 8004a24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	f003 0303 	and.w	r3, r3, #3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f8ee 	bl	8004c1c <HAL_TIM_IC_CaptureCallback>
 8004a40:	e005      	b.n	8004a4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f8e0 	bl	8004c08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 f8f1 	bl	8004c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	f003 0304 	and.w	r3, r3, #4
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d122      	bne.n	8004aa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b04      	cmp	r3, #4
 8004a6e:	d11b      	bne.n	8004aa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f06f 0204 	mvn.w	r2, #4
 8004a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f8c4 	bl	8004c1c <HAL_TIM_IC_CaptureCallback>
 8004a94:	e005      	b.n	8004aa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f8b6 	bl	8004c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f8c7 	bl	8004c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	f003 0308 	and.w	r3, r3, #8
 8004ab2:	2b08      	cmp	r3, #8
 8004ab4:	d122      	bne.n	8004afc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	f003 0308 	and.w	r3, r3, #8
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	d11b      	bne.n	8004afc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f06f 0208 	mvn.w	r2, #8
 8004acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2204      	movs	r2, #4
 8004ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	f003 0303 	and.w	r3, r3, #3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f89a 	bl	8004c1c <HAL_TIM_IC_CaptureCallback>
 8004ae8:	e005      	b.n	8004af6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f88c 	bl	8004c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 f89d 	bl	8004c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	f003 0310 	and.w	r3, r3, #16
 8004b06:	2b10      	cmp	r3, #16
 8004b08:	d122      	bne.n	8004b50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f003 0310 	and.w	r3, r3, #16
 8004b14:	2b10      	cmp	r3, #16
 8004b16:	d11b      	bne.n	8004b50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f06f 0210 	mvn.w	r2, #16
 8004b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2208      	movs	r2, #8
 8004b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f870 	bl	8004c1c <HAL_TIM_IC_CaptureCallback>
 8004b3c:	e005      	b.n	8004b4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f862 	bl	8004c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 f873 	bl	8004c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d10e      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d107      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f06f 0201 	mvn.w	r2, #1
 8004b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7fc ffa6 	bl	8001ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b86:	2b80      	cmp	r3, #128	; 0x80
 8004b88:	d10e      	bne.n	8004ba8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b94:	2b80      	cmp	r3, #128	; 0x80
 8004b96:	d107      	bne.n	8004ba8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f8e2 	bl	8004d6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb2:	2b40      	cmp	r3, #64	; 0x40
 8004bb4:	d10e      	bne.n	8004bd4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc0:	2b40      	cmp	r3, #64	; 0x40
 8004bc2:	d107      	bne.n	8004bd4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f838 	bl	8004c44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	f003 0320 	and.w	r3, r3, #32
 8004bde:	2b20      	cmp	r3, #32
 8004be0:	d10e      	bne.n	8004c00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f003 0320 	and.w	r3, r3, #32
 8004bec:	2b20      	cmp	r3, #32
 8004bee:	d107      	bne.n	8004c00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f06f 0220 	mvn.w	r2, #32
 8004bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f8ac 	bl	8004d58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c00:	bf00      	nop
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a34      	ldr	r2, [pc, #208]	; (8004d3c <TIM_Base_SetConfig+0xe4>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d00f      	beq.n	8004c90 <TIM_Base_SetConfig+0x38>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c76:	d00b      	beq.n	8004c90 <TIM_Base_SetConfig+0x38>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a31      	ldr	r2, [pc, #196]	; (8004d40 <TIM_Base_SetConfig+0xe8>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d007      	beq.n	8004c90 <TIM_Base_SetConfig+0x38>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a30      	ldr	r2, [pc, #192]	; (8004d44 <TIM_Base_SetConfig+0xec>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d003      	beq.n	8004c90 <TIM_Base_SetConfig+0x38>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a2f      	ldr	r2, [pc, #188]	; (8004d48 <TIM_Base_SetConfig+0xf0>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d108      	bne.n	8004ca2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a25      	ldr	r2, [pc, #148]	; (8004d3c <TIM_Base_SetConfig+0xe4>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d01b      	beq.n	8004ce2 <TIM_Base_SetConfig+0x8a>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb0:	d017      	beq.n	8004ce2 <TIM_Base_SetConfig+0x8a>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a22      	ldr	r2, [pc, #136]	; (8004d40 <TIM_Base_SetConfig+0xe8>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d013      	beq.n	8004ce2 <TIM_Base_SetConfig+0x8a>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a21      	ldr	r2, [pc, #132]	; (8004d44 <TIM_Base_SetConfig+0xec>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00f      	beq.n	8004ce2 <TIM_Base_SetConfig+0x8a>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a20      	ldr	r2, [pc, #128]	; (8004d48 <TIM_Base_SetConfig+0xf0>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d00b      	beq.n	8004ce2 <TIM_Base_SetConfig+0x8a>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a1f      	ldr	r2, [pc, #124]	; (8004d4c <TIM_Base_SetConfig+0xf4>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d007      	beq.n	8004ce2 <TIM_Base_SetConfig+0x8a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a1e      	ldr	r2, [pc, #120]	; (8004d50 <TIM_Base_SetConfig+0xf8>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d003      	beq.n	8004ce2 <TIM_Base_SetConfig+0x8a>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a1d      	ldr	r2, [pc, #116]	; (8004d54 <TIM_Base_SetConfig+0xfc>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d108      	bne.n	8004cf4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a08      	ldr	r2, [pc, #32]	; (8004d3c <TIM_Base_SetConfig+0xe4>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d103      	bne.n	8004d28 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	691a      	ldr	r2, [r3, #16]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	615a      	str	r2, [r3, #20]
}
 8004d2e:	bf00      	nop
 8004d30:	3714      	adds	r7, #20
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	40010000 	.word	0x40010000
 8004d40:	40000400 	.word	0x40000400
 8004d44:	40000800 	.word	0x40000800
 8004d48:	40000c00 	.word	0x40000c00
 8004d4c:	40014000 	.word	0x40014000
 8004d50:	40014400 	.word	0x40014400
 8004d54:	40014800 	.word	0x40014800

08004d58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e03f      	b.n	8004e12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d106      	bne.n	8004dac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7fd feea 	bl	8002b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2224      	movs	r2, #36	; 0x24
 8004db0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68da      	ldr	r2, [r3, #12]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 faaf 	bl	8005328 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	691a      	ldr	r2, [r3, #16]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	695a      	ldr	r2, [r3, #20]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004de8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004df8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3708      	adds	r7, #8
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b085      	sub	sp, #20
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	60f8      	str	r0, [r7, #12]
 8004e22:	60b9      	str	r1, [r7, #8]
 8004e24:	4613      	mov	r3, r2
 8004e26:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b20      	cmp	r3, #32
 8004e32:	d140      	bne.n	8004eb6 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <HAL_UART_Receive_IT+0x26>
 8004e3a:	88fb      	ldrh	r3, [r7, #6]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e039      	b.n	8004eb8 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d101      	bne.n	8004e52 <HAL_UART_Receive_IT+0x38>
 8004e4e:	2302      	movs	r3, #2
 8004e50:	e032      	b.n	8004eb8 <HAL_UART_Receive_IT+0x9e>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	88fa      	ldrh	r2, [r7, #6]
 8004e64:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	88fa      	ldrh	r2, [r7, #6]
 8004e6a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2222      	movs	r2, #34	; 0x22
 8004e76:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68da      	ldr	r2, [r3, #12]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e90:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	695a      	ldr	r2, [r3, #20]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0201 	orr.w	r2, r2, #1
 8004ea0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68da      	ldr	r2, [r3, #12]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f042 0220 	orr.w	r2, r2, #32
 8004eb0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	e000      	b.n	8004eb8 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004eb6:	2302      	movs	r3, #2
  }
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b088      	sub	sp, #32
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	f003 030f 	and.w	r3, r3, #15
 8004ef2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10d      	bne.n	8004f16 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d008      	beq.n	8004f16 <HAL_UART_IRQHandler+0x52>
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f988 	bl	8005224 <UART_Receive_IT>
      return;
 8004f14:	e0cc      	b.n	80050b0 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 80ab 	beq.w	8005074 <HAL_UART_IRQHandler+0x1b0>
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d105      	bne.n	8004f34 <HAL_UART_IRQHandler+0x70>
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f000 80a0 	beq.w	8005074 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <HAL_UART_IRQHandler+0x90>
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d005      	beq.n	8004f54 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4c:	f043 0201 	orr.w	r2, r3, #1
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	f003 0304 	and.w	r3, r3, #4
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00a      	beq.n	8004f74 <HAL_UART_IRQHandler+0xb0>
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d005      	beq.n	8004f74 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6c:	f043 0202 	orr.w	r2, r3, #2
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00a      	beq.n	8004f94 <HAL_UART_IRQHandler+0xd0>
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f003 0301 	and.w	r3, r3, #1
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d005      	beq.n	8004f94 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8c:	f043 0204 	orr.w	r2, r3, #4
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	f003 0308 	and.w	r3, r3, #8
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00a      	beq.n	8004fb4 <HAL_UART_IRQHandler+0xf0>
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d005      	beq.n	8004fb4 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fac:	f043 0208 	orr.w	r2, r3, #8
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d078      	beq.n	80050ae <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	f003 0320 	and.w	r3, r3, #32
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d007      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x112>
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	f003 0320 	and.w	r3, r3, #32
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d002      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f927 	bl	8005224 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe0:	2b40      	cmp	r3, #64	; 0x40
 8004fe2:	bf0c      	ite	eq
 8004fe4:	2301      	moveq	r3, #1
 8004fe6:	2300      	movne	r3, #0
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d102      	bne.n	8004ffe <HAL_UART_IRQHandler+0x13a>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d031      	beq.n	8005062 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f870 	bl	80050e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800500e:	2b40      	cmp	r3, #64	; 0x40
 8005010:	d123      	bne.n	800505a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	695a      	ldr	r2, [r3, #20]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005020:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005026:	2b00      	cmp	r3, #0
 8005028:	d013      	beq.n	8005052 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800502e:	4a22      	ldr	r2, [pc, #136]	; (80050b8 <HAL_UART_IRQHandler+0x1f4>)
 8005030:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005036:	4618      	mov	r0, r3
 8005038:	f7fe f8bf 	bl	80031ba <HAL_DMA_Abort_IT>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d016      	beq.n	8005070 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800504c:	4610      	mov	r0, r2
 800504e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005050:	e00e      	b.n	8005070 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f83c 	bl	80050d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005058:	e00a      	b.n	8005070 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f838 	bl	80050d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005060:	e006      	b.n	8005070 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f834 	bl	80050d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800506e:	e01e      	b.n	80050ae <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005070:	bf00      	nop
    return;
 8005072:	e01c      	b.n	80050ae <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800507a:	2b00      	cmp	r3, #0
 800507c:	d008      	beq.n	8005090 <HAL_UART_IRQHandler+0x1cc>
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 f85d 	bl	8005148 <UART_Transmit_IT>
    return;
 800508e:	e00f      	b.n	80050b0 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <HAL_UART_IRQHandler+0x1ec>
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d005      	beq.n	80050b0 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f8a5 	bl	80051f4 <UART_EndTransmit_IT>
    return;
 80050aa:	bf00      	nop
 80050ac:	e000      	b.n	80050b0 <HAL_UART_IRQHandler+0x1ec>
    return;
 80050ae:	bf00      	nop
  }
}
 80050b0:	3720      	adds	r7, #32
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	08005121 	.word	0x08005121

080050bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68da      	ldr	r2, [r3, #12]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80050fa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	695a      	ldr	r2, [r3, #20]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 0201 	bic.w	r2, r2, #1
 800510a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2220      	movs	r2, #32
 8005110:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f7ff ffc8 	bl	80050d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005140:	bf00      	nop
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b21      	cmp	r3, #33	; 0x21
 800515a:	d144      	bne.n	80051e6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005164:	d11a      	bne.n	800519c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	881b      	ldrh	r3, [r3, #0]
 8005170:	461a      	mov	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800517a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d105      	bne.n	8005190 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	1c9a      	adds	r2, r3, #2
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	621a      	str	r2, [r3, #32]
 800518e:	e00e      	b.n	80051ae <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a1b      	ldr	r3, [r3, #32]
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	621a      	str	r2, [r3, #32]
 800519a:	e008      	b.n	80051ae <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	1c59      	adds	r1, r3, #1
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6211      	str	r1, [r2, #32]
 80051a6:	781a      	ldrb	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	3b01      	subs	r3, #1
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	4619      	mov	r1, r3
 80051bc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10f      	bne.n	80051e2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68da      	ldr	r2, [r3, #12]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68da      	ldr	r2, [r3, #12]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051e2:	2300      	movs	r3, #0
 80051e4:	e000      	b.n	80051e8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80051e6:	2302      	movs	r3, #2
  }
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68da      	ldr	r2, [r3, #12]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800520a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2220      	movs	r2, #32
 8005210:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f7ff ff51 	bl	80050bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3708      	adds	r7, #8
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b22      	cmp	r3, #34	; 0x22
 8005236:	d171      	bne.n	800531c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005240:	d123      	bne.n	800528a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005246:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10e      	bne.n	800526e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	b29b      	uxth	r3, r3
 8005258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800525c:	b29a      	uxth	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005266:	1c9a      	adds	r2, r3, #2
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	629a      	str	r2, [r3, #40]	; 0x28
 800526c:	e029      	b.n	80052c2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	b29b      	uxth	r3, r3
 8005276:	b2db      	uxtb	r3, r3
 8005278:	b29a      	uxth	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005282:	1c5a      	adds	r2, r3, #1
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	629a      	str	r2, [r3, #40]	; 0x28
 8005288:	e01b      	b.n	80052c2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10a      	bne.n	80052a8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6858      	ldr	r0, [r3, #4]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529c:	1c59      	adds	r1, r3, #1
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	6291      	str	r1, [r2, #40]	; 0x28
 80052a2:	b2c2      	uxtb	r2, r0
 80052a4:	701a      	strb	r2, [r3, #0]
 80052a6:	e00c      	b.n	80052c2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b4:	1c58      	adds	r0, r3, #1
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	6288      	str	r0, [r1, #40]	; 0x28
 80052ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	3b01      	subs	r3, #1
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	4619      	mov	r1, r3
 80052d0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d120      	bne.n	8005318 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68da      	ldr	r2, [r3, #12]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0220 	bic.w	r2, r2, #32
 80052e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68da      	ldr	r2, [r3, #12]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	695a      	ldr	r2, [r3, #20]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f022 0201 	bic.w	r2, r2, #1
 8005304:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2220      	movs	r2, #32
 800530a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7fc fbd0 	bl	8001ab4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005314:	2300      	movs	r3, #0
 8005316:	e002      	b.n	800531e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005318:	2300      	movs	r3, #0
 800531a:	e000      	b.n	800531e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800531c:	2302      	movs	r3, #2
  }
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
	...

08005328 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005328:	b5b0      	push	{r4, r5, r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68da      	ldr	r2, [r3, #12]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689a      	ldr	r2, [r3, #8]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	431a      	orrs	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	431a      	orrs	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	4313      	orrs	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005368:	f023 030c 	bic.w	r3, r3, #12
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	6812      	ldr	r2, [r2, #0]
 8005370:	68f9      	ldr	r1, [r7, #12]
 8005372:	430b      	orrs	r3, r1
 8005374:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	699a      	ldr	r2, [r3, #24]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	69db      	ldr	r3, [r3, #28]
 8005390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005394:	f040 80e4 	bne.w	8005560 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4aab      	ldr	r2, [pc, #684]	; (800564c <UART_SetConfig+0x324>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d004      	beq.n	80053ac <UART_SetConfig+0x84>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4aaa      	ldr	r2, [pc, #680]	; (8005650 <UART_SetConfig+0x328>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d16c      	bne.n	8005486 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80053ac:	f7ff fa32 	bl	8004814 <HAL_RCC_GetPCLK2Freq>
 80053b0:	4602      	mov	r2, r0
 80053b2:	4613      	mov	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	009a      	lsls	r2, r3, #2
 80053ba:	441a      	add	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	005b      	lsls	r3, r3, #1
 80053c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c6:	4aa3      	ldr	r2, [pc, #652]	; (8005654 <UART_SetConfig+0x32c>)
 80053c8:	fba2 2303 	umull	r2, r3, r2, r3
 80053cc:	095b      	lsrs	r3, r3, #5
 80053ce:	011c      	lsls	r4, r3, #4
 80053d0:	f7ff fa20 	bl	8004814 <HAL_RCC_GetPCLK2Freq>
 80053d4:	4602      	mov	r2, r0
 80053d6:	4613      	mov	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	009a      	lsls	r2, r3, #2
 80053de:	441a      	add	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	005b      	lsls	r3, r3, #1
 80053e6:	fbb2 f5f3 	udiv	r5, r2, r3
 80053ea:	f7ff fa13 	bl	8004814 <HAL_RCC_GetPCLK2Freq>
 80053ee:	4602      	mov	r2, r0
 80053f0:	4613      	mov	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	009a      	lsls	r2, r3, #2
 80053f8:	441a      	add	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	005b      	lsls	r3, r3, #1
 8005400:	fbb2 f3f3 	udiv	r3, r2, r3
 8005404:	4a93      	ldr	r2, [pc, #588]	; (8005654 <UART_SetConfig+0x32c>)
 8005406:	fba2 2303 	umull	r2, r3, r2, r3
 800540a:	095b      	lsrs	r3, r3, #5
 800540c:	2264      	movs	r2, #100	; 0x64
 800540e:	fb02 f303 	mul.w	r3, r2, r3
 8005412:	1aeb      	subs	r3, r5, r3
 8005414:	00db      	lsls	r3, r3, #3
 8005416:	3332      	adds	r3, #50	; 0x32
 8005418:	4a8e      	ldr	r2, [pc, #568]	; (8005654 <UART_SetConfig+0x32c>)
 800541a:	fba2 2303 	umull	r2, r3, r2, r3
 800541e:	095b      	lsrs	r3, r3, #5
 8005420:	005b      	lsls	r3, r3, #1
 8005422:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005426:	441c      	add	r4, r3
 8005428:	f7ff f9f4 	bl	8004814 <HAL_RCC_GetPCLK2Freq>
 800542c:	4602      	mov	r2, r0
 800542e:	4613      	mov	r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	4413      	add	r3, r2
 8005434:	009a      	lsls	r2, r3, #2
 8005436:	441a      	add	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	fbb2 f5f3 	udiv	r5, r2, r3
 8005442:	f7ff f9e7 	bl	8004814 <HAL_RCC_GetPCLK2Freq>
 8005446:	4602      	mov	r2, r0
 8005448:	4613      	mov	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	009a      	lsls	r2, r3, #2
 8005450:	441a      	add	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	005b      	lsls	r3, r3, #1
 8005458:	fbb2 f3f3 	udiv	r3, r2, r3
 800545c:	4a7d      	ldr	r2, [pc, #500]	; (8005654 <UART_SetConfig+0x32c>)
 800545e:	fba2 2303 	umull	r2, r3, r2, r3
 8005462:	095b      	lsrs	r3, r3, #5
 8005464:	2264      	movs	r2, #100	; 0x64
 8005466:	fb02 f303 	mul.w	r3, r2, r3
 800546a:	1aeb      	subs	r3, r5, r3
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	3332      	adds	r3, #50	; 0x32
 8005470:	4a78      	ldr	r2, [pc, #480]	; (8005654 <UART_SetConfig+0x32c>)
 8005472:	fba2 2303 	umull	r2, r3, r2, r3
 8005476:	095b      	lsrs	r3, r3, #5
 8005478:	f003 0207 	and.w	r2, r3, #7
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4422      	add	r2, r4
 8005482:	609a      	str	r2, [r3, #8]
 8005484:	e154      	b.n	8005730 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005486:	f7ff f9b1 	bl	80047ec <HAL_RCC_GetPCLK1Freq>
 800548a:	4602      	mov	r2, r0
 800548c:	4613      	mov	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	009a      	lsls	r2, r3, #2
 8005494:	441a      	add	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a0:	4a6c      	ldr	r2, [pc, #432]	; (8005654 <UART_SetConfig+0x32c>)
 80054a2:	fba2 2303 	umull	r2, r3, r2, r3
 80054a6:	095b      	lsrs	r3, r3, #5
 80054a8:	011c      	lsls	r4, r3, #4
 80054aa:	f7ff f99f 	bl	80047ec <HAL_RCC_GetPCLK1Freq>
 80054ae:	4602      	mov	r2, r0
 80054b0:	4613      	mov	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	009a      	lsls	r2, r3, #2
 80054b8:	441a      	add	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	005b      	lsls	r3, r3, #1
 80054c0:	fbb2 f5f3 	udiv	r5, r2, r3
 80054c4:	f7ff f992 	bl	80047ec <HAL_RCC_GetPCLK1Freq>
 80054c8:	4602      	mov	r2, r0
 80054ca:	4613      	mov	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4413      	add	r3, r2
 80054d0:	009a      	lsls	r2, r3, #2
 80054d2:	441a      	add	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	005b      	lsls	r3, r3, #1
 80054da:	fbb2 f3f3 	udiv	r3, r2, r3
 80054de:	4a5d      	ldr	r2, [pc, #372]	; (8005654 <UART_SetConfig+0x32c>)
 80054e0:	fba2 2303 	umull	r2, r3, r2, r3
 80054e4:	095b      	lsrs	r3, r3, #5
 80054e6:	2264      	movs	r2, #100	; 0x64
 80054e8:	fb02 f303 	mul.w	r3, r2, r3
 80054ec:	1aeb      	subs	r3, r5, r3
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	3332      	adds	r3, #50	; 0x32
 80054f2:	4a58      	ldr	r2, [pc, #352]	; (8005654 <UART_SetConfig+0x32c>)
 80054f4:	fba2 2303 	umull	r2, r3, r2, r3
 80054f8:	095b      	lsrs	r3, r3, #5
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005500:	441c      	add	r4, r3
 8005502:	f7ff f973 	bl	80047ec <HAL_RCC_GetPCLK1Freq>
 8005506:	4602      	mov	r2, r0
 8005508:	4613      	mov	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	009a      	lsls	r2, r3, #2
 8005510:	441a      	add	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	fbb2 f5f3 	udiv	r5, r2, r3
 800551c:	f7ff f966 	bl	80047ec <HAL_RCC_GetPCLK1Freq>
 8005520:	4602      	mov	r2, r0
 8005522:	4613      	mov	r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4413      	add	r3, r2
 8005528:	009a      	lsls	r2, r3, #2
 800552a:	441a      	add	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	005b      	lsls	r3, r3, #1
 8005532:	fbb2 f3f3 	udiv	r3, r2, r3
 8005536:	4a47      	ldr	r2, [pc, #284]	; (8005654 <UART_SetConfig+0x32c>)
 8005538:	fba2 2303 	umull	r2, r3, r2, r3
 800553c:	095b      	lsrs	r3, r3, #5
 800553e:	2264      	movs	r2, #100	; 0x64
 8005540:	fb02 f303 	mul.w	r3, r2, r3
 8005544:	1aeb      	subs	r3, r5, r3
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	3332      	adds	r3, #50	; 0x32
 800554a:	4a42      	ldr	r2, [pc, #264]	; (8005654 <UART_SetConfig+0x32c>)
 800554c:	fba2 2303 	umull	r2, r3, r2, r3
 8005550:	095b      	lsrs	r3, r3, #5
 8005552:	f003 0207 	and.w	r2, r3, #7
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4422      	add	r2, r4
 800555c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800555e:	e0e7      	b.n	8005730 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a39      	ldr	r2, [pc, #228]	; (800564c <UART_SetConfig+0x324>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d004      	beq.n	8005574 <UART_SetConfig+0x24c>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a38      	ldr	r2, [pc, #224]	; (8005650 <UART_SetConfig+0x328>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d171      	bne.n	8005658 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005574:	f7ff f94e 	bl	8004814 <HAL_RCC_GetPCLK2Freq>
 8005578:	4602      	mov	r2, r0
 800557a:	4613      	mov	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4413      	add	r3, r2
 8005580:	009a      	lsls	r2, r3, #2
 8005582:	441a      	add	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	fbb2 f3f3 	udiv	r3, r2, r3
 800558e:	4a31      	ldr	r2, [pc, #196]	; (8005654 <UART_SetConfig+0x32c>)
 8005590:	fba2 2303 	umull	r2, r3, r2, r3
 8005594:	095b      	lsrs	r3, r3, #5
 8005596:	011c      	lsls	r4, r3, #4
 8005598:	f7ff f93c 	bl	8004814 <HAL_RCC_GetPCLK2Freq>
 800559c:	4602      	mov	r2, r0
 800559e:	4613      	mov	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	009a      	lsls	r2, r3, #2
 80055a6:	441a      	add	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	fbb2 f5f3 	udiv	r5, r2, r3
 80055b2:	f7ff f92f 	bl	8004814 <HAL_RCC_GetPCLK2Freq>
 80055b6:	4602      	mov	r2, r0
 80055b8:	4613      	mov	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	009a      	lsls	r2, r3, #2
 80055c0:	441a      	add	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055cc:	4a21      	ldr	r2, [pc, #132]	; (8005654 <UART_SetConfig+0x32c>)
 80055ce:	fba2 2303 	umull	r2, r3, r2, r3
 80055d2:	095b      	lsrs	r3, r3, #5
 80055d4:	2264      	movs	r2, #100	; 0x64
 80055d6:	fb02 f303 	mul.w	r3, r2, r3
 80055da:	1aeb      	subs	r3, r5, r3
 80055dc:	011b      	lsls	r3, r3, #4
 80055de:	3332      	adds	r3, #50	; 0x32
 80055e0:	4a1c      	ldr	r2, [pc, #112]	; (8005654 <UART_SetConfig+0x32c>)
 80055e2:	fba2 2303 	umull	r2, r3, r2, r3
 80055e6:	095b      	lsrs	r3, r3, #5
 80055e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055ec:	441c      	add	r4, r3
 80055ee:	f7ff f911 	bl	8004814 <HAL_RCC_GetPCLK2Freq>
 80055f2:	4602      	mov	r2, r0
 80055f4:	4613      	mov	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	009a      	lsls	r2, r3, #2
 80055fc:	441a      	add	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	fbb2 f5f3 	udiv	r5, r2, r3
 8005608:	f7ff f904 	bl	8004814 <HAL_RCC_GetPCLK2Freq>
 800560c:	4602      	mov	r2, r0
 800560e:	4613      	mov	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	009a      	lsls	r2, r3, #2
 8005616:	441a      	add	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005622:	4a0c      	ldr	r2, [pc, #48]	; (8005654 <UART_SetConfig+0x32c>)
 8005624:	fba2 2303 	umull	r2, r3, r2, r3
 8005628:	095b      	lsrs	r3, r3, #5
 800562a:	2264      	movs	r2, #100	; 0x64
 800562c:	fb02 f303 	mul.w	r3, r2, r3
 8005630:	1aeb      	subs	r3, r5, r3
 8005632:	011b      	lsls	r3, r3, #4
 8005634:	3332      	adds	r3, #50	; 0x32
 8005636:	4a07      	ldr	r2, [pc, #28]	; (8005654 <UART_SetConfig+0x32c>)
 8005638:	fba2 2303 	umull	r2, r3, r2, r3
 800563c:	095b      	lsrs	r3, r3, #5
 800563e:	f003 020f 	and.w	r2, r3, #15
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4422      	add	r2, r4
 8005648:	609a      	str	r2, [r3, #8]
 800564a:	e071      	b.n	8005730 <UART_SetConfig+0x408>
 800564c:	40011000 	.word	0x40011000
 8005650:	40011400 	.word	0x40011400
 8005654:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005658:	f7ff f8c8 	bl	80047ec <HAL_RCC_GetPCLK1Freq>
 800565c:	4602      	mov	r2, r0
 800565e:	4613      	mov	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	009a      	lsls	r2, r3, #2
 8005666:	441a      	add	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005672:	4a31      	ldr	r2, [pc, #196]	; (8005738 <UART_SetConfig+0x410>)
 8005674:	fba2 2303 	umull	r2, r3, r2, r3
 8005678:	095b      	lsrs	r3, r3, #5
 800567a:	011c      	lsls	r4, r3, #4
 800567c:	f7ff f8b6 	bl	80047ec <HAL_RCC_GetPCLK1Freq>
 8005680:	4602      	mov	r2, r0
 8005682:	4613      	mov	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4413      	add	r3, r2
 8005688:	009a      	lsls	r2, r3, #2
 800568a:	441a      	add	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	fbb2 f5f3 	udiv	r5, r2, r3
 8005696:	f7ff f8a9 	bl	80047ec <HAL_RCC_GetPCLK1Freq>
 800569a:	4602      	mov	r2, r0
 800569c:	4613      	mov	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	009a      	lsls	r2, r3, #2
 80056a4:	441a      	add	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b0:	4a21      	ldr	r2, [pc, #132]	; (8005738 <UART_SetConfig+0x410>)
 80056b2:	fba2 2303 	umull	r2, r3, r2, r3
 80056b6:	095b      	lsrs	r3, r3, #5
 80056b8:	2264      	movs	r2, #100	; 0x64
 80056ba:	fb02 f303 	mul.w	r3, r2, r3
 80056be:	1aeb      	subs	r3, r5, r3
 80056c0:	011b      	lsls	r3, r3, #4
 80056c2:	3332      	adds	r3, #50	; 0x32
 80056c4:	4a1c      	ldr	r2, [pc, #112]	; (8005738 <UART_SetConfig+0x410>)
 80056c6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ca:	095b      	lsrs	r3, r3, #5
 80056cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056d0:	441c      	add	r4, r3
 80056d2:	f7ff f88b 	bl	80047ec <HAL_RCC_GetPCLK1Freq>
 80056d6:	4602      	mov	r2, r0
 80056d8:	4613      	mov	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	009a      	lsls	r2, r3, #2
 80056e0:	441a      	add	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	fbb2 f5f3 	udiv	r5, r2, r3
 80056ec:	f7ff f87e 	bl	80047ec <HAL_RCC_GetPCLK1Freq>
 80056f0:	4602      	mov	r2, r0
 80056f2:	4613      	mov	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	009a      	lsls	r2, r3, #2
 80056fa:	441a      	add	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	fbb2 f3f3 	udiv	r3, r2, r3
 8005706:	4a0c      	ldr	r2, [pc, #48]	; (8005738 <UART_SetConfig+0x410>)
 8005708:	fba2 2303 	umull	r2, r3, r2, r3
 800570c:	095b      	lsrs	r3, r3, #5
 800570e:	2264      	movs	r2, #100	; 0x64
 8005710:	fb02 f303 	mul.w	r3, r2, r3
 8005714:	1aeb      	subs	r3, r5, r3
 8005716:	011b      	lsls	r3, r3, #4
 8005718:	3332      	adds	r3, #50	; 0x32
 800571a:	4a07      	ldr	r2, [pc, #28]	; (8005738 <UART_SetConfig+0x410>)
 800571c:	fba2 2303 	umull	r2, r3, r2, r3
 8005720:	095b      	lsrs	r3, r3, #5
 8005722:	f003 020f 	and.w	r2, r3, #15
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4422      	add	r2, r4
 800572c:	609a      	str	r2, [r3, #8]
}
 800572e:	e7ff      	b.n	8005730 <UART_SetConfig+0x408>
 8005730:	bf00      	nop
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bdb0      	pop	{r4, r5, r7, pc}
 8005738:	51eb851f 	.word	0x51eb851f

0800573c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800573c:	b580      	push	{r7, lr}
 800573e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005740:	4904      	ldr	r1, [pc, #16]	; (8005754 <MX_FATFS_Init+0x18>)
 8005742:	4805      	ldr	r0, [pc, #20]	; (8005758 <MX_FATFS_Init+0x1c>)
 8005744:	f000 f8b0 	bl	80058a8 <FATFS_LinkDriver>
 8005748:	4603      	mov	r3, r0
 800574a:	461a      	mov	r2, r3
 800574c:	4b03      	ldr	r3, [pc, #12]	; (800575c <MX_FATFS_Init+0x20>)
 800574e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8005750:	bf00      	nop
 8005752:	bd80      	pop	{r7, pc}
 8005754:	20000adc 	.word	0x20000adc
 8005758:	20000028 	.word	0x20000028
 800575c:	20000ae0 	.word	0x20000ae0

08005760 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	4603      	mov	r3, r0
 8005768:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800576a:	4b06      	ldr	r3, [pc, #24]	; (8005784 <USER_initialize+0x24>)
 800576c:	2201      	movs	r2, #1
 800576e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005770:	4b04      	ldr	r3, [pc, #16]	; (8005784 <USER_initialize+0x24>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005776:	4618      	mov	r0, r3
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	20000025 	.word	0x20000025

08005788 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	4603      	mov	r3, r0
 8005790:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8005792:	4b06      	ldr	r3, [pc, #24]	; (80057ac <USER_status+0x24>)
 8005794:	2201      	movs	r2, #1
 8005796:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005798:	4b04      	ldr	r3, [pc, #16]	; (80057ac <USER_status+0x24>)
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800579e:	4618      	mov	r0, r3
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	20000025 	.word	0x20000025

080057b0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60b9      	str	r1, [r7, #8]
 80057b8:	607a      	str	r2, [r7, #4]
 80057ba:	603b      	str	r3, [r7, #0]
 80057bc:	4603      	mov	r3, r0
 80057be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80057c0:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 80057ce:	b480      	push	{r7}
 80057d0:	b085      	sub	sp, #20
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
 80057d8:	603b      	str	r3, [r7, #0]
 80057da:	4603      	mov	r3, r0
 80057dc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80057de:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	4603      	mov	r3, r0
 80057f4:	603a      	str	r2, [r7, #0]
 80057f6:	71fb      	strb	r3, [r7, #7]
 80057f8:	460b      	mov	r3, r1
 80057fa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	73fb      	strb	r3, [r7, #15]
    return res;
 8005800:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8005802:	4618      	mov	r0, r3
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
	...

08005810 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	4613      	mov	r3, r2
 800581c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800581e:	2301      	movs	r3, #1
 8005820:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005822:	2300      	movs	r3, #0
 8005824:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005826:	4b1f      	ldr	r3, [pc, #124]	; (80058a4 <FATFS_LinkDriverEx+0x94>)
 8005828:	7a5b      	ldrb	r3, [r3, #9]
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d131      	bne.n	8005894 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005830:	4b1c      	ldr	r3, [pc, #112]	; (80058a4 <FATFS_LinkDriverEx+0x94>)
 8005832:	7a5b      	ldrb	r3, [r3, #9]
 8005834:	b2db      	uxtb	r3, r3
 8005836:	461a      	mov	r2, r3
 8005838:	4b1a      	ldr	r3, [pc, #104]	; (80058a4 <FATFS_LinkDriverEx+0x94>)
 800583a:	2100      	movs	r1, #0
 800583c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800583e:	4b19      	ldr	r3, [pc, #100]	; (80058a4 <FATFS_LinkDriverEx+0x94>)
 8005840:	7a5b      	ldrb	r3, [r3, #9]
 8005842:	b2db      	uxtb	r3, r3
 8005844:	4a17      	ldr	r2, [pc, #92]	; (80058a4 <FATFS_LinkDriverEx+0x94>)
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4413      	add	r3, r2
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800584e:	4b15      	ldr	r3, [pc, #84]	; (80058a4 <FATFS_LinkDriverEx+0x94>)
 8005850:	7a5b      	ldrb	r3, [r3, #9]
 8005852:	b2db      	uxtb	r3, r3
 8005854:	461a      	mov	r2, r3
 8005856:	4b13      	ldr	r3, [pc, #76]	; (80058a4 <FATFS_LinkDriverEx+0x94>)
 8005858:	4413      	add	r3, r2
 800585a:	79fa      	ldrb	r2, [r7, #7]
 800585c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800585e:	4b11      	ldr	r3, [pc, #68]	; (80058a4 <FATFS_LinkDriverEx+0x94>)
 8005860:	7a5b      	ldrb	r3, [r3, #9]
 8005862:	b2db      	uxtb	r3, r3
 8005864:	1c5a      	adds	r2, r3, #1
 8005866:	b2d1      	uxtb	r1, r2
 8005868:	4a0e      	ldr	r2, [pc, #56]	; (80058a4 <FATFS_LinkDriverEx+0x94>)
 800586a:	7251      	strb	r1, [r2, #9]
 800586c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800586e:	7dbb      	ldrb	r3, [r7, #22]
 8005870:	3330      	adds	r3, #48	; 0x30
 8005872:	b2da      	uxtb	r2, r3
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	3301      	adds	r3, #1
 800587c:	223a      	movs	r2, #58	; 0x3a
 800587e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	3302      	adds	r3, #2
 8005884:	222f      	movs	r2, #47	; 0x2f
 8005886:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	3303      	adds	r3, #3
 800588c:	2200      	movs	r2, #0
 800588e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005890:	2300      	movs	r3, #0
 8005892:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005894:	7dfb      	ldrb	r3, [r7, #23]
}
 8005896:	4618      	mov	r0, r3
 8005898:	371c      	adds	r7, #28
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	2000064c 	.word	0x2000064c

080058a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80058b2:	2200      	movs	r2, #0
 80058b4:	6839      	ldr	r1, [r7, #0]
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7ff ffaa 	bl	8005810 <FATFS_LinkDriverEx>
 80058bc:	4603      	mov	r3, r0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
	...

080058c8 <__errno>:
 80058c8:	4b01      	ldr	r3, [pc, #4]	; (80058d0 <__errno+0x8>)
 80058ca:	6818      	ldr	r0, [r3, #0]
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	2000003c 	.word	0x2000003c

080058d4 <__libc_init_array>:
 80058d4:	b570      	push	{r4, r5, r6, lr}
 80058d6:	4e0d      	ldr	r6, [pc, #52]	; (800590c <__libc_init_array+0x38>)
 80058d8:	4c0d      	ldr	r4, [pc, #52]	; (8005910 <__libc_init_array+0x3c>)
 80058da:	1ba4      	subs	r4, r4, r6
 80058dc:	10a4      	asrs	r4, r4, #2
 80058de:	2500      	movs	r5, #0
 80058e0:	42a5      	cmp	r5, r4
 80058e2:	d109      	bne.n	80058f8 <__libc_init_array+0x24>
 80058e4:	4e0b      	ldr	r6, [pc, #44]	; (8005914 <__libc_init_array+0x40>)
 80058e6:	4c0c      	ldr	r4, [pc, #48]	; (8005918 <__libc_init_array+0x44>)
 80058e8:	f004 fb1c 	bl	8009f24 <_init>
 80058ec:	1ba4      	subs	r4, r4, r6
 80058ee:	10a4      	asrs	r4, r4, #2
 80058f0:	2500      	movs	r5, #0
 80058f2:	42a5      	cmp	r5, r4
 80058f4:	d105      	bne.n	8005902 <__libc_init_array+0x2e>
 80058f6:	bd70      	pop	{r4, r5, r6, pc}
 80058f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058fc:	4798      	blx	r3
 80058fe:	3501      	adds	r5, #1
 8005900:	e7ee      	b.n	80058e0 <__libc_init_array+0xc>
 8005902:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005906:	4798      	blx	r3
 8005908:	3501      	adds	r5, #1
 800590a:	e7f2      	b.n	80058f2 <__libc_init_array+0x1e>
 800590c:	0800cd38 	.word	0x0800cd38
 8005910:	0800cd38 	.word	0x0800cd38
 8005914:	0800cd38 	.word	0x0800cd38
 8005918:	0800cd3c 	.word	0x0800cd3c

0800591c <memset>:
 800591c:	4402      	add	r2, r0
 800591e:	4603      	mov	r3, r0
 8005920:	4293      	cmp	r3, r2
 8005922:	d100      	bne.n	8005926 <memset+0xa>
 8005924:	4770      	bx	lr
 8005926:	f803 1b01 	strb.w	r1, [r3], #1
 800592a:	e7f9      	b.n	8005920 <memset+0x4>

0800592c <__cvt>:
 800592c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005930:	ec55 4b10 	vmov	r4, r5, d0
 8005934:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005936:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800593a:	2d00      	cmp	r5, #0
 800593c:	460e      	mov	r6, r1
 800593e:	4691      	mov	r9, r2
 8005940:	4619      	mov	r1, r3
 8005942:	bfb8      	it	lt
 8005944:	4622      	movlt	r2, r4
 8005946:	462b      	mov	r3, r5
 8005948:	f027 0720 	bic.w	r7, r7, #32
 800594c:	bfbb      	ittet	lt
 800594e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005952:	461d      	movlt	r5, r3
 8005954:	2300      	movge	r3, #0
 8005956:	232d      	movlt	r3, #45	; 0x2d
 8005958:	bfb8      	it	lt
 800595a:	4614      	movlt	r4, r2
 800595c:	2f46      	cmp	r7, #70	; 0x46
 800595e:	700b      	strb	r3, [r1, #0]
 8005960:	d004      	beq.n	800596c <__cvt+0x40>
 8005962:	2f45      	cmp	r7, #69	; 0x45
 8005964:	d100      	bne.n	8005968 <__cvt+0x3c>
 8005966:	3601      	adds	r6, #1
 8005968:	2102      	movs	r1, #2
 800596a:	e000      	b.n	800596e <__cvt+0x42>
 800596c:	2103      	movs	r1, #3
 800596e:	ab03      	add	r3, sp, #12
 8005970:	9301      	str	r3, [sp, #4]
 8005972:	ab02      	add	r3, sp, #8
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	4632      	mov	r2, r6
 8005978:	4653      	mov	r3, sl
 800597a:	ec45 4b10 	vmov	d0, r4, r5
 800597e:	f001 fdbb 	bl	80074f8 <_dtoa_r>
 8005982:	2f47      	cmp	r7, #71	; 0x47
 8005984:	4680      	mov	r8, r0
 8005986:	d102      	bne.n	800598e <__cvt+0x62>
 8005988:	f019 0f01 	tst.w	r9, #1
 800598c:	d026      	beq.n	80059dc <__cvt+0xb0>
 800598e:	2f46      	cmp	r7, #70	; 0x46
 8005990:	eb08 0906 	add.w	r9, r8, r6
 8005994:	d111      	bne.n	80059ba <__cvt+0x8e>
 8005996:	f898 3000 	ldrb.w	r3, [r8]
 800599a:	2b30      	cmp	r3, #48	; 0x30
 800599c:	d10a      	bne.n	80059b4 <__cvt+0x88>
 800599e:	2200      	movs	r2, #0
 80059a0:	2300      	movs	r3, #0
 80059a2:	4620      	mov	r0, r4
 80059a4:	4629      	mov	r1, r5
 80059a6:	f7fb f897 	bl	8000ad8 <__aeabi_dcmpeq>
 80059aa:	b918      	cbnz	r0, 80059b4 <__cvt+0x88>
 80059ac:	f1c6 0601 	rsb	r6, r6, #1
 80059b0:	f8ca 6000 	str.w	r6, [sl]
 80059b4:	f8da 3000 	ldr.w	r3, [sl]
 80059b8:	4499      	add	r9, r3
 80059ba:	2200      	movs	r2, #0
 80059bc:	2300      	movs	r3, #0
 80059be:	4620      	mov	r0, r4
 80059c0:	4629      	mov	r1, r5
 80059c2:	f7fb f889 	bl	8000ad8 <__aeabi_dcmpeq>
 80059c6:	b938      	cbnz	r0, 80059d8 <__cvt+0xac>
 80059c8:	2230      	movs	r2, #48	; 0x30
 80059ca:	9b03      	ldr	r3, [sp, #12]
 80059cc:	454b      	cmp	r3, r9
 80059ce:	d205      	bcs.n	80059dc <__cvt+0xb0>
 80059d0:	1c59      	adds	r1, r3, #1
 80059d2:	9103      	str	r1, [sp, #12]
 80059d4:	701a      	strb	r2, [r3, #0]
 80059d6:	e7f8      	b.n	80059ca <__cvt+0x9e>
 80059d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80059dc:	9b03      	ldr	r3, [sp, #12]
 80059de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059e0:	eba3 0308 	sub.w	r3, r3, r8
 80059e4:	4640      	mov	r0, r8
 80059e6:	6013      	str	r3, [r2, #0]
 80059e8:	b004      	add	sp, #16
 80059ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080059ee <__exponent>:
 80059ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059f0:	2900      	cmp	r1, #0
 80059f2:	4604      	mov	r4, r0
 80059f4:	bfba      	itte	lt
 80059f6:	4249      	neglt	r1, r1
 80059f8:	232d      	movlt	r3, #45	; 0x2d
 80059fa:	232b      	movge	r3, #43	; 0x2b
 80059fc:	2909      	cmp	r1, #9
 80059fe:	f804 2b02 	strb.w	r2, [r4], #2
 8005a02:	7043      	strb	r3, [r0, #1]
 8005a04:	dd20      	ble.n	8005a48 <__exponent+0x5a>
 8005a06:	f10d 0307 	add.w	r3, sp, #7
 8005a0a:	461f      	mov	r7, r3
 8005a0c:	260a      	movs	r6, #10
 8005a0e:	fb91 f5f6 	sdiv	r5, r1, r6
 8005a12:	fb06 1115 	mls	r1, r6, r5, r1
 8005a16:	3130      	adds	r1, #48	; 0x30
 8005a18:	2d09      	cmp	r5, #9
 8005a1a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005a1e:	f103 32ff 	add.w	r2, r3, #4294967295
 8005a22:	4629      	mov	r1, r5
 8005a24:	dc09      	bgt.n	8005a3a <__exponent+0x4c>
 8005a26:	3130      	adds	r1, #48	; 0x30
 8005a28:	3b02      	subs	r3, #2
 8005a2a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005a2e:	42bb      	cmp	r3, r7
 8005a30:	4622      	mov	r2, r4
 8005a32:	d304      	bcc.n	8005a3e <__exponent+0x50>
 8005a34:	1a10      	subs	r0, r2, r0
 8005a36:	b003      	add	sp, #12
 8005a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	e7e7      	b.n	8005a0e <__exponent+0x20>
 8005a3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a42:	f804 2b01 	strb.w	r2, [r4], #1
 8005a46:	e7f2      	b.n	8005a2e <__exponent+0x40>
 8005a48:	2330      	movs	r3, #48	; 0x30
 8005a4a:	4419      	add	r1, r3
 8005a4c:	7083      	strb	r3, [r0, #2]
 8005a4e:	1d02      	adds	r2, r0, #4
 8005a50:	70c1      	strb	r1, [r0, #3]
 8005a52:	e7ef      	b.n	8005a34 <__exponent+0x46>

08005a54 <_printf_float>:
 8005a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a58:	b08d      	sub	sp, #52	; 0x34
 8005a5a:	460c      	mov	r4, r1
 8005a5c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005a60:	4616      	mov	r6, r2
 8005a62:	461f      	mov	r7, r3
 8005a64:	4605      	mov	r5, r0
 8005a66:	f002 fe39 	bl	80086dc <_localeconv_r>
 8005a6a:	6803      	ldr	r3, [r0, #0]
 8005a6c:	9304      	str	r3, [sp, #16]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fa fbb6 	bl	80001e0 <strlen>
 8005a74:	2300      	movs	r3, #0
 8005a76:	930a      	str	r3, [sp, #40]	; 0x28
 8005a78:	f8d8 3000 	ldr.w	r3, [r8]
 8005a7c:	9005      	str	r0, [sp, #20]
 8005a7e:	3307      	adds	r3, #7
 8005a80:	f023 0307 	bic.w	r3, r3, #7
 8005a84:	f103 0208 	add.w	r2, r3, #8
 8005a88:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005a8c:	f8d4 b000 	ldr.w	fp, [r4]
 8005a90:	f8c8 2000 	str.w	r2, [r8]
 8005a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a98:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005a9c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005aa0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005aa4:	9307      	str	r3, [sp, #28]
 8005aa6:	f8cd 8018 	str.w	r8, [sp, #24]
 8005aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8005aae:	4ba7      	ldr	r3, [pc, #668]	; (8005d4c <_printf_float+0x2f8>)
 8005ab0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ab4:	f7fb f842 	bl	8000b3c <__aeabi_dcmpun>
 8005ab8:	bb70      	cbnz	r0, 8005b18 <_printf_float+0xc4>
 8005aba:	f04f 32ff 	mov.w	r2, #4294967295
 8005abe:	4ba3      	ldr	r3, [pc, #652]	; (8005d4c <_printf_float+0x2f8>)
 8005ac0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ac4:	f7fb f81c 	bl	8000b00 <__aeabi_dcmple>
 8005ac8:	bb30      	cbnz	r0, 8005b18 <_printf_float+0xc4>
 8005aca:	2200      	movs	r2, #0
 8005acc:	2300      	movs	r3, #0
 8005ace:	4640      	mov	r0, r8
 8005ad0:	4649      	mov	r1, r9
 8005ad2:	f7fb f80b 	bl	8000aec <__aeabi_dcmplt>
 8005ad6:	b110      	cbz	r0, 8005ade <_printf_float+0x8a>
 8005ad8:	232d      	movs	r3, #45	; 0x2d
 8005ada:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ade:	4a9c      	ldr	r2, [pc, #624]	; (8005d50 <_printf_float+0x2fc>)
 8005ae0:	4b9c      	ldr	r3, [pc, #624]	; (8005d54 <_printf_float+0x300>)
 8005ae2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005ae6:	bf8c      	ite	hi
 8005ae8:	4690      	movhi	r8, r2
 8005aea:	4698      	movls	r8, r3
 8005aec:	2303      	movs	r3, #3
 8005aee:	f02b 0204 	bic.w	r2, fp, #4
 8005af2:	6123      	str	r3, [r4, #16]
 8005af4:	6022      	str	r2, [r4, #0]
 8005af6:	f04f 0900 	mov.w	r9, #0
 8005afa:	9700      	str	r7, [sp, #0]
 8005afc:	4633      	mov	r3, r6
 8005afe:	aa0b      	add	r2, sp, #44	; 0x2c
 8005b00:	4621      	mov	r1, r4
 8005b02:	4628      	mov	r0, r5
 8005b04:	f000 f9e6 	bl	8005ed4 <_printf_common>
 8005b08:	3001      	adds	r0, #1
 8005b0a:	f040 808d 	bne.w	8005c28 <_printf_float+0x1d4>
 8005b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b12:	b00d      	add	sp, #52	; 0x34
 8005b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b18:	4642      	mov	r2, r8
 8005b1a:	464b      	mov	r3, r9
 8005b1c:	4640      	mov	r0, r8
 8005b1e:	4649      	mov	r1, r9
 8005b20:	f7fb f80c 	bl	8000b3c <__aeabi_dcmpun>
 8005b24:	b110      	cbz	r0, 8005b2c <_printf_float+0xd8>
 8005b26:	4a8c      	ldr	r2, [pc, #560]	; (8005d58 <_printf_float+0x304>)
 8005b28:	4b8c      	ldr	r3, [pc, #560]	; (8005d5c <_printf_float+0x308>)
 8005b2a:	e7da      	b.n	8005ae2 <_printf_float+0x8e>
 8005b2c:	6861      	ldr	r1, [r4, #4]
 8005b2e:	1c4b      	adds	r3, r1, #1
 8005b30:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005b34:	a80a      	add	r0, sp, #40	; 0x28
 8005b36:	d13e      	bne.n	8005bb6 <_printf_float+0x162>
 8005b38:	2306      	movs	r3, #6
 8005b3a:	6063      	str	r3, [r4, #4]
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005b42:	ab09      	add	r3, sp, #36	; 0x24
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	ec49 8b10 	vmov	d0, r8, r9
 8005b4a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005b4e:	6022      	str	r2, [r4, #0]
 8005b50:	f8cd a004 	str.w	sl, [sp, #4]
 8005b54:	6861      	ldr	r1, [r4, #4]
 8005b56:	4628      	mov	r0, r5
 8005b58:	f7ff fee8 	bl	800592c <__cvt>
 8005b5c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005b60:	2b47      	cmp	r3, #71	; 0x47
 8005b62:	4680      	mov	r8, r0
 8005b64:	d109      	bne.n	8005b7a <_printf_float+0x126>
 8005b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b68:	1cd8      	adds	r0, r3, #3
 8005b6a:	db02      	blt.n	8005b72 <_printf_float+0x11e>
 8005b6c:	6862      	ldr	r2, [r4, #4]
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	dd47      	ble.n	8005c02 <_printf_float+0x1ae>
 8005b72:	f1aa 0a02 	sub.w	sl, sl, #2
 8005b76:	fa5f fa8a 	uxtb.w	sl, sl
 8005b7a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005b7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b80:	d824      	bhi.n	8005bcc <_printf_float+0x178>
 8005b82:	3901      	subs	r1, #1
 8005b84:	4652      	mov	r2, sl
 8005b86:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b8a:	9109      	str	r1, [sp, #36]	; 0x24
 8005b8c:	f7ff ff2f 	bl	80059ee <__exponent>
 8005b90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b92:	1813      	adds	r3, r2, r0
 8005b94:	2a01      	cmp	r2, #1
 8005b96:	4681      	mov	r9, r0
 8005b98:	6123      	str	r3, [r4, #16]
 8005b9a:	dc02      	bgt.n	8005ba2 <_printf_float+0x14e>
 8005b9c:	6822      	ldr	r2, [r4, #0]
 8005b9e:	07d1      	lsls	r1, r2, #31
 8005ba0:	d501      	bpl.n	8005ba6 <_printf_float+0x152>
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	6123      	str	r3, [r4, #16]
 8005ba6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d0a5      	beq.n	8005afa <_printf_float+0xa6>
 8005bae:	232d      	movs	r3, #45	; 0x2d
 8005bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bb4:	e7a1      	b.n	8005afa <_printf_float+0xa6>
 8005bb6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005bba:	f000 8177 	beq.w	8005eac <_printf_float+0x458>
 8005bbe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005bc2:	d1bb      	bne.n	8005b3c <_printf_float+0xe8>
 8005bc4:	2900      	cmp	r1, #0
 8005bc6:	d1b9      	bne.n	8005b3c <_printf_float+0xe8>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e7b6      	b.n	8005b3a <_printf_float+0xe6>
 8005bcc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005bd0:	d119      	bne.n	8005c06 <_printf_float+0x1b2>
 8005bd2:	2900      	cmp	r1, #0
 8005bd4:	6863      	ldr	r3, [r4, #4]
 8005bd6:	dd0c      	ble.n	8005bf2 <_printf_float+0x19e>
 8005bd8:	6121      	str	r1, [r4, #16]
 8005bda:	b913      	cbnz	r3, 8005be2 <_printf_float+0x18e>
 8005bdc:	6822      	ldr	r2, [r4, #0]
 8005bde:	07d2      	lsls	r2, r2, #31
 8005be0:	d502      	bpl.n	8005be8 <_printf_float+0x194>
 8005be2:	3301      	adds	r3, #1
 8005be4:	440b      	add	r3, r1
 8005be6:	6123      	str	r3, [r4, #16]
 8005be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bea:	65a3      	str	r3, [r4, #88]	; 0x58
 8005bec:	f04f 0900 	mov.w	r9, #0
 8005bf0:	e7d9      	b.n	8005ba6 <_printf_float+0x152>
 8005bf2:	b913      	cbnz	r3, 8005bfa <_printf_float+0x1a6>
 8005bf4:	6822      	ldr	r2, [r4, #0]
 8005bf6:	07d0      	lsls	r0, r2, #31
 8005bf8:	d501      	bpl.n	8005bfe <_printf_float+0x1aa>
 8005bfa:	3302      	adds	r3, #2
 8005bfc:	e7f3      	b.n	8005be6 <_printf_float+0x192>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e7f1      	b.n	8005be6 <_printf_float+0x192>
 8005c02:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005c06:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	db05      	blt.n	8005c1a <_printf_float+0x1c6>
 8005c0e:	6822      	ldr	r2, [r4, #0]
 8005c10:	6123      	str	r3, [r4, #16]
 8005c12:	07d1      	lsls	r1, r2, #31
 8005c14:	d5e8      	bpl.n	8005be8 <_printf_float+0x194>
 8005c16:	3301      	adds	r3, #1
 8005c18:	e7e5      	b.n	8005be6 <_printf_float+0x192>
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	bfd4      	ite	le
 8005c1e:	f1c3 0302 	rsble	r3, r3, #2
 8005c22:	2301      	movgt	r3, #1
 8005c24:	4413      	add	r3, r2
 8005c26:	e7de      	b.n	8005be6 <_printf_float+0x192>
 8005c28:	6823      	ldr	r3, [r4, #0]
 8005c2a:	055a      	lsls	r2, r3, #21
 8005c2c:	d407      	bmi.n	8005c3e <_printf_float+0x1ea>
 8005c2e:	6923      	ldr	r3, [r4, #16]
 8005c30:	4642      	mov	r2, r8
 8005c32:	4631      	mov	r1, r6
 8005c34:	4628      	mov	r0, r5
 8005c36:	47b8      	blx	r7
 8005c38:	3001      	adds	r0, #1
 8005c3a:	d12b      	bne.n	8005c94 <_printf_float+0x240>
 8005c3c:	e767      	b.n	8005b0e <_printf_float+0xba>
 8005c3e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005c42:	f240 80dc 	bls.w	8005dfe <_printf_float+0x3aa>
 8005c46:	2200      	movs	r2, #0
 8005c48:	2300      	movs	r3, #0
 8005c4a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c4e:	f7fa ff43 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c52:	2800      	cmp	r0, #0
 8005c54:	d033      	beq.n	8005cbe <_printf_float+0x26a>
 8005c56:	2301      	movs	r3, #1
 8005c58:	4a41      	ldr	r2, [pc, #260]	; (8005d60 <_printf_float+0x30c>)
 8005c5a:	4631      	mov	r1, r6
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	47b8      	blx	r7
 8005c60:	3001      	adds	r0, #1
 8005c62:	f43f af54 	beq.w	8005b0e <_printf_float+0xba>
 8005c66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	db02      	blt.n	8005c74 <_printf_float+0x220>
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	07d8      	lsls	r0, r3, #31
 8005c72:	d50f      	bpl.n	8005c94 <_printf_float+0x240>
 8005c74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c78:	4631      	mov	r1, r6
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	47b8      	blx	r7
 8005c7e:	3001      	adds	r0, #1
 8005c80:	f43f af45 	beq.w	8005b0e <_printf_float+0xba>
 8005c84:	f04f 0800 	mov.w	r8, #0
 8005c88:	f104 091a 	add.w	r9, r4, #26
 8005c8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	4543      	cmp	r3, r8
 8005c92:	dc09      	bgt.n	8005ca8 <_printf_float+0x254>
 8005c94:	6823      	ldr	r3, [r4, #0]
 8005c96:	079b      	lsls	r3, r3, #30
 8005c98:	f100 8103 	bmi.w	8005ea2 <_printf_float+0x44e>
 8005c9c:	68e0      	ldr	r0, [r4, #12]
 8005c9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ca0:	4298      	cmp	r0, r3
 8005ca2:	bfb8      	it	lt
 8005ca4:	4618      	movlt	r0, r3
 8005ca6:	e734      	b.n	8005b12 <_printf_float+0xbe>
 8005ca8:	2301      	movs	r3, #1
 8005caa:	464a      	mov	r2, r9
 8005cac:	4631      	mov	r1, r6
 8005cae:	4628      	mov	r0, r5
 8005cb0:	47b8      	blx	r7
 8005cb2:	3001      	adds	r0, #1
 8005cb4:	f43f af2b 	beq.w	8005b0e <_printf_float+0xba>
 8005cb8:	f108 0801 	add.w	r8, r8, #1
 8005cbc:	e7e6      	b.n	8005c8c <_printf_float+0x238>
 8005cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	dc2b      	bgt.n	8005d1c <_printf_float+0x2c8>
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	4a26      	ldr	r2, [pc, #152]	; (8005d60 <_printf_float+0x30c>)
 8005cc8:	4631      	mov	r1, r6
 8005cca:	4628      	mov	r0, r5
 8005ccc:	47b8      	blx	r7
 8005cce:	3001      	adds	r0, #1
 8005cd0:	f43f af1d 	beq.w	8005b0e <_printf_float+0xba>
 8005cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cd6:	b923      	cbnz	r3, 8005ce2 <_printf_float+0x28e>
 8005cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cda:	b913      	cbnz	r3, 8005ce2 <_printf_float+0x28e>
 8005cdc:	6823      	ldr	r3, [r4, #0]
 8005cde:	07d9      	lsls	r1, r3, #31
 8005ce0:	d5d8      	bpl.n	8005c94 <_printf_float+0x240>
 8005ce2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ce6:	4631      	mov	r1, r6
 8005ce8:	4628      	mov	r0, r5
 8005cea:	47b8      	blx	r7
 8005cec:	3001      	adds	r0, #1
 8005cee:	f43f af0e 	beq.w	8005b0e <_printf_float+0xba>
 8005cf2:	f04f 0900 	mov.w	r9, #0
 8005cf6:	f104 0a1a 	add.w	sl, r4, #26
 8005cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cfc:	425b      	negs	r3, r3
 8005cfe:	454b      	cmp	r3, r9
 8005d00:	dc01      	bgt.n	8005d06 <_printf_float+0x2b2>
 8005d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d04:	e794      	b.n	8005c30 <_printf_float+0x1dc>
 8005d06:	2301      	movs	r3, #1
 8005d08:	4652      	mov	r2, sl
 8005d0a:	4631      	mov	r1, r6
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	47b8      	blx	r7
 8005d10:	3001      	adds	r0, #1
 8005d12:	f43f aefc 	beq.w	8005b0e <_printf_float+0xba>
 8005d16:	f109 0901 	add.w	r9, r9, #1
 8005d1a:	e7ee      	b.n	8005cfa <_printf_float+0x2a6>
 8005d1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d20:	429a      	cmp	r2, r3
 8005d22:	bfa8      	it	ge
 8005d24:	461a      	movge	r2, r3
 8005d26:	2a00      	cmp	r2, #0
 8005d28:	4691      	mov	r9, r2
 8005d2a:	dd07      	ble.n	8005d3c <_printf_float+0x2e8>
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	4631      	mov	r1, r6
 8005d30:	4642      	mov	r2, r8
 8005d32:	4628      	mov	r0, r5
 8005d34:	47b8      	blx	r7
 8005d36:	3001      	adds	r0, #1
 8005d38:	f43f aee9 	beq.w	8005b0e <_printf_float+0xba>
 8005d3c:	f104 031a 	add.w	r3, r4, #26
 8005d40:	f04f 0b00 	mov.w	fp, #0
 8005d44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d48:	9306      	str	r3, [sp, #24]
 8005d4a:	e015      	b.n	8005d78 <_printf_float+0x324>
 8005d4c:	7fefffff 	.word	0x7fefffff
 8005d50:	0800c9e8 	.word	0x0800c9e8
 8005d54:	0800c9e4 	.word	0x0800c9e4
 8005d58:	0800c9f0 	.word	0x0800c9f0
 8005d5c:	0800c9ec 	.word	0x0800c9ec
 8005d60:	0800cbab 	.word	0x0800cbab
 8005d64:	2301      	movs	r3, #1
 8005d66:	9a06      	ldr	r2, [sp, #24]
 8005d68:	4631      	mov	r1, r6
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	47b8      	blx	r7
 8005d6e:	3001      	adds	r0, #1
 8005d70:	f43f aecd 	beq.w	8005b0e <_printf_float+0xba>
 8005d74:	f10b 0b01 	add.w	fp, fp, #1
 8005d78:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005d7c:	ebaa 0309 	sub.w	r3, sl, r9
 8005d80:	455b      	cmp	r3, fp
 8005d82:	dcef      	bgt.n	8005d64 <_printf_float+0x310>
 8005d84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	44d0      	add	r8, sl
 8005d8c:	db15      	blt.n	8005dba <_printf_float+0x366>
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	07da      	lsls	r2, r3, #31
 8005d92:	d412      	bmi.n	8005dba <_printf_float+0x366>
 8005d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d98:	eba3 020a 	sub.w	r2, r3, sl
 8005d9c:	eba3 0a01 	sub.w	sl, r3, r1
 8005da0:	4592      	cmp	sl, r2
 8005da2:	bfa8      	it	ge
 8005da4:	4692      	movge	sl, r2
 8005da6:	f1ba 0f00 	cmp.w	sl, #0
 8005daa:	dc0e      	bgt.n	8005dca <_printf_float+0x376>
 8005dac:	f04f 0800 	mov.w	r8, #0
 8005db0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005db4:	f104 091a 	add.w	r9, r4, #26
 8005db8:	e019      	b.n	8005dee <_printf_float+0x39a>
 8005dba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dbe:	4631      	mov	r1, r6
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	47b8      	blx	r7
 8005dc4:	3001      	adds	r0, #1
 8005dc6:	d1e5      	bne.n	8005d94 <_printf_float+0x340>
 8005dc8:	e6a1      	b.n	8005b0e <_printf_float+0xba>
 8005dca:	4653      	mov	r3, sl
 8005dcc:	4642      	mov	r2, r8
 8005dce:	4631      	mov	r1, r6
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	47b8      	blx	r7
 8005dd4:	3001      	adds	r0, #1
 8005dd6:	d1e9      	bne.n	8005dac <_printf_float+0x358>
 8005dd8:	e699      	b.n	8005b0e <_printf_float+0xba>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	464a      	mov	r2, r9
 8005dde:	4631      	mov	r1, r6
 8005de0:	4628      	mov	r0, r5
 8005de2:	47b8      	blx	r7
 8005de4:	3001      	adds	r0, #1
 8005de6:	f43f ae92 	beq.w	8005b0e <_printf_float+0xba>
 8005dea:	f108 0801 	add.w	r8, r8, #1
 8005dee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005df2:	1a9b      	subs	r3, r3, r2
 8005df4:	eba3 030a 	sub.w	r3, r3, sl
 8005df8:	4543      	cmp	r3, r8
 8005dfa:	dcee      	bgt.n	8005dda <_printf_float+0x386>
 8005dfc:	e74a      	b.n	8005c94 <_printf_float+0x240>
 8005dfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e00:	2a01      	cmp	r2, #1
 8005e02:	dc01      	bgt.n	8005e08 <_printf_float+0x3b4>
 8005e04:	07db      	lsls	r3, r3, #31
 8005e06:	d53a      	bpl.n	8005e7e <_printf_float+0x42a>
 8005e08:	2301      	movs	r3, #1
 8005e0a:	4642      	mov	r2, r8
 8005e0c:	4631      	mov	r1, r6
 8005e0e:	4628      	mov	r0, r5
 8005e10:	47b8      	blx	r7
 8005e12:	3001      	adds	r0, #1
 8005e14:	f43f ae7b 	beq.w	8005b0e <_printf_float+0xba>
 8005e18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e1c:	4631      	mov	r1, r6
 8005e1e:	4628      	mov	r0, r5
 8005e20:	47b8      	blx	r7
 8005e22:	3001      	adds	r0, #1
 8005e24:	f108 0801 	add.w	r8, r8, #1
 8005e28:	f43f ae71 	beq.w	8005b0e <_printf_float+0xba>
 8005e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f103 3aff 	add.w	sl, r3, #4294967295
 8005e34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f7fa fe4d 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e3e:	b9c8      	cbnz	r0, 8005e74 <_printf_float+0x420>
 8005e40:	4653      	mov	r3, sl
 8005e42:	4642      	mov	r2, r8
 8005e44:	4631      	mov	r1, r6
 8005e46:	4628      	mov	r0, r5
 8005e48:	47b8      	blx	r7
 8005e4a:	3001      	adds	r0, #1
 8005e4c:	d10e      	bne.n	8005e6c <_printf_float+0x418>
 8005e4e:	e65e      	b.n	8005b0e <_printf_float+0xba>
 8005e50:	2301      	movs	r3, #1
 8005e52:	4652      	mov	r2, sl
 8005e54:	4631      	mov	r1, r6
 8005e56:	4628      	mov	r0, r5
 8005e58:	47b8      	blx	r7
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	f43f ae57 	beq.w	8005b0e <_printf_float+0xba>
 8005e60:	f108 0801 	add.w	r8, r8, #1
 8005e64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e66:	3b01      	subs	r3, #1
 8005e68:	4543      	cmp	r3, r8
 8005e6a:	dcf1      	bgt.n	8005e50 <_printf_float+0x3fc>
 8005e6c:	464b      	mov	r3, r9
 8005e6e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005e72:	e6de      	b.n	8005c32 <_printf_float+0x1de>
 8005e74:	f04f 0800 	mov.w	r8, #0
 8005e78:	f104 0a1a 	add.w	sl, r4, #26
 8005e7c:	e7f2      	b.n	8005e64 <_printf_float+0x410>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e7df      	b.n	8005e42 <_printf_float+0x3ee>
 8005e82:	2301      	movs	r3, #1
 8005e84:	464a      	mov	r2, r9
 8005e86:	4631      	mov	r1, r6
 8005e88:	4628      	mov	r0, r5
 8005e8a:	47b8      	blx	r7
 8005e8c:	3001      	adds	r0, #1
 8005e8e:	f43f ae3e 	beq.w	8005b0e <_printf_float+0xba>
 8005e92:	f108 0801 	add.w	r8, r8, #1
 8005e96:	68e3      	ldr	r3, [r4, #12]
 8005e98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e9a:	1a9b      	subs	r3, r3, r2
 8005e9c:	4543      	cmp	r3, r8
 8005e9e:	dcf0      	bgt.n	8005e82 <_printf_float+0x42e>
 8005ea0:	e6fc      	b.n	8005c9c <_printf_float+0x248>
 8005ea2:	f04f 0800 	mov.w	r8, #0
 8005ea6:	f104 0919 	add.w	r9, r4, #25
 8005eaa:	e7f4      	b.n	8005e96 <_printf_float+0x442>
 8005eac:	2900      	cmp	r1, #0
 8005eae:	f43f ae8b 	beq.w	8005bc8 <_printf_float+0x174>
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005eb8:	ab09      	add	r3, sp, #36	; 0x24
 8005eba:	9300      	str	r3, [sp, #0]
 8005ebc:	ec49 8b10 	vmov	d0, r8, r9
 8005ec0:	6022      	str	r2, [r4, #0]
 8005ec2:	f8cd a004 	str.w	sl, [sp, #4]
 8005ec6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005eca:	4628      	mov	r0, r5
 8005ecc:	f7ff fd2e 	bl	800592c <__cvt>
 8005ed0:	4680      	mov	r8, r0
 8005ed2:	e648      	b.n	8005b66 <_printf_float+0x112>

08005ed4 <_printf_common>:
 8005ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ed8:	4691      	mov	r9, r2
 8005eda:	461f      	mov	r7, r3
 8005edc:	688a      	ldr	r2, [r1, #8]
 8005ede:	690b      	ldr	r3, [r1, #16]
 8005ee0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	bfb8      	it	lt
 8005ee8:	4613      	movlt	r3, r2
 8005eea:	f8c9 3000 	str.w	r3, [r9]
 8005eee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ef2:	4606      	mov	r6, r0
 8005ef4:	460c      	mov	r4, r1
 8005ef6:	b112      	cbz	r2, 8005efe <_printf_common+0x2a>
 8005ef8:	3301      	adds	r3, #1
 8005efa:	f8c9 3000 	str.w	r3, [r9]
 8005efe:	6823      	ldr	r3, [r4, #0]
 8005f00:	0699      	lsls	r1, r3, #26
 8005f02:	bf42      	ittt	mi
 8005f04:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005f08:	3302      	addmi	r3, #2
 8005f0a:	f8c9 3000 	strmi.w	r3, [r9]
 8005f0e:	6825      	ldr	r5, [r4, #0]
 8005f10:	f015 0506 	ands.w	r5, r5, #6
 8005f14:	d107      	bne.n	8005f26 <_printf_common+0x52>
 8005f16:	f104 0a19 	add.w	sl, r4, #25
 8005f1a:	68e3      	ldr	r3, [r4, #12]
 8005f1c:	f8d9 2000 	ldr.w	r2, [r9]
 8005f20:	1a9b      	subs	r3, r3, r2
 8005f22:	42ab      	cmp	r3, r5
 8005f24:	dc28      	bgt.n	8005f78 <_printf_common+0xa4>
 8005f26:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005f2a:	6822      	ldr	r2, [r4, #0]
 8005f2c:	3300      	adds	r3, #0
 8005f2e:	bf18      	it	ne
 8005f30:	2301      	movne	r3, #1
 8005f32:	0692      	lsls	r2, r2, #26
 8005f34:	d42d      	bmi.n	8005f92 <_printf_common+0xbe>
 8005f36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f3a:	4639      	mov	r1, r7
 8005f3c:	4630      	mov	r0, r6
 8005f3e:	47c0      	blx	r8
 8005f40:	3001      	adds	r0, #1
 8005f42:	d020      	beq.n	8005f86 <_printf_common+0xb2>
 8005f44:	6823      	ldr	r3, [r4, #0]
 8005f46:	68e5      	ldr	r5, [r4, #12]
 8005f48:	f8d9 2000 	ldr.w	r2, [r9]
 8005f4c:	f003 0306 	and.w	r3, r3, #6
 8005f50:	2b04      	cmp	r3, #4
 8005f52:	bf08      	it	eq
 8005f54:	1aad      	subeq	r5, r5, r2
 8005f56:	68a3      	ldr	r3, [r4, #8]
 8005f58:	6922      	ldr	r2, [r4, #16]
 8005f5a:	bf0c      	ite	eq
 8005f5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f60:	2500      	movne	r5, #0
 8005f62:	4293      	cmp	r3, r2
 8005f64:	bfc4      	itt	gt
 8005f66:	1a9b      	subgt	r3, r3, r2
 8005f68:	18ed      	addgt	r5, r5, r3
 8005f6a:	f04f 0900 	mov.w	r9, #0
 8005f6e:	341a      	adds	r4, #26
 8005f70:	454d      	cmp	r5, r9
 8005f72:	d11a      	bne.n	8005faa <_printf_common+0xd6>
 8005f74:	2000      	movs	r0, #0
 8005f76:	e008      	b.n	8005f8a <_printf_common+0xb6>
 8005f78:	2301      	movs	r3, #1
 8005f7a:	4652      	mov	r2, sl
 8005f7c:	4639      	mov	r1, r7
 8005f7e:	4630      	mov	r0, r6
 8005f80:	47c0      	blx	r8
 8005f82:	3001      	adds	r0, #1
 8005f84:	d103      	bne.n	8005f8e <_printf_common+0xba>
 8005f86:	f04f 30ff 	mov.w	r0, #4294967295
 8005f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f8e:	3501      	adds	r5, #1
 8005f90:	e7c3      	b.n	8005f1a <_printf_common+0x46>
 8005f92:	18e1      	adds	r1, r4, r3
 8005f94:	1c5a      	adds	r2, r3, #1
 8005f96:	2030      	movs	r0, #48	; 0x30
 8005f98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f9c:	4422      	add	r2, r4
 8005f9e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fa2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fa6:	3302      	adds	r3, #2
 8005fa8:	e7c5      	b.n	8005f36 <_printf_common+0x62>
 8005faa:	2301      	movs	r3, #1
 8005fac:	4622      	mov	r2, r4
 8005fae:	4639      	mov	r1, r7
 8005fb0:	4630      	mov	r0, r6
 8005fb2:	47c0      	blx	r8
 8005fb4:	3001      	adds	r0, #1
 8005fb6:	d0e6      	beq.n	8005f86 <_printf_common+0xb2>
 8005fb8:	f109 0901 	add.w	r9, r9, #1
 8005fbc:	e7d8      	b.n	8005f70 <_printf_common+0x9c>
	...

08005fc0 <_printf_i>:
 8005fc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005fc4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005fc8:	460c      	mov	r4, r1
 8005fca:	7e09      	ldrb	r1, [r1, #24]
 8005fcc:	b085      	sub	sp, #20
 8005fce:	296e      	cmp	r1, #110	; 0x6e
 8005fd0:	4617      	mov	r7, r2
 8005fd2:	4606      	mov	r6, r0
 8005fd4:	4698      	mov	r8, r3
 8005fd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fd8:	f000 80b3 	beq.w	8006142 <_printf_i+0x182>
 8005fdc:	d822      	bhi.n	8006024 <_printf_i+0x64>
 8005fde:	2963      	cmp	r1, #99	; 0x63
 8005fe0:	d036      	beq.n	8006050 <_printf_i+0x90>
 8005fe2:	d80a      	bhi.n	8005ffa <_printf_i+0x3a>
 8005fe4:	2900      	cmp	r1, #0
 8005fe6:	f000 80b9 	beq.w	800615c <_printf_i+0x19c>
 8005fea:	2958      	cmp	r1, #88	; 0x58
 8005fec:	f000 8083 	beq.w	80060f6 <_printf_i+0x136>
 8005ff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ff4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005ff8:	e032      	b.n	8006060 <_printf_i+0xa0>
 8005ffa:	2964      	cmp	r1, #100	; 0x64
 8005ffc:	d001      	beq.n	8006002 <_printf_i+0x42>
 8005ffe:	2969      	cmp	r1, #105	; 0x69
 8006000:	d1f6      	bne.n	8005ff0 <_printf_i+0x30>
 8006002:	6820      	ldr	r0, [r4, #0]
 8006004:	6813      	ldr	r3, [r2, #0]
 8006006:	0605      	lsls	r5, r0, #24
 8006008:	f103 0104 	add.w	r1, r3, #4
 800600c:	d52a      	bpl.n	8006064 <_printf_i+0xa4>
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6011      	str	r1, [r2, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	da03      	bge.n	800601e <_printf_i+0x5e>
 8006016:	222d      	movs	r2, #45	; 0x2d
 8006018:	425b      	negs	r3, r3
 800601a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800601e:	486f      	ldr	r0, [pc, #444]	; (80061dc <_printf_i+0x21c>)
 8006020:	220a      	movs	r2, #10
 8006022:	e039      	b.n	8006098 <_printf_i+0xd8>
 8006024:	2973      	cmp	r1, #115	; 0x73
 8006026:	f000 809d 	beq.w	8006164 <_printf_i+0x1a4>
 800602a:	d808      	bhi.n	800603e <_printf_i+0x7e>
 800602c:	296f      	cmp	r1, #111	; 0x6f
 800602e:	d020      	beq.n	8006072 <_printf_i+0xb2>
 8006030:	2970      	cmp	r1, #112	; 0x70
 8006032:	d1dd      	bne.n	8005ff0 <_printf_i+0x30>
 8006034:	6823      	ldr	r3, [r4, #0]
 8006036:	f043 0320 	orr.w	r3, r3, #32
 800603a:	6023      	str	r3, [r4, #0]
 800603c:	e003      	b.n	8006046 <_printf_i+0x86>
 800603e:	2975      	cmp	r1, #117	; 0x75
 8006040:	d017      	beq.n	8006072 <_printf_i+0xb2>
 8006042:	2978      	cmp	r1, #120	; 0x78
 8006044:	d1d4      	bne.n	8005ff0 <_printf_i+0x30>
 8006046:	2378      	movs	r3, #120	; 0x78
 8006048:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800604c:	4864      	ldr	r0, [pc, #400]	; (80061e0 <_printf_i+0x220>)
 800604e:	e055      	b.n	80060fc <_printf_i+0x13c>
 8006050:	6813      	ldr	r3, [r2, #0]
 8006052:	1d19      	adds	r1, r3, #4
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6011      	str	r1, [r2, #0]
 8006058:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800605c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006060:	2301      	movs	r3, #1
 8006062:	e08c      	b.n	800617e <_printf_i+0x1be>
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6011      	str	r1, [r2, #0]
 8006068:	f010 0f40 	tst.w	r0, #64	; 0x40
 800606c:	bf18      	it	ne
 800606e:	b21b      	sxthne	r3, r3
 8006070:	e7cf      	b.n	8006012 <_printf_i+0x52>
 8006072:	6813      	ldr	r3, [r2, #0]
 8006074:	6825      	ldr	r5, [r4, #0]
 8006076:	1d18      	adds	r0, r3, #4
 8006078:	6010      	str	r0, [r2, #0]
 800607a:	0628      	lsls	r0, r5, #24
 800607c:	d501      	bpl.n	8006082 <_printf_i+0xc2>
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	e002      	b.n	8006088 <_printf_i+0xc8>
 8006082:	0668      	lsls	r0, r5, #25
 8006084:	d5fb      	bpl.n	800607e <_printf_i+0xbe>
 8006086:	881b      	ldrh	r3, [r3, #0]
 8006088:	4854      	ldr	r0, [pc, #336]	; (80061dc <_printf_i+0x21c>)
 800608a:	296f      	cmp	r1, #111	; 0x6f
 800608c:	bf14      	ite	ne
 800608e:	220a      	movne	r2, #10
 8006090:	2208      	moveq	r2, #8
 8006092:	2100      	movs	r1, #0
 8006094:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006098:	6865      	ldr	r5, [r4, #4]
 800609a:	60a5      	str	r5, [r4, #8]
 800609c:	2d00      	cmp	r5, #0
 800609e:	f2c0 8095 	blt.w	80061cc <_printf_i+0x20c>
 80060a2:	6821      	ldr	r1, [r4, #0]
 80060a4:	f021 0104 	bic.w	r1, r1, #4
 80060a8:	6021      	str	r1, [r4, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d13d      	bne.n	800612a <_printf_i+0x16a>
 80060ae:	2d00      	cmp	r5, #0
 80060b0:	f040 808e 	bne.w	80061d0 <_printf_i+0x210>
 80060b4:	4665      	mov	r5, ip
 80060b6:	2a08      	cmp	r2, #8
 80060b8:	d10b      	bne.n	80060d2 <_printf_i+0x112>
 80060ba:	6823      	ldr	r3, [r4, #0]
 80060bc:	07db      	lsls	r3, r3, #31
 80060be:	d508      	bpl.n	80060d2 <_printf_i+0x112>
 80060c0:	6923      	ldr	r3, [r4, #16]
 80060c2:	6862      	ldr	r2, [r4, #4]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	bfde      	ittt	le
 80060c8:	2330      	movle	r3, #48	; 0x30
 80060ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80060ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80060d2:	ebac 0305 	sub.w	r3, ip, r5
 80060d6:	6123      	str	r3, [r4, #16]
 80060d8:	f8cd 8000 	str.w	r8, [sp]
 80060dc:	463b      	mov	r3, r7
 80060de:	aa03      	add	r2, sp, #12
 80060e0:	4621      	mov	r1, r4
 80060e2:	4630      	mov	r0, r6
 80060e4:	f7ff fef6 	bl	8005ed4 <_printf_common>
 80060e8:	3001      	adds	r0, #1
 80060ea:	d14d      	bne.n	8006188 <_printf_i+0x1c8>
 80060ec:	f04f 30ff 	mov.w	r0, #4294967295
 80060f0:	b005      	add	sp, #20
 80060f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80060f6:	4839      	ldr	r0, [pc, #228]	; (80061dc <_printf_i+0x21c>)
 80060f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80060fc:	6813      	ldr	r3, [r2, #0]
 80060fe:	6821      	ldr	r1, [r4, #0]
 8006100:	1d1d      	adds	r5, r3, #4
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6015      	str	r5, [r2, #0]
 8006106:	060a      	lsls	r2, r1, #24
 8006108:	d50b      	bpl.n	8006122 <_printf_i+0x162>
 800610a:	07ca      	lsls	r2, r1, #31
 800610c:	bf44      	itt	mi
 800610e:	f041 0120 	orrmi.w	r1, r1, #32
 8006112:	6021      	strmi	r1, [r4, #0]
 8006114:	b91b      	cbnz	r3, 800611e <_printf_i+0x15e>
 8006116:	6822      	ldr	r2, [r4, #0]
 8006118:	f022 0220 	bic.w	r2, r2, #32
 800611c:	6022      	str	r2, [r4, #0]
 800611e:	2210      	movs	r2, #16
 8006120:	e7b7      	b.n	8006092 <_printf_i+0xd2>
 8006122:	064d      	lsls	r5, r1, #25
 8006124:	bf48      	it	mi
 8006126:	b29b      	uxthmi	r3, r3
 8006128:	e7ef      	b.n	800610a <_printf_i+0x14a>
 800612a:	4665      	mov	r5, ip
 800612c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006130:	fb02 3311 	mls	r3, r2, r1, r3
 8006134:	5cc3      	ldrb	r3, [r0, r3]
 8006136:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800613a:	460b      	mov	r3, r1
 800613c:	2900      	cmp	r1, #0
 800613e:	d1f5      	bne.n	800612c <_printf_i+0x16c>
 8006140:	e7b9      	b.n	80060b6 <_printf_i+0xf6>
 8006142:	6813      	ldr	r3, [r2, #0]
 8006144:	6825      	ldr	r5, [r4, #0]
 8006146:	6961      	ldr	r1, [r4, #20]
 8006148:	1d18      	adds	r0, r3, #4
 800614a:	6010      	str	r0, [r2, #0]
 800614c:	0628      	lsls	r0, r5, #24
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	d501      	bpl.n	8006156 <_printf_i+0x196>
 8006152:	6019      	str	r1, [r3, #0]
 8006154:	e002      	b.n	800615c <_printf_i+0x19c>
 8006156:	066a      	lsls	r2, r5, #25
 8006158:	d5fb      	bpl.n	8006152 <_printf_i+0x192>
 800615a:	8019      	strh	r1, [r3, #0]
 800615c:	2300      	movs	r3, #0
 800615e:	6123      	str	r3, [r4, #16]
 8006160:	4665      	mov	r5, ip
 8006162:	e7b9      	b.n	80060d8 <_printf_i+0x118>
 8006164:	6813      	ldr	r3, [r2, #0]
 8006166:	1d19      	adds	r1, r3, #4
 8006168:	6011      	str	r1, [r2, #0]
 800616a:	681d      	ldr	r5, [r3, #0]
 800616c:	6862      	ldr	r2, [r4, #4]
 800616e:	2100      	movs	r1, #0
 8006170:	4628      	mov	r0, r5
 8006172:	f7fa f83d 	bl	80001f0 <memchr>
 8006176:	b108      	cbz	r0, 800617c <_printf_i+0x1bc>
 8006178:	1b40      	subs	r0, r0, r5
 800617a:	6060      	str	r0, [r4, #4]
 800617c:	6863      	ldr	r3, [r4, #4]
 800617e:	6123      	str	r3, [r4, #16]
 8006180:	2300      	movs	r3, #0
 8006182:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006186:	e7a7      	b.n	80060d8 <_printf_i+0x118>
 8006188:	6923      	ldr	r3, [r4, #16]
 800618a:	462a      	mov	r2, r5
 800618c:	4639      	mov	r1, r7
 800618e:	4630      	mov	r0, r6
 8006190:	47c0      	blx	r8
 8006192:	3001      	adds	r0, #1
 8006194:	d0aa      	beq.n	80060ec <_printf_i+0x12c>
 8006196:	6823      	ldr	r3, [r4, #0]
 8006198:	079b      	lsls	r3, r3, #30
 800619a:	d413      	bmi.n	80061c4 <_printf_i+0x204>
 800619c:	68e0      	ldr	r0, [r4, #12]
 800619e:	9b03      	ldr	r3, [sp, #12]
 80061a0:	4298      	cmp	r0, r3
 80061a2:	bfb8      	it	lt
 80061a4:	4618      	movlt	r0, r3
 80061a6:	e7a3      	b.n	80060f0 <_printf_i+0x130>
 80061a8:	2301      	movs	r3, #1
 80061aa:	464a      	mov	r2, r9
 80061ac:	4639      	mov	r1, r7
 80061ae:	4630      	mov	r0, r6
 80061b0:	47c0      	blx	r8
 80061b2:	3001      	adds	r0, #1
 80061b4:	d09a      	beq.n	80060ec <_printf_i+0x12c>
 80061b6:	3501      	adds	r5, #1
 80061b8:	68e3      	ldr	r3, [r4, #12]
 80061ba:	9a03      	ldr	r2, [sp, #12]
 80061bc:	1a9b      	subs	r3, r3, r2
 80061be:	42ab      	cmp	r3, r5
 80061c0:	dcf2      	bgt.n	80061a8 <_printf_i+0x1e8>
 80061c2:	e7eb      	b.n	800619c <_printf_i+0x1dc>
 80061c4:	2500      	movs	r5, #0
 80061c6:	f104 0919 	add.w	r9, r4, #25
 80061ca:	e7f5      	b.n	80061b8 <_printf_i+0x1f8>
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1ac      	bne.n	800612a <_printf_i+0x16a>
 80061d0:	7803      	ldrb	r3, [r0, #0]
 80061d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061da:	e76c      	b.n	80060b6 <_printf_i+0xf6>
 80061dc:	0800c9f4 	.word	0x0800c9f4
 80061e0:	0800ca05 	.word	0x0800ca05

080061e4 <_scanf_float>:
 80061e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e8:	469a      	mov	sl, r3
 80061ea:	688b      	ldr	r3, [r1, #8]
 80061ec:	4616      	mov	r6, r2
 80061ee:	1e5a      	subs	r2, r3, #1
 80061f0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80061f4:	b087      	sub	sp, #28
 80061f6:	bf83      	ittte	hi
 80061f8:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80061fc:	189b      	addhi	r3, r3, r2
 80061fe:	9301      	strhi	r3, [sp, #4]
 8006200:	2300      	movls	r3, #0
 8006202:	bf86      	itte	hi
 8006204:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006208:	608b      	strhi	r3, [r1, #8]
 800620a:	9301      	strls	r3, [sp, #4]
 800620c:	680b      	ldr	r3, [r1, #0]
 800620e:	4688      	mov	r8, r1
 8006210:	f04f 0b00 	mov.w	fp, #0
 8006214:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006218:	f848 3b1c 	str.w	r3, [r8], #28
 800621c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8006220:	4607      	mov	r7, r0
 8006222:	460c      	mov	r4, r1
 8006224:	4645      	mov	r5, r8
 8006226:	465a      	mov	r2, fp
 8006228:	46d9      	mov	r9, fp
 800622a:	f8cd b008 	str.w	fp, [sp, #8]
 800622e:	68a1      	ldr	r1, [r4, #8]
 8006230:	b181      	cbz	r1, 8006254 <_scanf_float+0x70>
 8006232:	6833      	ldr	r3, [r6, #0]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	2b49      	cmp	r3, #73	; 0x49
 8006238:	d071      	beq.n	800631e <_scanf_float+0x13a>
 800623a:	d84d      	bhi.n	80062d8 <_scanf_float+0xf4>
 800623c:	2b39      	cmp	r3, #57	; 0x39
 800623e:	d840      	bhi.n	80062c2 <_scanf_float+0xde>
 8006240:	2b31      	cmp	r3, #49	; 0x31
 8006242:	f080 8088 	bcs.w	8006356 <_scanf_float+0x172>
 8006246:	2b2d      	cmp	r3, #45	; 0x2d
 8006248:	f000 8090 	beq.w	800636c <_scanf_float+0x188>
 800624c:	d815      	bhi.n	800627a <_scanf_float+0x96>
 800624e:	2b2b      	cmp	r3, #43	; 0x2b
 8006250:	f000 808c 	beq.w	800636c <_scanf_float+0x188>
 8006254:	f1b9 0f00 	cmp.w	r9, #0
 8006258:	d003      	beq.n	8006262 <_scanf_float+0x7e>
 800625a:	6823      	ldr	r3, [r4, #0]
 800625c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006260:	6023      	str	r3, [r4, #0]
 8006262:	3a01      	subs	r2, #1
 8006264:	2a01      	cmp	r2, #1
 8006266:	f200 80ea 	bhi.w	800643e <_scanf_float+0x25a>
 800626a:	4545      	cmp	r5, r8
 800626c:	f200 80dc 	bhi.w	8006428 <_scanf_float+0x244>
 8006270:	2601      	movs	r6, #1
 8006272:	4630      	mov	r0, r6
 8006274:	b007      	add	sp, #28
 8006276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800627a:	2b2e      	cmp	r3, #46	; 0x2e
 800627c:	f000 809f 	beq.w	80063be <_scanf_float+0x1da>
 8006280:	2b30      	cmp	r3, #48	; 0x30
 8006282:	d1e7      	bne.n	8006254 <_scanf_float+0x70>
 8006284:	6820      	ldr	r0, [r4, #0]
 8006286:	f410 7f80 	tst.w	r0, #256	; 0x100
 800628a:	d064      	beq.n	8006356 <_scanf_float+0x172>
 800628c:	9b01      	ldr	r3, [sp, #4]
 800628e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8006292:	6020      	str	r0, [r4, #0]
 8006294:	f109 0901 	add.w	r9, r9, #1
 8006298:	b11b      	cbz	r3, 80062a2 <_scanf_float+0xbe>
 800629a:	3b01      	subs	r3, #1
 800629c:	3101      	adds	r1, #1
 800629e:	9301      	str	r3, [sp, #4]
 80062a0:	60a1      	str	r1, [r4, #8]
 80062a2:	68a3      	ldr	r3, [r4, #8]
 80062a4:	3b01      	subs	r3, #1
 80062a6:	60a3      	str	r3, [r4, #8]
 80062a8:	6923      	ldr	r3, [r4, #16]
 80062aa:	3301      	adds	r3, #1
 80062ac:	6123      	str	r3, [r4, #16]
 80062ae:	6873      	ldr	r3, [r6, #4]
 80062b0:	3b01      	subs	r3, #1
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	6073      	str	r3, [r6, #4]
 80062b6:	f340 80ac 	ble.w	8006412 <_scanf_float+0x22e>
 80062ba:	6833      	ldr	r3, [r6, #0]
 80062bc:	3301      	adds	r3, #1
 80062be:	6033      	str	r3, [r6, #0]
 80062c0:	e7b5      	b.n	800622e <_scanf_float+0x4a>
 80062c2:	2b45      	cmp	r3, #69	; 0x45
 80062c4:	f000 8085 	beq.w	80063d2 <_scanf_float+0x1ee>
 80062c8:	2b46      	cmp	r3, #70	; 0x46
 80062ca:	d06a      	beq.n	80063a2 <_scanf_float+0x1be>
 80062cc:	2b41      	cmp	r3, #65	; 0x41
 80062ce:	d1c1      	bne.n	8006254 <_scanf_float+0x70>
 80062d0:	2a01      	cmp	r2, #1
 80062d2:	d1bf      	bne.n	8006254 <_scanf_float+0x70>
 80062d4:	2202      	movs	r2, #2
 80062d6:	e046      	b.n	8006366 <_scanf_float+0x182>
 80062d8:	2b65      	cmp	r3, #101	; 0x65
 80062da:	d07a      	beq.n	80063d2 <_scanf_float+0x1ee>
 80062dc:	d818      	bhi.n	8006310 <_scanf_float+0x12c>
 80062de:	2b54      	cmp	r3, #84	; 0x54
 80062e0:	d066      	beq.n	80063b0 <_scanf_float+0x1cc>
 80062e2:	d811      	bhi.n	8006308 <_scanf_float+0x124>
 80062e4:	2b4e      	cmp	r3, #78	; 0x4e
 80062e6:	d1b5      	bne.n	8006254 <_scanf_float+0x70>
 80062e8:	2a00      	cmp	r2, #0
 80062ea:	d146      	bne.n	800637a <_scanf_float+0x196>
 80062ec:	f1b9 0f00 	cmp.w	r9, #0
 80062f0:	d145      	bne.n	800637e <_scanf_float+0x19a>
 80062f2:	6821      	ldr	r1, [r4, #0]
 80062f4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80062f8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80062fc:	d13f      	bne.n	800637e <_scanf_float+0x19a>
 80062fe:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006302:	6021      	str	r1, [r4, #0]
 8006304:	2201      	movs	r2, #1
 8006306:	e02e      	b.n	8006366 <_scanf_float+0x182>
 8006308:	2b59      	cmp	r3, #89	; 0x59
 800630a:	d01e      	beq.n	800634a <_scanf_float+0x166>
 800630c:	2b61      	cmp	r3, #97	; 0x61
 800630e:	e7de      	b.n	80062ce <_scanf_float+0xea>
 8006310:	2b6e      	cmp	r3, #110	; 0x6e
 8006312:	d0e9      	beq.n	80062e8 <_scanf_float+0x104>
 8006314:	d815      	bhi.n	8006342 <_scanf_float+0x15e>
 8006316:	2b66      	cmp	r3, #102	; 0x66
 8006318:	d043      	beq.n	80063a2 <_scanf_float+0x1be>
 800631a:	2b69      	cmp	r3, #105	; 0x69
 800631c:	d19a      	bne.n	8006254 <_scanf_float+0x70>
 800631e:	f1bb 0f00 	cmp.w	fp, #0
 8006322:	d138      	bne.n	8006396 <_scanf_float+0x1b2>
 8006324:	f1b9 0f00 	cmp.w	r9, #0
 8006328:	d197      	bne.n	800625a <_scanf_float+0x76>
 800632a:	6821      	ldr	r1, [r4, #0]
 800632c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006330:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006334:	d195      	bne.n	8006262 <_scanf_float+0x7e>
 8006336:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800633a:	6021      	str	r1, [r4, #0]
 800633c:	f04f 0b01 	mov.w	fp, #1
 8006340:	e011      	b.n	8006366 <_scanf_float+0x182>
 8006342:	2b74      	cmp	r3, #116	; 0x74
 8006344:	d034      	beq.n	80063b0 <_scanf_float+0x1cc>
 8006346:	2b79      	cmp	r3, #121	; 0x79
 8006348:	d184      	bne.n	8006254 <_scanf_float+0x70>
 800634a:	f1bb 0f07 	cmp.w	fp, #7
 800634e:	d181      	bne.n	8006254 <_scanf_float+0x70>
 8006350:	f04f 0b08 	mov.w	fp, #8
 8006354:	e007      	b.n	8006366 <_scanf_float+0x182>
 8006356:	eb12 0f0b 	cmn.w	r2, fp
 800635a:	f47f af7b 	bne.w	8006254 <_scanf_float+0x70>
 800635e:	6821      	ldr	r1, [r4, #0]
 8006360:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8006364:	6021      	str	r1, [r4, #0]
 8006366:	702b      	strb	r3, [r5, #0]
 8006368:	3501      	adds	r5, #1
 800636a:	e79a      	b.n	80062a2 <_scanf_float+0xbe>
 800636c:	6821      	ldr	r1, [r4, #0]
 800636e:	0608      	lsls	r0, r1, #24
 8006370:	f57f af70 	bpl.w	8006254 <_scanf_float+0x70>
 8006374:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006378:	e7f4      	b.n	8006364 <_scanf_float+0x180>
 800637a:	2a02      	cmp	r2, #2
 800637c:	d047      	beq.n	800640e <_scanf_float+0x22a>
 800637e:	f1bb 0f01 	cmp.w	fp, #1
 8006382:	d003      	beq.n	800638c <_scanf_float+0x1a8>
 8006384:	f1bb 0f04 	cmp.w	fp, #4
 8006388:	f47f af64 	bne.w	8006254 <_scanf_float+0x70>
 800638c:	f10b 0b01 	add.w	fp, fp, #1
 8006390:	fa5f fb8b 	uxtb.w	fp, fp
 8006394:	e7e7      	b.n	8006366 <_scanf_float+0x182>
 8006396:	f1bb 0f03 	cmp.w	fp, #3
 800639a:	d0f7      	beq.n	800638c <_scanf_float+0x1a8>
 800639c:	f1bb 0f05 	cmp.w	fp, #5
 80063a0:	e7f2      	b.n	8006388 <_scanf_float+0x1a4>
 80063a2:	f1bb 0f02 	cmp.w	fp, #2
 80063a6:	f47f af55 	bne.w	8006254 <_scanf_float+0x70>
 80063aa:	f04f 0b03 	mov.w	fp, #3
 80063ae:	e7da      	b.n	8006366 <_scanf_float+0x182>
 80063b0:	f1bb 0f06 	cmp.w	fp, #6
 80063b4:	f47f af4e 	bne.w	8006254 <_scanf_float+0x70>
 80063b8:	f04f 0b07 	mov.w	fp, #7
 80063bc:	e7d3      	b.n	8006366 <_scanf_float+0x182>
 80063be:	6821      	ldr	r1, [r4, #0]
 80063c0:	0588      	lsls	r0, r1, #22
 80063c2:	f57f af47 	bpl.w	8006254 <_scanf_float+0x70>
 80063c6:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80063ca:	6021      	str	r1, [r4, #0]
 80063cc:	f8cd 9008 	str.w	r9, [sp, #8]
 80063d0:	e7c9      	b.n	8006366 <_scanf_float+0x182>
 80063d2:	6821      	ldr	r1, [r4, #0]
 80063d4:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80063d8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80063dc:	d006      	beq.n	80063ec <_scanf_float+0x208>
 80063de:	0548      	lsls	r0, r1, #21
 80063e0:	f57f af38 	bpl.w	8006254 <_scanf_float+0x70>
 80063e4:	f1b9 0f00 	cmp.w	r9, #0
 80063e8:	f43f af3b 	beq.w	8006262 <_scanf_float+0x7e>
 80063ec:	0588      	lsls	r0, r1, #22
 80063ee:	bf58      	it	pl
 80063f0:	9802      	ldrpl	r0, [sp, #8]
 80063f2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80063f6:	bf58      	it	pl
 80063f8:	eba9 0000 	subpl.w	r0, r9, r0
 80063fc:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8006400:	bf58      	it	pl
 8006402:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8006406:	6021      	str	r1, [r4, #0]
 8006408:	f04f 0900 	mov.w	r9, #0
 800640c:	e7ab      	b.n	8006366 <_scanf_float+0x182>
 800640e:	2203      	movs	r2, #3
 8006410:	e7a9      	b.n	8006366 <_scanf_float+0x182>
 8006412:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006416:	9205      	str	r2, [sp, #20]
 8006418:	4631      	mov	r1, r6
 800641a:	4638      	mov	r0, r7
 800641c:	4798      	blx	r3
 800641e:	9a05      	ldr	r2, [sp, #20]
 8006420:	2800      	cmp	r0, #0
 8006422:	f43f af04 	beq.w	800622e <_scanf_float+0x4a>
 8006426:	e715      	b.n	8006254 <_scanf_float+0x70>
 8006428:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800642c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006430:	4632      	mov	r2, r6
 8006432:	4638      	mov	r0, r7
 8006434:	4798      	blx	r3
 8006436:	6923      	ldr	r3, [r4, #16]
 8006438:	3b01      	subs	r3, #1
 800643a:	6123      	str	r3, [r4, #16]
 800643c:	e715      	b.n	800626a <_scanf_float+0x86>
 800643e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006442:	2b06      	cmp	r3, #6
 8006444:	d80a      	bhi.n	800645c <_scanf_float+0x278>
 8006446:	f1bb 0f02 	cmp.w	fp, #2
 800644a:	d968      	bls.n	800651e <_scanf_float+0x33a>
 800644c:	f1ab 0b03 	sub.w	fp, fp, #3
 8006450:	fa5f fb8b 	uxtb.w	fp, fp
 8006454:	eba5 0b0b 	sub.w	fp, r5, fp
 8006458:	455d      	cmp	r5, fp
 800645a:	d14b      	bne.n	80064f4 <_scanf_float+0x310>
 800645c:	6823      	ldr	r3, [r4, #0]
 800645e:	05da      	lsls	r2, r3, #23
 8006460:	d51f      	bpl.n	80064a2 <_scanf_float+0x2be>
 8006462:	055b      	lsls	r3, r3, #21
 8006464:	d468      	bmi.n	8006538 <_scanf_float+0x354>
 8006466:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800646a:	6923      	ldr	r3, [r4, #16]
 800646c:	2965      	cmp	r1, #101	; 0x65
 800646e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006472:	f105 3bff 	add.w	fp, r5, #4294967295
 8006476:	6123      	str	r3, [r4, #16]
 8006478:	d00d      	beq.n	8006496 <_scanf_float+0x2b2>
 800647a:	2945      	cmp	r1, #69	; 0x45
 800647c:	d00b      	beq.n	8006496 <_scanf_float+0x2b2>
 800647e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006482:	4632      	mov	r2, r6
 8006484:	4638      	mov	r0, r7
 8006486:	4798      	blx	r3
 8006488:	6923      	ldr	r3, [r4, #16]
 800648a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800648e:	3b01      	subs	r3, #1
 8006490:	f1a5 0b02 	sub.w	fp, r5, #2
 8006494:	6123      	str	r3, [r4, #16]
 8006496:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800649a:	4632      	mov	r2, r6
 800649c:	4638      	mov	r0, r7
 800649e:	4798      	blx	r3
 80064a0:	465d      	mov	r5, fp
 80064a2:	6826      	ldr	r6, [r4, #0]
 80064a4:	f016 0610 	ands.w	r6, r6, #16
 80064a8:	d17a      	bne.n	80065a0 <_scanf_float+0x3bc>
 80064aa:	702e      	strb	r6, [r5, #0]
 80064ac:	6823      	ldr	r3, [r4, #0]
 80064ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80064b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064b6:	d142      	bne.n	800653e <_scanf_float+0x35a>
 80064b8:	9b02      	ldr	r3, [sp, #8]
 80064ba:	eba9 0303 	sub.w	r3, r9, r3
 80064be:	425a      	negs	r2, r3
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d149      	bne.n	8006558 <_scanf_float+0x374>
 80064c4:	2200      	movs	r2, #0
 80064c6:	4641      	mov	r1, r8
 80064c8:	4638      	mov	r0, r7
 80064ca:	f000 fee9 	bl	80072a0 <_strtod_r>
 80064ce:	6825      	ldr	r5, [r4, #0]
 80064d0:	f8da 3000 	ldr.w	r3, [sl]
 80064d4:	f015 0f02 	tst.w	r5, #2
 80064d8:	f103 0204 	add.w	r2, r3, #4
 80064dc:	ec59 8b10 	vmov	r8, r9, d0
 80064e0:	f8ca 2000 	str.w	r2, [sl]
 80064e4:	d043      	beq.n	800656e <_scanf_float+0x38a>
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	e9c3 8900 	strd	r8, r9, [r3]
 80064ec:	68e3      	ldr	r3, [r4, #12]
 80064ee:	3301      	adds	r3, #1
 80064f0:	60e3      	str	r3, [r4, #12]
 80064f2:	e6be      	b.n	8006272 <_scanf_float+0x8e>
 80064f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80064f8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80064fc:	4632      	mov	r2, r6
 80064fe:	4638      	mov	r0, r7
 8006500:	4798      	blx	r3
 8006502:	6923      	ldr	r3, [r4, #16]
 8006504:	3b01      	subs	r3, #1
 8006506:	6123      	str	r3, [r4, #16]
 8006508:	e7a6      	b.n	8006458 <_scanf_float+0x274>
 800650a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800650e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006512:	4632      	mov	r2, r6
 8006514:	4638      	mov	r0, r7
 8006516:	4798      	blx	r3
 8006518:	6923      	ldr	r3, [r4, #16]
 800651a:	3b01      	subs	r3, #1
 800651c:	6123      	str	r3, [r4, #16]
 800651e:	4545      	cmp	r5, r8
 8006520:	d8f3      	bhi.n	800650a <_scanf_float+0x326>
 8006522:	e6a5      	b.n	8006270 <_scanf_float+0x8c>
 8006524:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006528:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800652c:	4632      	mov	r2, r6
 800652e:	4638      	mov	r0, r7
 8006530:	4798      	blx	r3
 8006532:	6923      	ldr	r3, [r4, #16]
 8006534:	3b01      	subs	r3, #1
 8006536:	6123      	str	r3, [r4, #16]
 8006538:	4545      	cmp	r5, r8
 800653a:	d8f3      	bhi.n	8006524 <_scanf_float+0x340>
 800653c:	e698      	b.n	8006270 <_scanf_float+0x8c>
 800653e:	9b03      	ldr	r3, [sp, #12]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d0bf      	beq.n	80064c4 <_scanf_float+0x2e0>
 8006544:	9904      	ldr	r1, [sp, #16]
 8006546:	230a      	movs	r3, #10
 8006548:	4632      	mov	r2, r6
 800654a:	3101      	adds	r1, #1
 800654c:	4638      	mov	r0, r7
 800654e:	f000 ff33 	bl	80073b8 <_strtol_r>
 8006552:	9b03      	ldr	r3, [sp, #12]
 8006554:	9d04      	ldr	r5, [sp, #16]
 8006556:	1ac2      	subs	r2, r0, r3
 8006558:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800655c:	429d      	cmp	r5, r3
 800655e:	bf28      	it	cs
 8006560:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8006564:	490f      	ldr	r1, [pc, #60]	; (80065a4 <_scanf_float+0x3c0>)
 8006566:	4628      	mov	r0, r5
 8006568:	f000 f824 	bl	80065b4 <siprintf>
 800656c:	e7aa      	b.n	80064c4 <_scanf_float+0x2e0>
 800656e:	f015 0504 	ands.w	r5, r5, #4
 8006572:	d1b8      	bne.n	80064e6 <_scanf_float+0x302>
 8006574:	681f      	ldr	r7, [r3, #0]
 8006576:	ee10 2a10 	vmov	r2, s0
 800657a:	464b      	mov	r3, r9
 800657c:	ee10 0a10 	vmov	r0, s0
 8006580:	4649      	mov	r1, r9
 8006582:	f7fa fadb 	bl	8000b3c <__aeabi_dcmpun>
 8006586:	b128      	cbz	r0, 8006594 <_scanf_float+0x3b0>
 8006588:	4628      	mov	r0, r5
 800658a:	f000 f80d 	bl	80065a8 <nanf>
 800658e:	ed87 0a00 	vstr	s0, [r7]
 8006592:	e7ab      	b.n	80064ec <_scanf_float+0x308>
 8006594:	4640      	mov	r0, r8
 8006596:	4649      	mov	r1, r9
 8006598:	f7fa fb2e 	bl	8000bf8 <__aeabi_d2f>
 800659c:	6038      	str	r0, [r7, #0]
 800659e:	e7a5      	b.n	80064ec <_scanf_float+0x308>
 80065a0:	2600      	movs	r6, #0
 80065a2:	e666      	b.n	8006272 <_scanf_float+0x8e>
 80065a4:	0800ca16 	.word	0x0800ca16

080065a8 <nanf>:
 80065a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80065b0 <nanf+0x8>
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	7fc00000 	.word	0x7fc00000

080065b4 <siprintf>:
 80065b4:	b40e      	push	{r1, r2, r3}
 80065b6:	b500      	push	{lr}
 80065b8:	b09c      	sub	sp, #112	; 0x70
 80065ba:	ab1d      	add	r3, sp, #116	; 0x74
 80065bc:	9002      	str	r0, [sp, #8]
 80065be:	9006      	str	r0, [sp, #24]
 80065c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80065c4:	4809      	ldr	r0, [pc, #36]	; (80065ec <siprintf+0x38>)
 80065c6:	9107      	str	r1, [sp, #28]
 80065c8:	9104      	str	r1, [sp, #16]
 80065ca:	4909      	ldr	r1, [pc, #36]	; (80065f0 <siprintf+0x3c>)
 80065cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80065d0:	9105      	str	r1, [sp, #20]
 80065d2:	6800      	ldr	r0, [r0, #0]
 80065d4:	9301      	str	r3, [sp, #4]
 80065d6:	a902      	add	r1, sp, #8
 80065d8:	f002 fdc2 	bl	8009160 <_svfiprintf_r>
 80065dc:	9b02      	ldr	r3, [sp, #8]
 80065de:	2200      	movs	r2, #0
 80065e0:	701a      	strb	r2, [r3, #0]
 80065e2:	b01c      	add	sp, #112	; 0x70
 80065e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80065e8:	b003      	add	sp, #12
 80065ea:	4770      	bx	lr
 80065ec:	2000003c 	.word	0x2000003c
 80065f0:	ffff0208 	.word	0xffff0208

080065f4 <siscanf>:
 80065f4:	b40e      	push	{r1, r2, r3}
 80065f6:	b530      	push	{r4, r5, lr}
 80065f8:	b09c      	sub	sp, #112	; 0x70
 80065fa:	ac1f      	add	r4, sp, #124	; 0x7c
 80065fc:	f44f 7201 	mov.w	r2, #516	; 0x204
 8006600:	f854 5b04 	ldr.w	r5, [r4], #4
 8006604:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006608:	9002      	str	r0, [sp, #8]
 800660a:	9006      	str	r0, [sp, #24]
 800660c:	f7f9 fde8 	bl	80001e0 <strlen>
 8006610:	4b0b      	ldr	r3, [pc, #44]	; (8006640 <siscanf+0x4c>)
 8006612:	9003      	str	r0, [sp, #12]
 8006614:	9007      	str	r0, [sp, #28]
 8006616:	930b      	str	r3, [sp, #44]	; 0x2c
 8006618:	480a      	ldr	r0, [pc, #40]	; (8006644 <siscanf+0x50>)
 800661a:	9401      	str	r4, [sp, #4]
 800661c:	2300      	movs	r3, #0
 800661e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006620:	9314      	str	r3, [sp, #80]	; 0x50
 8006622:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006626:	f8ad 3016 	strh.w	r3, [sp, #22]
 800662a:	462a      	mov	r2, r5
 800662c:	4623      	mov	r3, r4
 800662e:	a902      	add	r1, sp, #8
 8006630:	6800      	ldr	r0, [r0, #0]
 8006632:	f002 fee7 	bl	8009404 <__ssvfiscanf_r>
 8006636:	b01c      	add	sp, #112	; 0x70
 8006638:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800663c:	b003      	add	sp, #12
 800663e:	4770      	bx	lr
 8006640:	08006649 	.word	0x08006649
 8006644:	2000003c 	.word	0x2000003c

08006648 <__seofread>:
 8006648:	2000      	movs	r0, #0
 800664a:	4770      	bx	lr

0800664c <strstr>:
 800664c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800664e:	7803      	ldrb	r3, [r0, #0]
 8006650:	b17b      	cbz	r3, 8006672 <strstr+0x26>
 8006652:	4604      	mov	r4, r0
 8006654:	7823      	ldrb	r3, [r4, #0]
 8006656:	4620      	mov	r0, r4
 8006658:	1c66      	adds	r6, r4, #1
 800665a:	b17b      	cbz	r3, 800667c <strstr+0x30>
 800665c:	1e4a      	subs	r2, r1, #1
 800665e:	1e63      	subs	r3, r4, #1
 8006660:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8006664:	b14d      	cbz	r5, 800667a <strstr+0x2e>
 8006666:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800666a:	42af      	cmp	r7, r5
 800666c:	4634      	mov	r4, r6
 800666e:	d0f7      	beq.n	8006660 <strstr+0x14>
 8006670:	e7f0      	b.n	8006654 <strstr+0x8>
 8006672:	780b      	ldrb	r3, [r1, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	bf18      	it	ne
 8006678:	2000      	movne	r0, #0
 800667a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800667c:	4618      	mov	r0, r3
 800667e:	e7fc      	b.n	800667a <strstr+0x2e>

08006680 <sulp>:
 8006680:	b570      	push	{r4, r5, r6, lr}
 8006682:	4604      	mov	r4, r0
 8006684:	460d      	mov	r5, r1
 8006686:	ec45 4b10 	vmov	d0, r4, r5
 800668a:	4616      	mov	r6, r2
 800668c:	f002 fb24 	bl	8008cd8 <__ulp>
 8006690:	ec51 0b10 	vmov	r0, r1, d0
 8006694:	b17e      	cbz	r6, 80066b6 <sulp+0x36>
 8006696:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800669a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800669e:	2b00      	cmp	r3, #0
 80066a0:	dd09      	ble.n	80066b6 <sulp+0x36>
 80066a2:	051b      	lsls	r3, r3, #20
 80066a4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80066a8:	2400      	movs	r4, #0
 80066aa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80066ae:	4622      	mov	r2, r4
 80066b0:	462b      	mov	r3, r5
 80066b2:	f7f9 ffa9 	bl	8000608 <__aeabi_dmul>
 80066b6:	bd70      	pop	{r4, r5, r6, pc}

080066b8 <_strtod_l>:
 80066b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066bc:	461f      	mov	r7, r3
 80066be:	b0a1      	sub	sp, #132	; 0x84
 80066c0:	2300      	movs	r3, #0
 80066c2:	4681      	mov	r9, r0
 80066c4:	4638      	mov	r0, r7
 80066c6:	460e      	mov	r6, r1
 80066c8:	9217      	str	r2, [sp, #92]	; 0x5c
 80066ca:	931c      	str	r3, [sp, #112]	; 0x70
 80066cc:	f002 f804 	bl	80086d8 <__localeconv_l>
 80066d0:	4680      	mov	r8, r0
 80066d2:	6800      	ldr	r0, [r0, #0]
 80066d4:	f7f9 fd84 	bl	80001e0 <strlen>
 80066d8:	f04f 0a00 	mov.w	sl, #0
 80066dc:	4604      	mov	r4, r0
 80066de:	f04f 0b00 	mov.w	fp, #0
 80066e2:	961b      	str	r6, [sp, #108]	; 0x6c
 80066e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80066e6:	781a      	ldrb	r2, [r3, #0]
 80066e8:	2a0d      	cmp	r2, #13
 80066ea:	d832      	bhi.n	8006752 <_strtod_l+0x9a>
 80066ec:	2a09      	cmp	r2, #9
 80066ee:	d236      	bcs.n	800675e <_strtod_l+0xa6>
 80066f0:	2a00      	cmp	r2, #0
 80066f2:	d03e      	beq.n	8006772 <_strtod_l+0xba>
 80066f4:	2300      	movs	r3, #0
 80066f6:	930d      	str	r3, [sp, #52]	; 0x34
 80066f8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80066fa:	782b      	ldrb	r3, [r5, #0]
 80066fc:	2b30      	cmp	r3, #48	; 0x30
 80066fe:	f040 80ac 	bne.w	800685a <_strtod_l+0x1a2>
 8006702:	786b      	ldrb	r3, [r5, #1]
 8006704:	2b58      	cmp	r3, #88	; 0x58
 8006706:	d001      	beq.n	800670c <_strtod_l+0x54>
 8006708:	2b78      	cmp	r3, #120	; 0x78
 800670a:	d167      	bne.n	80067dc <_strtod_l+0x124>
 800670c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800670e:	9301      	str	r3, [sp, #4]
 8006710:	ab1c      	add	r3, sp, #112	; 0x70
 8006712:	9300      	str	r3, [sp, #0]
 8006714:	9702      	str	r7, [sp, #8]
 8006716:	ab1d      	add	r3, sp, #116	; 0x74
 8006718:	4a88      	ldr	r2, [pc, #544]	; (800693c <_strtod_l+0x284>)
 800671a:	a91b      	add	r1, sp, #108	; 0x6c
 800671c:	4648      	mov	r0, r9
 800671e:	f001 fcf2 	bl	8008106 <__gethex>
 8006722:	f010 0407 	ands.w	r4, r0, #7
 8006726:	4606      	mov	r6, r0
 8006728:	d005      	beq.n	8006736 <_strtod_l+0x7e>
 800672a:	2c06      	cmp	r4, #6
 800672c:	d12b      	bne.n	8006786 <_strtod_l+0xce>
 800672e:	3501      	adds	r5, #1
 8006730:	2300      	movs	r3, #0
 8006732:	951b      	str	r5, [sp, #108]	; 0x6c
 8006734:	930d      	str	r3, [sp, #52]	; 0x34
 8006736:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006738:	2b00      	cmp	r3, #0
 800673a:	f040 859a 	bne.w	8007272 <_strtod_l+0xbba>
 800673e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006740:	b1e3      	cbz	r3, 800677c <_strtod_l+0xc4>
 8006742:	4652      	mov	r2, sl
 8006744:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006748:	ec43 2b10 	vmov	d0, r2, r3
 800674c:	b021      	add	sp, #132	; 0x84
 800674e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006752:	2a2b      	cmp	r2, #43	; 0x2b
 8006754:	d015      	beq.n	8006782 <_strtod_l+0xca>
 8006756:	2a2d      	cmp	r2, #45	; 0x2d
 8006758:	d004      	beq.n	8006764 <_strtod_l+0xac>
 800675a:	2a20      	cmp	r2, #32
 800675c:	d1ca      	bne.n	80066f4 <_strtod_l+0x3c>
 800675e:	3301      	adds	r3, #1
 8006760:	931b      	str	r3, [sp, #108]	; 0x6c
 8006762:	e7bf      	b.n	80066e4 <_strtod_l+0x2c>
 8006764:	2201      	movs	r2, #1
 8006766:	920d      	str	r2, [sp, #52]	; 0x34
 8006768:	1c5a      	adds	r2, r3, #1
 800676a:	921b      	str	r2, [sp, #108]	; 0x6c
 800676c:	785b      	ldrb	r3, [r3, #1]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1c2      	bne.n	80066f8 <_strtod_l+0x40>
 8006772:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006774:	961b      	str	r6, [sp, #108]	; 0x6c
 8006776:	2b00      	cmp	r3, #0
 8006778:	f040 8579 	bne.w	800726e <_strtod_l+0xbb6>
 800677c:	4652      	mov	r2, sl
 800677e:	465b      	mov	r3, fp
 8006780:	e7e2      	b.n	8006748 <_strtod_l+0x90>
 8006782:	2200      	movs	r2, #0
 8006784:	e7ef      	b.n	8006766 <_strtod_l+0xae>
 8006786:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006788:	b13a      	cbz	r2, 800679a <_strtod_l+0xe2>
 800678a:	2135      	movs	r1, #53	; 0x35
 800678c:	a81e      	add	r0, sp, #120	; 0x78
 800678e:	f002 fb9b 	bl	8008ec8 <__copybits>
 8006792:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006794:	4648      	mov	r0, r9
 8006796:	f002 f808 	bl	80087aa <_Bfree>
 800679a:	3c01      	subs	r4, #1
 800679c:	2c04      	cmp	r4, #4
 800679e:	d806      	bhi.n	80067ae <_strtod_l+0xf6>
 80067a0:	e8df f004 	tbb	[pc, r4]
 80067a4:	1714030a 	.word	0x1714030a
 80067a8:	0a          	.byte	0x0a
 80067a9:	00          	.byte	0x00
 80067aa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80067ae:	0730      	lsls	r0, r6, #28
 80067b0:	d5c1      	bpl.n	8006736 <_strtod_l+0x7e>
 80067b2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80067b6:	e7be      	b.n	8006736 <_strtod_l+0x7e>
 80067b8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80067bc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80067be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80067c2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80067c6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80067ca:	e7f0      	b.n	80067ae <_strtod_l+0xf6>
 80067cc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8006940 <_strtod_l+0x288>
 80067d0:	e7ed      	b.n	80067ae <_strtod_l+0xf6>
 80067d2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80067d6:	f04f 3aff 	mov.w	sl, #4294967295
 80067da:	e7e8      	b.n	80067ae <_strtod_l+0xf6>
 80067dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80067de:	1c5a      	adds	r2, r3, #1
 80067e0:	921b      	str	r2, [sp, #108]	; 0x6c
 80067e2:	785b      	ldrb	r3, [r3, #1]
 80067e4:	2b30      	cmp	r3, #48	; 0x30
 80067e6:	d0f9      	beq.n	80067dc <_strtod_l+0x124>
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d0a4      	beq.n	8006736 <_strtod_l+0x7e>
 80067ec:	2301      	movs	r3, #1
 80067ee:	2500      	movs	r5, #0
 80067f0:	9306      	str	r3, [sp, #24]
 80067f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80067f4:	9308      	str	r3, [sp, #32]
 80067f6:	9507      	str	r5, [sp, #28]
 80067f8:	9505      	str	r5, [sp, #20]
 80067fa:	220a      	movs	r2, #10
 80067fc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80067fe:	7807      	ldrb	r7, [r0, #0]
 8006800:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8006804:	b2d9      	uxtb	r1, r3
 8006806:	2909      	cmp	r1, #9
 8006808:	d929      	bls.n	800685e <_strtod_l+0x1a6>
 800680a:	4622      	mov	r2, r4
 800680c:	f8d8 1000 	ldr.w	r1, [r8]
 8006810:	f003 f8e2 	bl	80099d8 <strncmp>
 8006814:	2800      	cmp	r0, #0
 8006816:	d031      	beq.n	800687c <_strtod_l+0x1c4>
 8006818:	2000      	movs	r0, #0
 800681a:	9c05      	ldr	r4, [sp, #20]
 800681c:	9004      	str	r0, [sp, #16]
 800681e:	463b      	mov	r3, r7
 8006820:	4602      	mov	r2, r0
 8006822:	2b65      	cmp	r3, #101	; 0x65
 8006824:	d001      	beq.n	800682a <_strtod_l+0x172>
 8006826:	2b45      	cmp	r3, #69	; 0x45
 8006828:	d114      	bne.n	8006854 <_strtod_l+0x19c>
 800682a:	b924      	cbnz	r4, 8006836 <_strtod_l+0x17e>
 800682c:	b910      	cbnz	r0, 8006834 <_strtod_l+0x17c>
 800682e:	9b06      	ldr	r3, [sp, #24]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d09e      	beq.n	8006772 <_strtod_l+0xba>
 8006834:	2400      	movs	r4, #0
 8006836:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006838:	1c73      	adds	r3, r6, #1
 800683a:	931b      	str	r3, [sp, #108]	; 0x6c
 800683c:	7873      	ldrb	r3, [r6, #1]
 800683e:	2b2b      	cmp	r3, #43	; 0x2b
 8006840:	d078      	beq.n	8006934 <_strtod_l+0x27c>
 8006842:	2b2d      	cmp	r3, #45	; 0x2d
 8006844:	d070      	beq.n	8006928 <_strtod_l+0x270>
 8006846:	f04f 0c00 	mov.w	ip, #0
 800684a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800684e:	2f09      	cmp	r7, #9
 8006850:	d97c      	bls.n	800694c <_strtod_l+0x294>
 8006852:	961b      	str	r6, [sp, #108]	; 0x6c
 8006854:	f04f 0e00 	mov.w	lr, #0
 8006858:	e09a      	b.n	8006990 <_strtod_l+0x2d8>
 800685a:	2300      	movs	r3, #0
 800685c:	e7c7      	b.n	80067ee <_strtod_l+0x136>
 800685e:	9905      	ldr	r1, [sp, #20]
 8006860:	2908      	cmp	r1, #8
 8006862:	bfdd      	ittte	le
 8006864:	9907      	ldrle	r1, [sp, #28]
 8006866:	fb02 3301 	mlale	r3, r2, r1, r3
 800686a:	9307      	strle	r3, [sp, #28]
 800686c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8006870:	9b05      	ldr	r3, [sp, #20]
 8006872:	3001      	adds	r0, #1
 8006874:	3301      	adds	r3, #1
 8006876:	9305      	str	r3, [sp, #20]
 8006878:	901b      	str	r0, [sp, #108]	; 0x6c
 800687a:	e7bf      	b.n	80067fc <_strtod_l+0x144>
 800687c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800687e:	191a      	adds	r2, r3, r4
 8006880:	921b      	str	r2, [sp, #108]	; 0x6c
 8006882:	9a05      	ldr	r2, [sp, #20]
 8006884:	5d1b      	ldrb	r3, [r3, r4]
 8006886:	2a00      	cmp	r2, #0
 8006888:	d037      	beq.n	80068fa <_strtod_l+0x242>
 800688a:	9c05      	ldr	r4, [sp, #20]
 800688c:	4602      	mov	r2, r0
 800688e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006892:	2909      	cmp	r1, #9
 8006894:	d913      	bls.n	80068be <_strtod_l+0x206>
 8006896:	2101      	movs	r1, #1
 8006898:	9104      	str	r1, [sp, #16]
 800689a:	e7c2      	b.n	8006822 <_strtod_l+0x16a>
 800689c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800689e:	1c5a      	adds	r2, r3, #1
 80068a0:	921b      	str	r2, [sp, #108]	; 0x6c
 80068a2:	785b      	ldrb	r3, [r3, #1]
 80068a4:	3001      	adds	r0, #1
 80068a6:	2b30      	cmp	r3, #48	; 0x30
 80068a8:	d0f8      	beq.n	800689c <_strtod_l+0x1e4>
 80068aa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80068ae:	2a08      	cmp	r2, #8
 80068b0:	f200 84e4 	bhi.w	800727c <_strtod_l+0xbc4>
 80068b4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80068b6:	9208      	str	r2, [sp, #32]
 80068b8:	4602      	mov	r2, r0
 80068ba:	2000      	movs	r0, #0
 80068bc:	4604      	mov	r4, r0
 80068be:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80068c2:	f100 0101 	add.w	r1, r0, #1
 80068c6:	d012      	beq.n	80068ee <_strtod_l+0x236>
 80068c8:	440a      	add	r2, r1
 80068ca:	eb00 0c04 	add.w	ip, r0, r4
 80068ce:	4621      	mov	r1, r4
 80068d0:	270a      	movs	r7, #10
 80068d2:	458c      	cmp	ip, r1
 80068d4:	d113      	bne.n	80068fe <_strtod_l+0x246>
 80068d6:	1821      	adds	r1, r4, r0
 80068d8:	2908      	cmp	r1, #8
 80068da:	f104 0401 	add.w	r4, r4, #1
 80068de:	4404      	add	r4, r0
 80068e0:	dc19      	bgt.n	8006916 <_strtod_l+0x25e>
 80068e2:	9b07      	ldr	r3, [sp, #28]
 80068e4:	210a      	movs	r1, #10
 80068e6:	fb01 e303 	mla	r3, r1, r3, lr
 80068ea:	9307      	str	r3, [sp, #28]
 80068ec:	2100      	movs	r1, #0
 80068ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80068f0:	1c58      	adds	r0, r3, #1
 80068f2:	901b      	str	r0, [sp, #108]	; 0x6c
 80068f4:	785b      	ldrb	r3, [r3, #1]
 80068f6:	4608      	mov	r0, r1
 80068f8:	e7c9      	b.n	800688e <_strtod_l+0x1d6>
 80068fa:	9805      	ldr	r0, [sp, #20]
 80068fc:	e7d3      	b.n	80068a6 <_strtod_l+0x1ee>
 80068fe:	2908      	cmp	r1, #8
 8006900:	f101 0101 	add.w	r1, r1, #1
 8006904:	dc03      	bgt.n	800690e <_strtod_l+0x256>
 8006906:	9b07      	ldr	r3, [sp, #28]
 8006908:	437b      	muls	r3, r7
 800690a:	9307      	str	r3, [sp, #28]
 800690c:	e7e1      	b.n	80068d2 <_strtod_l+0x21a>
 800690e:	2910      	cmp	r1, #16
 8006910:	bfd8      	it	le
 8006912:	437d      	mulle	r5, r7
 8006914:	e7dd      	b.n	80068d2 <_strtod_l+0x21a>
 8006916:	2c10      	cmp	r4, #16
 8006918:	bfdc      	itt	le
 800691a:	210a      	movle	r1, #10
 800691c:	fb01 e505 	mlale	r5, r1, r5, lr
 8006920:	e7e4      	b.n	80068ec <_strtod_l+0x234>
 8006922:	2301      	movs	r3, #1
 8006924:	9304      	str	r3, [sp, #16]
 8006926:	e781      	b.n	800682c <_strtod_l+0x174>
 8006928:	f04f 0c01 	mov.w	ip, #1
 800692c:	1cb3      	adds	r3, r6, #2
 800692e:	931b      	str	r3, [sp, #108]	; 0x6c
 8006930:	78b3      	ldrb	r3, [r6, #2]
 8006932:	e78a      	b.n	800684a <_strtod_l+0x192>
 8006934:	f04f 0c00 	mov.w	ip, #0
 8006938:	e7f8      	b.n	800692c <_strtod_l+0x274>
 800693a:	bf00      	nop
 800693c:	0800ca1c 	.word	0x0800ca1c
 8006940:	7ff00000 	.word	0x7ff00000
 8006944:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006946:	1c5f      	adds	r7, r3, #1
 8006948:	971b      	str	r7, [sp, #108]	; 0x6c
 800694a:	785b      	ldrb	r3, [r3, #1]
 800694c:	2b30      	cmp	r3, #48	; 0x30
 800694e:	d0f9      	beq.n	8006944 <_strtod_l+0x28c>
 8006950:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8006954:	2f08      	cmp	r7, #8
 8006956:	f63f af7d 	bhi.w	8006854 <_strtod_l+0x19c>
 800695a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800695e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006960:	930a      	str	r3, [sp, #40]	; 0x28
 8006962:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006964:	1c5f      	adds	r7, r3, #1
 8006966:	971b      	str	r7, [sp, #108]	; 0x6c
 8006968:	785b      	ldrb	r3, [r3, #1]
 800696a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800696e:	f1b8 0f09 	cmp.w	r8, #9
 8006972:	d937      	bls.n	80069e4 <_strtod_l+0x32c>
 8006974:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006976:	1a7f      	subs	r7, r7, r1
 8006978:	2f08      	cmp	r7, #8
 800697a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800697e:	dc37      	bgt.n	80069f0 <_strtod_l+0x338>
 8006980:	45be      	cmp	lr, r7
 8006982:	bfa8      	it	ge
 8006984:	46be      	movge	lr, r7
 8006986:	f1bc 0f00 	cmp.w	ip, #0
 800698a:	d001      	beq.n	8006990 <_strtod_l+0x2d8>
 800698c:	f1ce 0e00 	rsb	lr, lr, #0
 8006990:	2c00      	cmp	r4, #0
 8006992:	d151      	bne.n	8006a38 <_strtod_l+0x380>
 8006994:	2800      	cmp	r0, #0
 8006996:	f47f aece 	bne.w	8006736 <_strtod_l+0x7e>
 800699a:	9a06      	ldr	r2, [sp, #24]
 800699c:	2a00      	cmp	r2, #0
 800699e:	f47f aeca 	bne.w	8006736 <_strtod_l+0x7e>
 80069a2:	9a04      	ldr	r2, [sp, #16]
 80069a4:	2a00      	cmp	r2, #0
 80069a6:	f47f aee4 	bne.w	8006772 <_strtod_l+0xba>
 80069aa:	2b4e      	cmp	r3, #78	; 0x4e
 80069ac:	d027      	beq.n	80069fe <_strtod_l+0x346>
 80069ae:	dc21      	bgt.n	80069f4 <_strtod_l+0x33c>
 80069b0:	2b49      	cmp	r3, #73	; 0x49
 80069b2:	f47f aede 	bne.w	8006772 <_strtod_l+0xba>
 80069b6:	49a0      	ldr	r1, [pc, #640]	; (8006c38 <_strtod_l+0x580>)
 80069b8:	a81b      	add	r0, sp, #108	; 0x6c
 80069ba:	f001 fdd7 	bl	800856c <__match>
 80069be:	2800      	cmp	r0, #0
 80069c0:	f43f aed7 	beq.w	8006772 <_strtod_l+0xba>
 80069c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80069c6:	499d      	ldr	r1, [pc, #628]	; (8006c3c <_strtod_l+0x584>)
 80069c8:	3b01      	subs	r3, #1
 80069ca:	a81b      	add	r0, sp, #108	; 0x6c
 80069cc:	931b      	str	r3, [sp, #108]	; 0x6c
 80069ce:	f001 fdcd 	bl	800856c <__match>
 80069d2:	b910      	cbnz	r0, 80069da <_strtod_l+0x322>
 80069d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80069d6:	3301      	adds	r3, #1
 80069d8:	931b      	str	r3, [sp, #108]	; 0x6c
 80069da:	f8df b274 	ldr.w	fp, [pc, #628]	; 8006c50 <_strtod_l+0x598>
 80069de:	f04f 0a00 	mov.w	sl, #0
 80069e2:	e6a8      	b.n	8006736 <_strtod_l+0x7e>
 80069e4:	210a      	movs	r1, #10
 80069e6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80069ea:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80069ee:	e7b8      	b.n	8006962 <_strtod_l+0x2aa>
 80069f0:	46be      	mov	lr, r7
 80069f2:	e7c8      	b.n	8006986 <_strtod_l+0x2ce>
 80069f4:	2b69      	cmp	r3, #105	; 0x69
 80069f6:	d0de      	beq.n	80069b6 <_strtod_l+0x2fe>
 80069f8:	2b6e      	cmp	r3, #110	; 0x6e
 80069fa:	f47f aeba 	bne.w	8006772 <_strtod_l+0xba>
 80069fe:	4990      	ldr	r1, [pc, #576]	; (8006c40 <_strtod_l+0x588>)
 8006a00:	a81b      	add	r0, sp, #108	; 0x6c
 8006a02:	f001 fdb3 	bl	800856c <__match>
 8006a06:	2800      	cmp	r0, #0
 8006a08:	f43f aeb3 	beq.w	8006772 <_strtod_l+0xba>
 8006a0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	2b28      	cmp	r3, #40	; 0x28
 8006a12:	d10e      	bne.n	8006a32 <_strtod_l+0x37a>
 8006a14:	aa1e      	add	r2, sp, #120	; 0x78
 8006a16:	498b      	ldr	r1, [pc, #556]	; (8006c44 <_strtod_l+0x58c>)
 8006a18:	a81b      	add	r0, sp, #108	; 0x6c
 8006a1a:	f001 fdbb 	bl	8008594 <__hexnan>
 8006a1e:	2805      	cmp	r0, #5
 8006a20:	d107      	bne.n	8006a32 <_strtod_l+0x37a>
 8006a22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006a24:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8006a28:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006a2c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006a30:	e681      	b.n	8006736 <_strtod_l+0x7e>
 8006a32:	f8df b224 	ldr.w	fp, [pc, #548]	; 8006c58 <_strtod_l+0x5a0>
 8006a36:	e7d2      	b.n	80069de <_strtod_l+0x326>
 8006a38:	ebae 0302 	sub.w	r3, lr, r2
 8006a3c:	9306      	str	r3, [sp, #24]
 8006a3e:	9b05      	ldr	r3, [sp, #20]
 8006a40:	9807      	ldr	r0, [sp, #28]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	bf08      	it	eq
 8006a46:	4623      	moveq	r3, r4
 8006a48:	2c10      	cmp	r4, #16
 8006a4a:	9305      	str	r3, [sp, #20]
 8006a4c:	46a0      	mov	r8, r4
 8006a4e:	bfa8      	it	ge
 8006a50:	f04f 0810 	movge.w	r8, #16
 8006a54:	f7f9 fd5e 	bl	8000514 <__aeabi_ui2d>
 8006a58:	2c09      	cmp	r4, #9
 8006a5a:	4682      	mov	sl, r0
 8006a5c:	468b      	mov	fp, r1
 8006a5e:	dc13      	bgt.n	8006a88 <_strtod_l+0x3d0>
 8006a60:	9b06      	ldr	r3, [sp, #24]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f43f ae67 	beq.w	8006736 <_strtod_l+0x7e>
 8006a68:	9b06      	ldr	r3, [sp, #24]
 8006a6a:	dd7a      	ble.n	8006b62 <_strtod_l+0x4aa>
 8006a6c:	2b16      	cmp	r3, #22
 8006a6e:	dc61      	bgt.n	8006b34 <_strtod_l+0x47c>
 8006a70:	4a75      	ldr	r2, [pc, #468]	; (8006c48 <_strtod_l+0x590>)
 8006a72:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8006a76:	e9de 0100 	ldrd	r0, r1, [lr]
 8006a7a:	4652      	mov	r2, sl
 8006a7c:	465b      	mov	r3, fp
 8006a7e:	f7f9 fdc3 	bl	8000608 <__aeabi_dmul>
 8006a82:	4682      	mov	sl, r0
 8006a84:	468b      	mov	fp, r1
 8006a86:	e656      	b.n	8006736 <_strtod_l+0x7e>
 8006a88:	4b6f      	ldr	r3, [pc, #444]	; (8006c48 <_strtod_l+0x590>)
 8006a8a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006a8e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006a92:	f7f9 fdb9 	bl	8000608 <__aeabi_dmul>
 8006a96:	4606      	mov	r6, r0
 8006a98:	4628      	mov	r0, r5
 8006a9a:	460f      	mov	r7, r1
 8006a9c:	f7f9 fd3a 	bl	8000514 <__aeabi_ui2d>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4630      	mov	r0, r6
 8006aa6:	4639      	mov	r1, r7
 8006aa8:	f7f9 fbf8 	bl	800029c <__adddf3>
 8006aac:	2c0f      	cmp	r4, #15
 8006aae:	4682      	mov	sl, r0
 8006ab0:	468b      	mov	fp, r1
 8006ab2:	ddd5      	ble.n	8006a60 <_strtod_l+0x3a8>
 8006ab4:	9b06      	ldr	r3, [sp, #24]
 8006ab6:	eba4 0808 	sub.w	r8, r4, r8
 8006aba:	4498      	add	r8, r3
 8006abc:	f1b8 0f00 	cmp.w	r8, #0
 8006ac0:	f340 8096 	ble.w	8006bf0 <_strtod_l+0x538>
 8006ac4:	f018 030f 	ands.w	r3, r8, #15
 8006ac8:	d00a      	beq.n	8006ae0 <_strtod_l+0x428>
 8006aca:	495f      	ldr	r1, [pc, #380]	; (8006c48 <_strtod_l+0x590>)
 8006acc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006ad0:	4652      	mov	r2, sl
 8006ad2:	465b      	mov	r3, fp
 8006ad4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ad8:	f7f9 fd96 	bl	8000608 <__aeabi_dmul>
 8006adc:	4682      	mov	sl, r0
 8006ade:	468b      	mov	fp, r1
 8006ae0:	f038 080f 	bics.w	r8, r8, #15
 8006ae4:	d073      	beq.n	8006bce <_strtod_l+0x516>
 8006ae6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006aea:	dd47      	ble.n	8006b7c <_strtod_l+0x4c4>
 8006aec:	2400      	movs	r4, #0
 8006aee:	46a0      	mov	r8, r4
 8006af0:	9407      	str	r4, [sp, #28]
 8006af2:	9405      	str	r4, [sp, #20]
 8006af4:	2322      	movs	r3, #34	; 0x22
 8006af6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8006c50 <_strtod_l+0x598>
 8006afa:	f8c9 3000 	str.w	r3, [r9]
 8006afe:	f04f 0a00 	mov.w	sl, #0
 8006b02:	9b07      	ldr	r3, [sp, #28]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f43f ae16 	beq.w	8006736 <_strtod_l+0x7e>
 8006b0a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006b0c:	4648      	mov	r0, r9
 8006b0e:	f001 fe4c 	bl	80087aa <_Bfree>
 8006b12:	9905      	ldr	r1, [sp, #20]
 8006b14:	4648      	mov	r0, r9
 8006b16:	f001 fe48 	bl	80087aa <_Bfree>
 8006b1a:	4641      	mov	r1, r8
 8006b1c:	4648      	mov	r0, r9
 8006b1e:	f001 fe44 	bl	80087aa <_Bfree>
 8006b22:	9907      	ldr	r1, [sp, #28]
 8006b24:	4648      	mov	r0, r9
 8006b26:	f001 fe40 	bl	80087aa <_Bfree>
 8006b2a:	4621      	mov	r1, r4
 8006b2c:	4648      	mov	r0, r9
 8006b2e:	f001 fe3c 	bl	80087aa <_Bfree>
 8006b32:	e600      	b.n	8006736 <_strtod_l+0x7e>
 8006b34:	9a06      	ldr	r2, [sp, #24]
 8006b36:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	dbba      	blt.n	8006ab4 <_strtod_l+0x3fc>
 8006b3e:	4d42      	ldr	r5, [pc, #264]	; (8006c48 <_strtod_l+0x590>)
 8006b40:	f1c4 040f 	rsb	r4, r4, #15
 8006b44:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006b48:	4652      	mov	r2, sl
 8006b4a:	465b      	mov	r3, fp
 8006b4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b50:	f7f9 fd5a 	bl	8000608 <__aeabi_dmul>
 8006b54:	9b06      	ldr	r3, [sp, #24]
 8006b56:	1b1c      	subs	r4, r3, r4
 8006b58:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006b5c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b60:	e78d      	b.n	8006a7e <_strtod_l+0x3c6>
 8006b62:	f113 0f16 	cmn.w	r3, #22
 8006b66:	dba5      	blt.n	8006ab4 <_strtod_l+0x3fc>
 8006b68:	4a37      	ldr	r2, [pc, #220]	; (8006c48 <_strtod_l+0x590>)
 8006b6a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8006b6e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8006b72:	4650      	mov	r0, sl
 8006b74:	4659      	mov	r1, fp
 8006b76:	f7f9 fe71 	bl	800085c <__aeabi_ddiv>
 8006b7a:	e782      	b.n	8006a82 <_strtod_l+0x3ca>
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	4e33      	ldr	r6, [pc, #204]	; (8006c4c <_strtod_l+0x594>)
 8006b80:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006b84:	4650      	mov	r0, sl
 8006b86:	4659      	mov	r1, fp
 8006b88:	461d      	mov	r5, r3
 8006b8a:	f1b8 0f01 	cmp.w	r8, #1
 8006b8e:	dc21      	bgt.n	8006bd4 <_strtod_l+0x51c>
 8006b90:	b10b      	cbz	r3, 8006b96 <_strtod_l+0x4de>
 8006b92:	4682      	mov	sl, r0
 8006b94:	468b      	mov	fp, r1
 8006b96:	4b2d      	ldr	r3, [pc, #180]	; (8006c4c <_strtod_l+0x594>)
 8006b98:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006b9c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006ba0:	4652      	mov	r2, sl
 8006ba2:	465b      	mov	r3, fp
 8006ba4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006ba8:	f7f9 fd2e 	bl	8000608 <__aeabi_dmul>
 8006bac:	4b28      	ldr	r3, [pc, #160]	; (8006c50 <_strtod_l+0x598>)
 8006bae:	460a      	mov	r2, r1
 8006bb0:	400b      	ands	r3, r1
 8006bb2:	4928      	ldr	r1, [pc, #160]	; (8006c54 <_strtod_l+0x59c>)
 8006bb4:	428b      	cmp	r3, r1
 8006bb6:	4682      	mov	sl, r0
 8006bb8:	d898      	bhi.n	8006aec <_strtod_l+0x434>
 8006bba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006bbe:	428b      	cmp	r3, r1
 8006bc0:	bf86      	itte	hi
 8006bc2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006c5c <_strtod_l+0x5a4>
 8006bc6:	f04f 3aff 	movhi.w	sl, #4294967295
 8006bca:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006bce:	2300      	movs	r3, #0
 8006bd0:	9304      	str	r3, [sp, #16]
 8006bd2:	e077      	b.n	8006cc4 <_strtod_l+0x60c>
 8006bd4:	f018 0f01 	tst.w	r8, #1
 8006bd8:	d006      	beq.n	8006be8 <_strtod_l+0x530>
 8006bda:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8006bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be2:	f7f9 fd11 	bl	8000608 <__aeabi_dmul>
 8006be6:	2301      	movs	r3, #1
 8006be8:	3501      	adds	r5, #1
 8006bea:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006bee:	e7cc      	b.n	8006b8a <_strtod_l+0x4d2>
 8006bf0:	d0ed      	beq.n	8006bce <_strtod_l+0x516>
 8006bf2:	f1c8 0800 	rsb	r8, r8, #0
 8006bf6:	f018 020f 	ands.w	r2, r8, #15
 8006bfa:	d00a      	beq.n	8006c12 <_strtod_l+0x55a>
 8006bfc:	4b12      	ldr	r3, [pc, #72]	; (8006c48 <_strtod_l+0x590>)
 8006bfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c02:	4650      	mov	r0, sl
 8006c04:	4659      	mov	r1, fp
 8006c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0a:	f7f9 fe27 	bl	800085c <__aeabi_ddiv>
 8006c0e:	4682      	mov	sl, r0
 8006c10:	468b      	mov	fp, r1
 8006c12:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006c16:	d0da      	beq.n	8006bce <_strtod_l+0x516>
 8006c18:	f1b8 0f1f 	cmp.w	r8, #31
 8006c1c:	dd20      	ble.n	8006c60 <_strtod_l+0x5a8>
 8006c1e:	2400      	movs	r4, #0
 8006c20:	46a0      	mov	r8, r4
 8006c22:	9407      	str	r4, [sp, #28]
 8006c24:	9405      	str	r4, [sp, #20]
 8006c26:	2322      	movs	r3, #34	; 0x22
 8006c28:	f04f 0a00 	mov.w	sl, #0
 8006c2c:	f04f 0b00 	mov.w	fp, #0
 8006c30:	f8c9 3000 	str.w	r3, [r9]
 8006c34:	e765      	b.n	8006b02 <_strtod_l+0x44a>
 8006c36:	bf00      	nop
 8006c38:	0800c9e9 	.word	0x0800c9e9
 8006c3c:	0800ca73 	.word	0x0800ca73
 8006c40:	0800c9f1 	.word	0x0800c9f1
 8006c44:	0800ca30 	.word	0x0800ca30
 8006c48:	0800cab0 	.word	0x0800cab0
 8006c4c:	0800ca88 	.word	0x0800ca88
 8006c50:	7ff00000 	.word	0x7ff00000
 8006c54:	7ca00000 	.word	0x7ca00000
 8006c58:	fff80000 	.word	0xfff80000
 8006c5c:	7fefffff 	.word	0x7fefffff
 8006c60:	f018 0310 	ands.w	r3, r8, #16
 8006c64:	bf18      	it	ne
 8006c66:	236a      	movne	r3, #106	; 0x6a
 8006c68:	4da0      	ldr	r5, [pc, #640]	; (8006eec <_strtod_l+0x834>)
 8006c6a:	9304      	str	r3, [sp, #16]
 8006c6c:	4650      	mov	r0, sl
 8006c6e:	4659      	mov	r1, fp
 8006c70:	2300      	movs	r3, #0
 8006c72:	f1b8 0f00 	cmp.w	r8, #0
 8006c76:	f300 810a 	bgt.w	8006e8e <_strtod_l+0x7d6>
 8006c7a:	b10b      	cbz	r3, 8006c80 <_strtod_l+0x5c8>
 8006c7c:	4682      	mov	sl, r0
 8006c7e:	468b      	mov	fp, r1
 8006c80:	9b04      	ldr	r3, [sp, #16]
 8006c82:	b1bb      	cbz	r3, 8006cb4 <_strtod_l+0x5fc>
 8006c84:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006c88:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	4659      	mov	r1, fp
 8006c90:	dd10      	ble.n	8006cb4 <_strtod_l+0x5fc>
 8006c92:	2b1f      	cmp	r3, #31
 8006c94:	f340 8107 	ble.w	8006ea6 <_strtod_l+0x7ee>
 8006c98:	2b34      	cmp	r3, #52	; 0x34
 8006c9a:	bfde      	ittt	le
 8006c9c:	3b20      	suble	r3, #32
 8006c9e:	f04f 32ff 	movle.w	r2, #4294967295
 8006ca2:	fa02 f303 	lslle.w	r3, r2, r3
 8006ca6:	f04f 0a00 	mov.w	sl, #0
 8006caa:	bfcc      	ite	gt
 8006cac:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006cb0:	ea03 0b01 	andle.w	fp, r3, r1
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	4650      	mov	r0, sl
 8006cba:	4659      	mov	r1, fp
 8006cbc:	f7f9 ff0c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	d1ac      	bne.n	8006c1e <_strtod_l+0x566>
 8006cc4:	9b07      	ldr	r3, [sp, #28]
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	9a05      	ldr	r2, [sp, #20]
 8006cca:	9908      	ldr	r1, [sp, #32]
 8006ccc:	4623      	mov	r3, r4
 8006cce:	4648      	mov	r0, r9
 8006cd0:	f001 fdbd 	bl	800884e <__s2b>
 8006cd4:	9007      	str	r0, [sp, #28]
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	f43f af08 	beq.w	8006aec <_strtod_l+0x434>
 8006cdc:	9a06      	ldr	r2, [sp, #24]
 8006cde:	9b06      	ldr	r3, [sp, #24]
 8006ce0:	2a00      	cmp	r2, #0
 8006ce2:	f1c3 0300 	rsb	r3, r3, #0
 8006ce6:	bfa8      	it	ge
 8006ce8:	2300      	movge	r3, #0
 8006cea:	930e      	str	r3, [sp, #56]	; 0x38
 8006cec:	2400      	movs	r4, #0
 8006cee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006cf2:	9316      	str	r3, [sp, #88]	; 0x58
 8006cf4:	46a0      	mov	r8, r4
 8006cf6:	9b07      	ldr	r3, [sp, #28]
 8006cf8:	4648      	mov	r0, r9
 8006cfa:	6859      	ldr	r1, [r3, #4]
 8006cfc:	f001 fd21 	bl	8008742 <_Balloc>
 8006d00:	9005      	str	r0, [sp, #20]
 8006d02:	2800      	cmp	r0, #0
 8006d04:	f43f aef6 	beq.w	8006af4 <_strtod_l+0x43c>
 8006d08:	9b07      	ldr	r3, [sp, #28]
 8006d0a:	691a      	ldr	r2, [r3, #16]
 8006d0c:	3202      	adds	r2, #2
 8006d0e:	f103 010c 	add.w	r1, r3, #12
 8006d12:	0092      	lsls	r2, r2, #2
 8006d14:	300c      	adds	r0, #12
 8006d16:	f001 fd09 	bl	800872c <memcpy>
 8006d1a:	aa1e      	add	r2, sp, #120	; 0x78
 8006d1c:	a91d      	add	r1, sp, #116	; 0x74
 8006d1e:	ec4b ab10 	vmov	d0, sl, fp
 8006d22:	4648      	mov	r0, r9
 8006d24:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006d28:	f002 f84c 	bl	8008dc4 <__d2b>
 8006d2c:	901c      	str	r0, [sp, #112]	; 0x70
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	f43f aee0 	beq.w	8006af4 <_strtod_l+0x43c>
 8006d34:	2101      	movs	r1, #1
 8006d36:	4648      	mov	r0, r9
 8006d38:	f001 fe15 	bl	8008966 <__i2b>
 8006d3c:	4680      	mov	r8, r0
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	f43f aed8 	beq.w	8006af4 <_strtod_l+0x43c>
 8006d44:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006d46:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006d48:	2e00      	cmp	r6, #0
 8006d4a:	bfab      	itete	ge
 8006d4c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006d4e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006d50:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8006d52:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8006d54:	bfac      	ite	ge
 8006d56:	18f7      	addge	r7, r6, r3
 8006d58:	1b9d      	sublt	r5, r3, r6
 8006d5a:	9b04      	ldr	r3, [sp, #16]
 8006d5c:	1af6      	subs	r6, r6, r3
 8006d5e:	4416      	add	r6, r2
 8006d60:	4b63      	ldr	r3, [pc, #396]	; (8006ef0 <_strtod_l+0x838>)
 8006d62:	3e01      	subs	r6, #1
 8006d64:	429e      	cmp	r6, r3
 8006d66:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006d6a:	f280 80af 	bge.w	8006ecc <_strtod_l+0x814>
 8006d6e:	1b9b      	subs	r3, r3, r6
 8006d70:	2b1f      	cmp	r3, #31
 8006d72:	eba2 0203 	sub.w	r2, r2, r3
 8006d76:	f04f 0101 	mov.w	r1, #1
 8006d7a:	f300 809b 	bgt.w	8006eb4 <_strtod_l+0x7fc>
 8006d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d82:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d84:	2300      	movs	r3, #0
 8006d86:	930a      	str	r3, [sp, #40]	; 0x28
 8006d88:	18be      	adds	r6, r7, r2
 8006d8a:	9b04      	ldr	r3, [sp, #16]
 8006d8c:	42b7      	cmp	r7, r6
 8006d8e:	4415      	add	r5, r2
 8006d90:	441d      	add	r5, r3
 8006d92:	463b      	mov	r3, r7
 8006d94:	bfa8      	it	ge
 8006d96:	4633      	movge	r3, r6
 8006d98:	42ab      	cmp	r3, r5
 8006d9a:	bfa8      	it	ge
 8006d9c:	462b      	movge	r3, r5
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	bfc2      	ittt	gt
 8006da2:	1af6      	subgt	r6, r6, r3
 8006da4:	1aed      	subgt	r5, r5, r3
 8006da6:	1aff      	subgt	r7, r7, r3
 8006da8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006daa:	b1bb      	cbz	r3, 8006ddc <_strtod_l+0x724>
 8006dac:	4641      	mov	r1, r8
 8006dae:	461a      	mov	r2, r3
 8006db0:	4648      	mov	r0, r9
 8006db2:	f001 fe77 	bl	8008aa4 <__pow5mult>
 8006db6:	4680      	mov	r8, r0
 8006db8:	2800      	cmp	r0, #0
 8006dba:	f43f ae9b 	beq.w	8006af4 <_strtod_l+0x43c>
 8006dbe:	4601      	mov	r1, r0
 8006dc0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006dc2:	4648      	mov	r0, r9
 8006dc4:	f001 fdd8 	bl	8008978 <__multiply>
 8006dc8:	900c      	str	r0, [sp, #48]	; 0x30
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	f43f ae92 	beq.w	8006af4 <_strtod_l+0x43c>
 8006dd0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006dd2:	4648      	mov	r0, r9
 8006dd4:	f001 fce9 	bl	80087aa <_Bfree>
 8006dd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006dda:	931c      	str	r3, [sp, #112]	; 0x70
 8006ddc:	2e00      	cmp	r6, #0
 8006dde:	dc7a      	bgt.n	8006ed6 <_strtod_l+0x81e>
 8006de0:	9b06      	ldr	r3, [sp, #24]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	dd08      	ble.n	8006df8 <_strtod_l+0x740>
 8006de6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006de8:	9905      	ldr	r1, [sp, #20]
 8006dea:	4648      	mov	r0, r9
 8006dec:	f001 fe5a 	bl	8008aa4 <__pow5mult>
 8006df0:	9005      	str	r0, [sp, #20]
 8006df2:	2800      	cmp	r0, #0
 8006df4:	f43f ae7e 	beq.w	8006af4 <_strtod_l+0x43c>
 8006df8:	2d00      	cmp	r5, #0
 8006dfa:	dd08      	ble.n	8006e0e <_strtod_l+0x756>
 8006dfc:	462a      	mov	r2, r5
 8006dfe:	9905      	ldr	r1, [sp, #20]
 8006e00:	4648      	mov	r0, r9
 8006e02:	f001 fe9d 	bl	8008b40 <__lshift>
 8006e06:	9005      	str	r0, [sp, #20]
 8006e08:	2800      	cmp	r0, #0
 8006e0a:	f43f ae73 	beq.w	8006af4 <_strtod_l+0x43c>
 8006e0e:	2f00      	cmp	r7, #0
 8006e10:	dd08      	ble.n	8006e24 <_strtod_l+0x76c>
 8006e12:	4641      	mov	r1, r8
 8006e14:	463a      	mov	r2, r7
 8006e16:	4648      	mov	r0, r9
 8006e18:	f001 fe92 	bl	8008b40 <__lshift>
 8006e1c:	4680      	mov	r8, r0
 8006e1e:	2800      	cmp	r0, #0
 8006e20:	f43f ae68 	beq.w	8006af4 <_strtod_l+0x43c>
 8006e24:	9a05      	ldr	r2, [sp, #20]
 8006e26:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006e28:	4648      	mov	r0, r9
 8006e2a:	f001 fef7 	bl	8008c1c <__mdiff>
 8006e2e:	4604      	mov	r4, r0
 8006e30:	2800      	cmp	r0, #0
 8006e32:	f43f ae5f 	beq.w	8006af4 <_strtod_l+0x43c>
 8006e36:	68c3      	ldr	r3, [r0, #12]
 8006e38:	930c      	str	r3, [sp, #48]	; 0x30
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	60c3      	str	r3, [r0, #12]
 8006e3e:	4641      	mov	r1, r8
 8006e40:	f001 fed2 	bl	8008be8 <__mcmp>
 8006e44:	2800      	cmp	r0, #0
 8006e46:	da55      	bge.n	8006ef4 <_strtod_l+0x83c>
 8006e48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e4a:	b9e3      	cbnz	r3, 8006e86 <_strtod_l+0x7ce>
 8006e4c:	f1ba 0f00 	cmp.w	sl, #0
 8006e50:	d119      	bne.n	8006e86 <_strtod_l+0x7ce>
 8006e52:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e56:	b9b3      	cbnz	r3, 8006e86 <_strtod_l+0x7ce>
 8006e58:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006e5c:	0d1b      	lsrs	r3, r3, #20
 8006e5e:	051b      	lsls	r3, r3, #20
 8006e60:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006e64:	d90f      	bls.n	8006e86 <_strtod_l+0x7ce>
 8006e66:	6963      	ldr	r3, [r4, #20]
 8006e68:	b913      	cbnz	r3, 8006e70 <_strtod_l+0x7b8>
 8006e6a:	6923      	ldr	r3, [r4, #16]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	dd0a      	ble.n	8006e86 <_strtod_l+0x7ce>
 8006e70:	4621      	mov	r1, r4
 8006e72:	2201      	movs	r2, #1
 8006e74:	4648      	mov	r0, r9
 8006e76:	f001 fe63 	bl	8008b40 <__lshift>
 8006e7a:	4641      	mov	r1, r8
 8006e7c:	4604      	mov	r4, r0
 8006e7e:	f001 feb3 	bl	8008be8 <__mcmp>
 8006e82:	2800      	cmp	r0, #0
 8006e84:	dc67      	bgt.n	8006f56 <_strtod_l+0x89e>
 8006e86:	9b04      	ldr	r3, [sp, #16]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d171      	bne.n	8006f70 <_strtod_l+0x8b8>
 8006e8c:	e63d      	b.n	8006b0a <_strtod_l+0x452>
 8006e8e:	f018 0f01 	tst.w	r8, #1
 8006e92:	d004      	beq.n	8006e9e <_strtod_l+0x7e6>
 8006e94:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e98:	f7f9 fbb6 	bl	8000608 <__aeabi_dmul>
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006ea2:	3508      	adds	r5, #8
 8006ea4:	e6e5      	b.n	8006c72 <_strtod_l+0x5ba>
 8006ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8006eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8006eae:	ea03 0a0a 	and.w	sl, r3, sl
 8006eb2:	e6ff      	b.n	8006cb4 <_strtod_l+0x5fc>
 8006eb4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006eb8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8006ebc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006ec0:	36e2      	adds	r6, #226	; 0xe2
 8006ec2:	fa01 f306 	lsl.w	r3, r1, r6
 8006ec6:	930a      	str	r3, [sp, #40]	; 0x28
 8006ec8:	910f      	str	r1, [sp, #60]	; 0x3c
 8006eca:	e75d      	b.n	8006d88 <_strtod_l+0x6d0>
 8006ecc:	2300      	movs	r3, #0
 8006ece:	930a      	str	r3, [sp, #40]	; 0x28
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ed4:	e758      	b.n	8006d88 <_strtod_l+0x6d0>
 8006ed6:	4632      	mov	r2, r6
 8006ed8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006eda:	4648      	mov	r0, r9
 8006edc:	f001 fe30 	bl	8008b40 <__lshift>
 8006ee0:	901c      	str	r0, [sp, #112]	; 0x70
 8006ee2:	2800      	cmp	r0, #0
 8006ee4:	f47f af7c 	bne.w	8006de0 <_strtod_l+0x728>
 8006ee8:	e604      	b.n	8006af4 <_strtod_l+0x43c>
 8006eea:	bf00      	nop
 8006eec:	0800ca48 	.word	0x0800ca48
 8006ef0:	fffffc02 	.word	0xfffffc02
 8006ef4:	465d      	mov	r5, fp
 8006ef6:	f040 8086 	bne.w	8007006 <_strtod_l+0x94e>
 8006efa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006efc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f00:	b32a      	cbz	r2, 8006f4e <_strtod_l+0x896>
 8006f02:	4aaf      	ldr	r2, [pc, #700]	; (80071c0 <_strtod_l+0xb08>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d153      	bne.n	8006fb0 <_strtod_l+0x8f8>
 8006f08:	9b04      	ldr	r3, [sp, #16]
 8006f0a:	4650      	mov	r0, sl
 8006f0c:	b1d3      	cbz	r3, 8006f44 <_strtod_l+0x88c>
 8006f0e:	4aad      	ldr	r2, [pc, #692]	; (80071c4 <_strtod_l+0xb0c>)
 8006f10:	402a      	ands	r2, r5
 8006f12:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006f16:	f04f 31ff 	mov.w	r1, #4294967295
 8006f1a:	d816      	bhi.n	8006f4a <_strtod_l+0x892>
 8006f1c:	0d12      	lsrs	r2, r2, #20
 8006f1e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006f22:	fa01 f303 	lsl.w	r3, r1, r3
 8006f26:	4298      	cmp	r0, r3
 8006f28:	d142      	bne.n	8006fb0 <_strtod_l+0x8f8>
 8006f2a:	4ba7      	ldr	r3, [pc, #668]	; (80071c8 <_strtod_l+0xb10>)
 8006f2c:	429d      	cmp	r5, r3
 8006f2e:	d102      	bne.n	8006f36 <_strtod_l+0x87e>
 8006f30:	3001      	adds	r0, #1
 8006f32:	f43f addf 	beq.w	8006af4 <_strtod_l+0x43c>
 8006f36:	4ba3      	ldr	r3, [pc, #652]	; (80071c4 <_strtod_l+0xb0c>)
 8006f38:	402b      	ands	r3, r5
 8006f3a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006f3e:	f04f 0a00 	mov.w	sl, #0
 8006f42:	e7a0      	b.n	8006e86 <_strtod_l+0x7ce>
 8006f44:	f04f 33ff 	mov.w	r3, #4294967295
 8006f48:	e7ed      	b.n	8006f26 <_strtod_l+0x86e>
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	e7eb      	b.n	8006f26 <_strtod_l+0x86e>
 8006f4e:	bb7b      	cbnz	r3, 8006fb0 <_strtod_l+0x8f8>
 8006f50:	f1ba 0f00 	cmp.w	sl, #0
 8006f54:	d12c      	bne.n	8006fb0 <_strtod_l+0x8f8>
 8006f56:	9904      	ldr	r1, [sp, #16]
 8006f58:	4a9a      	ldr	r2, [pc, #616]	; (80071c4 <_strtod_l+0xb0c>)
 8006f5a:	465b      	mov	r3, fp
 8006f5c:	b1f1      	cbz	r1, 8006f9c <_strtod_l+0x8e4>
 8006f5e:	ea02 010b 	and.w	r1, r2, fp
 8006f62:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006f66:	dc19      	bgt.n	8006f9c <_strtod_l+0x8e4>
 8006f68:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006f6c:	f77f ae5b 	ble.w	8006c26 <_strtod_l+0x56e>
 8006f70:	4a96      	ldr	r2, [pc, #600]	; (80071cc <_strtod_l+0xb14>)
 8006f72:	2300      	movs	r3, #0
 8006f74:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8006f78:	4650      	mov	r0, sl
 8006f7a:	4659      	mov	r1, fp
 8006f7c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006f80:	f7f9 fb42 	bl	8000608 <__aeabi_dmul>
 8006f84:	4682      	mov	sl, r0
 8006f86:	468b      	mov	fp, r1
 8006f88:	2900      	cmp	r1, #0
 8006f8a:	f47f adbe 	bne.w	8006b0a <_strtod_l+0x452>
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	f47f adbb 	bne.w	8006b0a <_strtod_l+0x452>
 8006f94:	2322      	movs	r3, #34	; 0x22
 8006f96:	f8c9 3000 	str.w	r3, [r9]
 8006f9a:	e5b6      	b.n	8006b0a <_strtod_l+0x452>
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006fa2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006fa6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006faa:	f04f 3aff 	mov.w	sl, #4294967295
 8006fae:	e76a      	b.n	8006e86 <_strtod_l+0x7ce>
 8006fb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fb2:	b193      	cbz	r3, 8006fda <_strtod_l+0x922>
 8006fb4:	422b      	tst	r3, r5
 8006fb6:	f43f af66 	beq.w	8006e86 <_strtod_l+0x7ce>
 8006fba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fbc:	9a04      	ldr	r2, [sp, #16]
 8006fbe:	4650      	mov	r0, sl
 8006fc0:	4659      	mov	r1, fp
 8006fc2:	b173      	cbz	r3, 8006fe2 <_strtod_l+0x92a>
 8006fc4:	f7ff fb5c 	bl	8006680 <sulp>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	460b      	mov	r3, r1
 8006fcc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006fd0:	f7f9 f964 	bl	800029c <__adddf3>
 8006fd4:	4682      	mov	sl, r0
 8006fd6:	468b      	mov	fp, r1
 8006fd8:	e755      	b.n	8006e86 <_strtod_l+0x7ce>
 8006fda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006fdc:	ea13 0f0a 	tst.w	r3, sl
 8006fe0:	e7e9      	b.n	8006fb6 <_strtod_l+0x8fe>
 8006fe2:	f7ff fb4d 	bl	8006680 <sulp>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	460b      	mov	r3, r1
 8006fea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006fee:	f7f9 f953 	bl	8000298 <__aeabi_dsub>
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	4682      	mov	sl, r0
 8006ff8:	468b      	mov	fp, r1
 8006ffa:	f7f9 fd6d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ffe:	2800      	cmp	r0, #0
 8007000:	f47f ae11 	bne.w	8006c26 <_strtod_l+0x56e>
 8007004:	e73f      	b.n	8006e86 <_strtod_l+0x7ce>
 8007006:	4641      	mov	r1, r8
 8007008:	4620      	mov	r0, r4
 800700a:	f001 ff2a 	bl	8008e62 <__ratio>
 800700e:	ec57 6b10 	vmov	r6, r7, d0
 8007012:	2200      	movs	r2, #0
 8007014:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007018:	ee10 0a10 	vmov	r0, s0
 800701c:	4639      	mov	r1, r7
 800701e:	f7f9 fd6f 	bl	8000b00 <__aeabi_dcmple>
 8007022:	2800      	cmp	r0, #0
 8007024:	d077      	beq.n	8007116 <_strtod_l+0xa5e>
 8007026:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007028:	2b00      	cmp	r3, #0
 800702a:	d04a      	beq.n	80070c2 <_strtod_l+0xa0a>
 800702c:	4b68      	ldr	r3, [pc, #416]	; (80071d0 <_strtod_l+0xb18>)
 800702e:	2200      	movs	r2, #0
 8007030:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007034:	4f66      	ldr	r7, [pc, #408]	; (80071d0 <_strtod_l+0xb18>)
 8007036:	2600      	movs	r6, #0
 8007038:	4b62      	ldr	r3, [pc, #392]	; (80071c4 <_strtod_l+0xb0c>)
 800703a:	402b      	ands	r3, r5
 800703c:	930f      	str	r3, [sp, #60]	; 0x3c
 800703e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007040:	4b64      	ldr	r3, [pc, #400]	; (80071d4 <_strtod_l+0xb1c>)
 8007042:	429a      	cmp	r2, r3
 8007044:	f040 80ce 	bne.w	80071e4 <_strtod_l+0xb2c>
 8007048:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800704c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007050:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8007054:	ec4b ab10 	vmov	d0, sl, fp
 8007058:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800705c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007060:	f001 fe3a 	bl	8008cd8 <__ulp>
 8007064:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007068:	ec53 2b10 	vmov	r2, r3, d0
 800706c:	f7f9 facc 	bl	8000608 <__aeabi_dmul>
 8007070:	4652      	mov	r2, sl
 8007072:	465b      	mov	r3, fp
 8007074:	f7f9 f912 	bl	800029c <__adddf3>
 8007078:	460b      	mov	r3, r1
 800707a:	4952      	ldr	r1, [pc, #328]	; (80071c4 <_strtod_l+0xb0c>)
 800707c:	4a56      	ldr	r2, [pc, #344]	; (80071d8 <_strtod_l+0xb20>)
 800707e:	4019      	ands	r1, r3
 8007080:	4291      	cmp	r1, r2
 8007082:	4682      	mov	sl, r0
 8007084:	d95b      	bls.n	800713e <_strtod_l+0xa86>
 8007086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007088:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800708c:	4293      	cmp	r3, r2
 800708e:	d103      	bne.n	8007098 <_strtod_l+0x9e0>
 8007090:	9b08      	ldr	r3, [sp, #32]
 8007092:	3301      	adds	r3, #1
 8007094:	f43f ad2e 	beq.w	8006af4 <_strtod_l+0x43c>
 8007098:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80071c8 <_strtod_l+0xb10>
 800709c:	f04f 3aff 	mov.w	sl, #4294967295
 80070a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80070a2:	4648      	mov	r0, r9
 80070a4:	f001 fb81 	bl	80087aa <_Bfree>
 80070a8:	9905      	ldr	r1, [sp, #20]
 80070aa:	4648      	mov	r0, r9
 80070ac:	f001 fb7d 	bl	80087aa <_Bfree>
 80070b0:	4641      	mov	r1, r8
 80070b2:	4648      	mov	r0, r9
 80070b4:	f001 fb79 	bl	80087aa <_Bfree>
 80070b8:	4621      	mov	r1, r4
 80070ba:	4648      	mov	r0, r9
 80070bc:	f001 fb75 	bl	80087aa <_Bfree>
 80070c0:	e619      	b.n	8006cf6 <_strtod_l+0x63e>
 80070c2:	f1ba 0f00 	cmp.w	sl, #0
 80070c6:	d11a      	bne.n	80070fe <_strtod_l+0xa46>
 80070c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070cc:	b9eb      	cbnz	r3, 800710a <_strtod_l+0xa52>
 80070ce:	2200      	movs	r2, #0
 80070d0:	4b3f      	ldr	r3, [pc, #252]	; (80071d0 <_strtod_l+0xb18>)
 80070d2:	4630      	mov	r0, r6
 80070d4:	4639      	mov	r1, r7
 80070d6:	f7f9 fd09 	bl	8000aec <__aeabi_dcmplt>
 80070da:	b9c8      	cbnz	r0, 8007110 <_strtod_l+0xa58>
 80070dc:	4630      	mov	r0, r6
 80070de:	4639      	mov	r1, r7
 80070e0:	2200      	movs	r2, #0
 80070e2:	4b3e      	ldr	r3, [pc, #248]	; (80071dc <_strtod_l+0xb24>)
 80070e4:	f7f9 fa90 	bl	8000608 <__aeabi_dmul>
 80070e8:	4606      	mov	r6, r0
 80070ea:	460f      	mov	r7, r1
 80070ec:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80070f0:	9618      	str	r6, [sp, #96]	; 0x60
 80070f2:	9319      	str	r3, [sp, #100]	; 0x64
 80070f4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80070f8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80070fc:	e79c      	b.n	8007038 <_strtod_l+0x980>
 80070fe:	f1ba 0f01 	cmp.w	sl, #1
 8007102:	d102      	bne.n	800710a <_strtod_l+0xa52>
 8007104:	2d00      	cmp	r5, #0
 8007106:	f43f ad8e 	beq.w	8006c26 <_strtod_l+0x56e>
 800710a:	2200      	movs	r2, #0
 800710c:	4b34      	ldr	r3, [pc, #208]	; (80071e0 <_strtod_l+0xb28>)
 800710e:	e78f      	b.n	8007030 <_strtod_l+0x978>
 8007110:	2600      	movs	r6, #0
 8007112:	4f32      	ldr	r7, [pc, #200]	; (80071dc <_strtod_l+0xb24>)
 8007114:	e7ea      	b.n	80070ec <_strtod_l+0xa34>
 8007116:	4b31      	ldr	r3, [pc, #196]	; (80071dc <_strtod_l+0xb24>)
 8007118:	4630      	mov	r0, r6
 800711a:	4639      	mov	r1, r7
 800711c:	2200      	movs	r2, #0
 800711e:	f7f9 fa73 	bl	8000608 <__aeabi_dmul>
 8007122:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007124:	4606      	mov	r6, r0
 8007126:	460f      	mov	r7, r1
 8007128:	b933      	cbnz	r3, 8007138 <_strtod_l+0xa80>
 800712a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800712e:	9010      	str	r0, [sp, #64]	; 0x40
 8007130:	9311      	str	r3, [sp, #68]	; 0x44
 8007132:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007136:	e7df      	b.n	80070f8 <_strtod_l+0xa40>
 8007138:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800713c:	e7f9      	b.n	8007132 <_strtod_l+0xa7a>
 800713e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007142:	9b04      	ldr	r3, [sp, #16]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1ab      	bne.n	80070a0 <_strtod_l+0x9e8>
 8007148:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800714c:	0d1b      	lsrs	r3, r3, #20
 800714e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007150:	051b      	lsls	r3, r3, #20
 8007152:	429a      	cmp	r2, r3
 8007154:	465d      	mov	r5, fp
 8007156:	d1a3      	bne.n	80070a0 <_strtod_l+0x9e8>
 8007158:	4639      	mov	r1, r7
 800715a:	4630      	mov	r0, r6
 800715c:	f7f9 fd04 	bl	8000b68 <__aeabi_d2iz>
 8007160:	f7f9 f9e8 	bl	8000534 <__aeabi_i2d>
 8007164:	460b      	mov	r3, r1
 8007166:	4602      	mov	r2, r0
 8007168:	4639      	mov	r1, r7
 800716a:	4630      	mov	r0, r6
 800716c:	f7f9 f894 	bl	8000298 <__aeabi_dsub>
 8007170:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007172:	4606      	mov	r6, r0
 8007174:	460f      	mov	r7, r1
 8007176:	b933      	cbnz	r3, 8007186 <_strtod_l+0xace>
 8007178:	f1ba 0f00 	cmp.w	sl, #0
 800717c:	d103      	bne.n	8007186 <_strtod_l+0xace>
 800717e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8007182:	2d00      	cmp	r5, #0
 8007184:	d06d      	beq.n	8007262 <_strtod_l+0xbaa>
 8007186:	a30a      	add	r3, pc, #40	; (adr r3, 80071b0 <_strtod_l+0xaf8>)
 8007188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718c:	4630      	mov	r0, r6
 800718e:	4639      	mov	r1, r7
 8007190:	f7f9 fcac 	bl	8000aec <__aeabi_dcmplt>
 8007194:	2800      	cmp	r0, #0
 8007196:	f47f acb8 	bne.w	8006b0a <_strtod_l+0x452>
 800719a:	a307      	add	r3, pc, #28	; (adr r3, 80071b8 <_strtod_l+0xb00>)
 800719c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a0:	4630      	mov	r0, r6
 80071a2:	4639      	mov	r1, r7
 80071a4:	f7f9 fcc0 	bl	8000b28 <__aeabi_dcmpgt>
 80071a8:	2800      	cmp	r0, #0
 80071aa:	f43f af79 	beq.w	80070a0 <_strtod_l+0x9e8>
 80071ae:	e4ac      	b.n	8006b0a <_strtod_l+0x452>
 80071b0:	94a03595 	.word	0x94a03595
 80071b4:	3fdfffff 	.word	0x3fdfffff
 80071b8:	35afe535 	.word	0x35afe535
 80071bc:	3fe00000 	.word	0x3fe00000
 80071c0:	000fffff 	.word	0x000fffff
 80071c4:	7ff00000 	.word	0x7ff00000
 80071c8:	7fefffff 	.word	0x7fefffff
 80071cc:	39500000 	.word	0x39500000
 80071d0:	3ff00000 	.word	0x3ff00000
 80071d4:	7fe00000 	.word	0x7fe00000
 80071d8:	7c9fffff 	.word	0x7c9fffff
 80071dc:	3fe00000 	.word	0x3fe00000
 80071e0:	bff00000 	.word	0xbff00000
 80071e4:	9b04      	ldr	r3, [sp, #16]
 80071e6:	b333      	cbz	r3, 8007236 <_strtod_l+0xb7e>
 80071e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071ea:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80071ee:	d822      	bhi.n	8007236 <_strtod_l+0xb7e>
 80071f0:	a327      	add	r3, pc, #156	; (adr r3, 8007290 <_strtod_l+0xbd8>)
 80071f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f6:	4630      	mov	r0, r6
 80071f8:	4639      	mov	r1, r7
 80071fa:	f7f9 fc81 	bl	8000b00 <__aeabi_dcmple>
 80071fe:	b1a0      	cbz	r0, 800722a <_strtod_l+0xb72>
 8007200:	4639      	mov	r1, r7
 8007202:	4630      	mov	r0, r6
 8007204:	f7f9 fcd8 	bl	8000bb8 <__aeabi_d2uiz>
 8007208:	2800      	cmp	r0, #0
 800720a:	bf08      	it	eq
 800720c:	2001      	moveq	r0, #1
 800720e:	f7f9 f981 	bl	8000514 <__aeabi_ui2d>
 8007212:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007214:	4606      	mov	r6, r0
 8007216:	460f      	mov	r7, r1
 8007218:	bb03      	cbnz	r3, 800725c <_strtod_l+0xba4>
 800721a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800721e:	9012      	str	r0, [sp, #72]	; 0x48
 8007220:	9313      	str	r3, [sp, #76]	; 0x4c
 8007222:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007226:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800722a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800722c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800722e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007232:	1a9b      	subs	r3, r3, r2
 8007234:	930b      	str	r3, [sp, #44]	; 0x2c
 8007236:	ed9d 0b08 	vldr	d0, [sp, #32]
 800723a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800723e:	f001 fd4b 	bl	8008cd8 <__ulp>
 8007242:	4650      	mov	r0, sl
 8007244:	ec53 2b10 	vmov	r2, r3, d0
 8007248:	4659      	mov	r1, fp
 800724a:	f7f9 f9dd 	bl	8000608 <__aeabi_dmul>
 800724e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007252:	f7f9 f823 	bl	800029c <__adddf3>
 8007256:	4682      	mov	sl, r0
 8007258:	468b      	mov	fp, r1
 800725a:	e772      	b.n	8007142 <_strtod_l+0xa8a>
 800725c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8007260:	e7df      	b.n	8007222 <_strtod_l+0xb6a>
 8007262:	a30d      	add	r3, pc, #52	; (adr r3, 8007298 <_strtod_l+0xbe0>)
 8007264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007268:	f7f9 fc40 	bl	8000aec <__aeabi_dcmplt>
 800726c:	e79c      	b.n	80071a8 <_strtod_l+0xaf0>
 800726e:	2300      	movs	r3, #0
 8007270:	930d      	str	r3, [sp, #52]	; 0x34
 8007272:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007274:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007276:	6013      	str	r3, [r2, #0]
 8007278:	f7ff ba61 	b.w	800673e <_strtod_l+0x86>
 800727c:	2b65      	cmp	r3, #101	; 0x65
 800727e:	f04f 0200 	mov.w	r2, #0
 8007282:	f43f ab4e 	beq.w	8006922 <_strtod_l+0x26a>
 8007286:	2101      	movs	r1, #1
 8007288:	4614      	mov	r4, r2
 800728a:	9104      	str	r1, [sp, #16]
 800728c:	f7ff bacb 	b.w	8006826 <_strtod_l+0x16e>
 8007290:	ffc00000 	.word	0xffc00000
 8007294:	41dfffff 	.word	0x41dfffff
 8007298:	94a03595 	.word	0x94a03595
 800729c:	3fcfffff 	.word	0x3fcfffff

080072a0 <_strtod_r>:
 80072a0:	4b05      	ldr	r3, [pc, #20]	; (80072b8 <_strtod_r+0x18>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	b410      	push	{r4}
 80072a6:	6a1b      	ldr	r3, [r3, #32]
 80072a8:	4c04      	ldr	r4, [pc, #16]	; (80072bc <_strtod_r+0x1c>)
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	bf08      	it	eq
 80072ae:	4623      	moveq	r3, r4
 80072b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072b4:	f7ff ba00 	b.w	80066b8 <_strtod_l>
 80072b8:	2000003c 	.word	0x2000003c
 80072bc:	200000a0 	.word	0x200000a0

080072c0 <_strtol_l.isra.0>:
 80072c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072c4:	4680      	mov	r8, r0
 80072c6:	4689      	mov	r9, r1
 80072c8:	4692      	mov	sl, r2
 80072ca:	461e      	mov	r6, r3
 80072cc:	460f      	mov	r7, r1
 80072ce:	463d      	mov	r5, r7
 80072d0:	9808      	ldr	r0, [sp, #32]
 80072d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072d6:	f001 f9ed 	bl	80086b4 <__locale_ctype_ptr_l>
 80072da:	4420      	add	r0, r4
 80072dc:	7843      	ldrb	r3, [r0, #1]
 80072de:	f013 0308 	ands.w	r3, r3, #8
 80072e2:	d132      	bne.n	800734a <_strtol_l.isra.0+0x8a>
 80072e4:	2c2d      	cmp	r4, #45	; 0x2d
 80072e6:	d132      	bne.n	800734e <_strtol_l.isra.0+0x8e>
 80072e8:	787c      	ldrb	r4, [r7, #1]
 80072ea:	1cbd      	adds	r5, r7, #2
 80072ec:	2201      	movs	r2, #1
 80072ee:	2e00      	cmp	r6, #0
 80072f0:	d05d      	beq.n	80073ae <_strtol_l.isra.0+0xee>
 80072f2:	2e10      	cmp	r6, #16
 80072f4:	d109      	bne.n	800730a <_strtol_l.isra.0+0x4a>
 80072f6:	2c30      	cmp	r4, #48	; 0x30
 80072f8:	d107      	bne.n	800730a <_strtol_l.isra.0+0x4a>
 80072fa:	782b      	ldrb	r3, [r5, #0]
 80072fc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007300:	2b58      	cmp	r3, #88	; 0x58
 8007302:	d14f      	bne.n	80073a4 <_strtol_l.isra.0+0xe4>
 8007304:	786c      	ldrb	r4, [r5, #1]
 8007306:	2610      	movs	r6, #16
 8007308:	3502      	adds	r5, #2
 800730a:	2a00      	cmp	r2, #0
 800730c:	bf14      	ite	ne
 800730e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007312:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007316:	2700      	movs	r7, #0
 8007318:	fbb1 fcf6 	udiv	ip, r1, r6
 800731c:	4638      	mov	r0, r7
 800731e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007322:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007326:	2b09      	cmp	r3, #9
 8007328:	d817      	bhi.n	800735a <_strtol_l.isra.0+0x9a>
 800732a:	461c      	mov	r4, r3
 800732c:	42a6      	cmp	r6, r4
 800732e:	dd23      	ble.n	8007378 <_strtol_l.isra.0+0xb8>
 8007330:	1c7b      	adds	r3, r7, #1
 8007332:	d007      	beq.n	8007344 <_strtol_l.isra.0+0x84>
 8007334:	4584      	cmp	ip, r0
 8007336:	d31c      	bcc.n	8007372 <_strtol_l.isra.0+0xb2>
 8007338:	d101      	bne.n	800733e <_strtol_l.isra.0+0x7e>
 800733a:	45a6      	cmp	lr, r4
 800733c:	db19      	blt.n	8007372 <_strtol_l.isra.0+0xb2>
 800733e:	fb00 4006 	mla	r0, r0, r6, r4
 8007342:	2701      	movs	r7, #1
 8007344:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007348:	e7eb      	b.n	8007322 <_strtol_l.isra.0+0x62>
 800734a:	462f      	mov	r7, r5
 800734c:	e7bf      	b.n	80072ce <_strtol_l.isra.0+0xe>
 800734e:	2c2b      	cmp	r4, #43	; 0x2b
 8007350:	bf04      	itt	eq
 8007352:	1cbd      	addeq	r5, r7, #2
 8007354:	787c      	ldrbeq	r4, [r7, #1]
 8007356:	461a      	mov	r2, r3
 8007358:	e7c9      	b.n	80072ee <_strtol_l.isra.0+0x2e>
 800735a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800735e:	2b19      	cmp	r3, #25
 8007360:	d801      	bhi.n	8007366 <_strtol_l.isra.0+0xa6>
 8007362:	3c37      	subs	r4, #55	; 0x37
 8007364:	e7e2      	b.n	800732c <_strtol_l.isra.0+0x6c>
 8007366:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800736a:	2b19      	cmp	r3, #25
 800736c:	d804      	bhi.n	8007378 <_strtol_l.isra.0+0xb8>
 800736e:	3c57      	subs	r4, #87	; 0x57
 8007370:	e7dc      	b.n	800732c <_strtol_l.isra.0+0x6c>
 8007372:	f04f 37ff 	mov.w	r7, #4294967295
 8007376:	e7e5      	b.n	8007344 <_strtol_l.isra.0+0x84>
 8007378:	1c7b      	adds	r3, r7, #1
 800737a:	d108      	bne.n	800738e <_strtol_l.isra.0+0xce>
 800737c:	2322      	movs	r3, #34	; 0x22
 800737e:	f8c8 3000 	str.w	r3, [r8]
 8007382:	4608      	mov	r0, r1
 8007384:	f1ba 0f00 	cmp.w	sl, #0
 8007388:	d107      	bne.n	800739a <_strtol_l.isra.0+0xda>
 800738a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800738e:	b102      	cbz	r2, 8007392 <_strtol_l.isra.0+0xd2>
 8007390:	4240      	negs	r0, r0
 8007392:	f1ba 0f00 	cmp.w	sl, #0
 8007396:	d0f8      	beq.n	800738a <_strtol_l.isra.0+0xca>
 8007398:	b10f      	cbz	r7, 800739e <_strtol_l.isra.0+0xde>
 800739a:	f105 39ff 	add.w	r9, r5, #4294967295
 800739e:	f8ca 9000 	str.w	r9, [sl]
 80073a2:	e7f2      	b.n	800738a <_strtol_l.isra.0+0xca>
 80073a4:	2430      	movs	r4, #48	; 0x30
 80073a6:	2e00      	cmp	r6, #0
 80073a8:	d1af      	bne.n	800730a <_strtol_l.isra.0+0x4a>
 80073aa:	2608      	movs	r6, #8
 80073ac:	e7ad      	b.n	800730a <_strtol_l.isra.0+0x4a>
 80073ae:	2c30      	cmp	r4, #48	; 0x30
 80073b0:	d0a3      	beq.n	80072fa <_strtol_l.isra.0+0x3a>
 80073b2:	260a      	movs	r6, #10
 80073b4:	e7a9      	b.n	800730a <_strtol_l.isra.0+0x4a>
	...

080073b8 <_strtol_r>:
 80073b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073ba:	4c06      	ldr	r4, [pc, #24]	; (80073d4 <_strtol_r+0x1c>)
 80073bc:	4d06      	ldr	r5, [pc, #24]	; (80073d8 <_strtol_r+0x20>)
 80073be:	6824      	ldr	r4, [r4, #0]
 80073c0:	6a24      	ldr	r4, [r4, #32]
 80073c2:	2c00      	cmp	r4, #0
 80073c4:	bf08      	it	eq
 80073c6:	462c      	moveq	r4, r5
 80073c8:	9400      	str	r4, [sp, #0]
 80073ca:	f7ff ff79 	bl	80072c0 <_strtol_l.isra.0>
 80073ce:	b003      	add	sp, #12
 80073d0:	bd30      	pop	{r4, r5, pc}
 80073d2:	bf00      	nop
 80073d4:	2000003c 	.word	0x2000003c
 80073d8:	200000a0 	.word	0x200000a0

080073dc <quorem>:
 80073dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e0:	6903      	ldr	r3, [r0, #16]
 80073e2:	690c      	ldr	r4, [r1, #16]
 80073e4:	42a3      	cmp	r3, r4
 80073e6:	4680      	mov	r8, r0
 80073e8:	f2c0 8082 	blt.w	80074f0 <quorem+0x114>
 80073ec:	3c01      	subs	r4, #1
 80073ee:	f101 0714 	add.w	r7, r1, #20
 80073f2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80073f6:	f100 0614 	add.w	r6, r0, #20
 80073fa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80073fe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007402:	eb06 030c 	add.w	r3, r6, ip
 8007406:	3501      	adds	r5, #1
 8007408:	eb07 090c 	add.w	r9, r7, ip
 800740c:	9301      	str	r3, [sp, #4]
 800740e:	fbb0 f5f5 	udiv	r5, r0, r5
 8007412:	b395      	cbz	r5, 800747a <quorem+0x9e>
 8007414:	f04f 0a00 	mov.w	sl, #0
 8007418:	4638      	mov	r0, r7
 800741a:	46b6      	mov	lr, r6
 800741c:	46d3      	mov	fp, sl
 800741e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007422:	b293      	uxth	r3, r2
 8007424:	fb05 a303 	mla	r3, r5, r3, sl
 8007428:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800742c:	b29b      	uxth	r3, r3
 800742e:	ebab 0303 	sub.w	r3, fp, r3
 8007432:	0c12      	lsrs	r2, r2, #16
 8007434:	f8de b000 	ldr.w	fp, [lr]
 8007438:	fb05 a202 	mla	r2, r5, r2, sl
 800743c:	fa13 f38b 	uxtah	r3, r3, fp
 8007440:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007444:	fa1f fb82 	uxth.w	fp, r2
 8007448:	f8de 2000 	ldr.w	r2, [lr]
 800744c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007450:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007454:	b29b      	uxth	r3, r3
 8007456:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800745a:	4581      	cmp	r9, r0
 800745c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007460:	f84e 3b04 	str.w	r3, [lr], #4
 8007464:	d2db      	bcs.n	800741e <quorem+0x42>
 8007466:	f856 300c 	ldr.w	r3, [r6, ip]
 800746a:	b933      	cbnz	r3, 800747a <quorem+0x9e>
 800746c:	9b01      	ldr	r3, [sp, #4]
 800746e:	3b04      	subs	r3, #4
 8007470:	429e      	cmp	r6, r3
 8007472:	461a      	mov	r2, r3
 8007474:	d330      	bcc.n	80074d8 <quorem+0xfc>
 8007476:	f8c8 4010 	str.w	r4, [r8, #16]
 800747a:	4640      	mov	r0, r8
 800747c:	f001 fbb4 	bl	8008be8 <__mcmp>
 8007480:	2800      	cmp	r0, #0
 8007482:	db25      	blt.n	80074d0 <quorem+0xf4>
 8007484:	3501      	adds	r5, #1
 8007486:	4630      	mov	r0, r6
 8007488:	f04f 0c00 	mov.w	ip, #0
 800748c:	f857 2b04 	ldr.w	r2, [r7], #4
 8007490:	f8d0 e000 	ldr.w	lr, [r0]
 8007494:	b293      	uxth	r3, r2
 8007496:	ebac 0303 	sub.w	r3, ip, r3
 800749a:	0c12      	lsrs	r2, r2, #16
 800749c:	fa13 f38e 	uxtah	r3, r3, lr
 80074a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80074a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074ae:	45b9      	cmp	r9, r7
 80074b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80074b4:	f840 3b04 	str.w	r3, [r0], #4
 80074b8:	d2e8      	bcs.n	800748c <quorem+0xb0>
 80074ba:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80074be:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80074c2:	b92a      	cbnz	r2, 80074d0 <quorem+0xf4>
 80074c4:	3b04      	subs	r3, #4
 80074c6:	429e      	cmp	r6, r3
 80074c8:	461a      	mov	r2, r3
 80074ca:	d30b      	bcc.n	80074e4 <quorem+0x108>
 80074cc:	f8c8 4010 	str.w	r4, [r8, #16]
 80074d0:	4628      	mov	r0, r5
 80074d2:	b003      	add	sp, #12
 80074d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d8:	6812      	ldr	r2, [r2, #0]
 80074da:	3b04      	subs	r3, #4
 80074dc:	2a00      	cmp	r2, #0
 80074de:	d1ca      	bne.n	8007476 <quorem+0x9a>
 80074e0:	3c01      	subs	r4, #1
 80074e2:	e7c5      	b.n	8007470 <quorem+0x94>
 80074e4:	6812      	ldr	r2, [r2, #0]
 80074e6:	3b04      	subs	r3, #4
 80074e8:	2a00      	cmp	r2, #0
 80074ea:	d1ef      	bne.n	80074cc <quorem+0xf0>
 80074ec:	3c01      	subs	r4, #1
 80074ee:	e7ea      	b.n	80074c6 <quorem+0xea>
 80074f0:	2000      	movs	r0, #0
 80074f2:	e7ee      	b.n	80074d2 <quorem+0xf6>
 80074f4:	0000      	movs	r0, r0
	...

080074f8 <_dtoa_r>:
 80074f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074fc:	ec57 6b10 	vmov	r6, r7, d0
 8007500:	b097      	sub	sp, #92	; 0x5c
 8007502:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007504:	9106      	str	r1, [sp, #24]
 8007506:	4604      	mov	r4, r0
 8007508:	920b      	str	r2, [sp, #44]	; 0x2c
 800750a:	9312      	str	r3, [sp, #72]	; 0x48
 800750c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007510:	e9cd 6700 	strd	r6, r7, [sp]
 8007514:	b93d      	cbnz	r5, 8007526 <_dtoa_r+0x2e>
 8007516:	2010      	movs	r0, #16
 8007518:	f001 f8ee 	bl	80086f8 <malloc>
 800751c:	6260      	str	r0, [r4, #36]	; 0x24
 800751e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007522:	6005      	str	r5, [r0, #0]
 8007524:	60c5      	str	r5, [r0, #12]
 8007526:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007528:	6819      	ldr	r1, [r3, #0]
 800752a:	b151      	cbz	r1, 8007542 <_dtoa_r+0x4a>
 800752c:	685a      	ldr	r2, [r3, #4]
 800752e:	604a      	str	r2, [r1, #4]
 8007530:	2301      	movs	r3, #1
 8007532:	4093      	lsls	r3, r2
 8007534:	608b      	str	r3, [r1, #8]
 8007536:	4620      	mov	r0, r4
 8007538:	f001 f937 	bl	80087aa <_Bfree>
 800753c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800753e:	2200      	movs	r2, #0
 8007540:	601a      	str	r2, [r3, #0]
 8007542:	1e3b      	subs	r3, r7, #0
 8007544:	bfbb      	ittet	lt
 8007546:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800754a:	9301      	strlt	r3, [sp, #4]
 800754c:	2300      	movge	r3, #0
 800754e:	2201      	movlt	r2, #1
 8007550:	bfac      	ite	ge
 8007552:	f8c8 3000 	strge.w	r3, [r8]
 8007556:	f8c8 2000 	strlt.w	r2, [r8]
 800755a:	4baf      	ldr	r3, [pc, #700]	; (8007818 <_dtoa_r+0x320>)
 800755c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007560:	ea33 0308 	bics.w	r3, r3, r8
 8007564:	d114      	bne.n	8007590 <_dtoa_r+0x98>
 8007566:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007568:	f242 730f 	movw	r3, #9999	; 0x270f
 800756c:	6013      	str	r3, [r2, #0]
 800756e:	9b00      	ldr	r3, [sp, #0]
 8007570:	b923      	cbnz	r3, 800757c <_dtoa_r+0x84>
 8007572:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007576:	2800      	cmp	r0, #0
 8007578:	f000 8542 	beq.w	8008000 <_dtoa_r+0xb08>
 800757c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800757e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800782c <_dtoa_r+0x334>
 8007582:	2b00      	cmp	r3, #0
 8007584:	f000 8544 	beq.w	8008010 <_dtoa_r+0xb18>
 8007588:	f10b 0303 	add.w	r3, fp, #3
 800758c:	f000 bd3e 	b.w	800800c <_dtoa_r+0xb14>
 8007590:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007594:	2200      	movs	r2, #0
 8007596:	2300      	movs	r3, #0
 8007598:	4630      	mov	r0, r6
 800759a:	4639      	mov	r1, r7
 800759c:	f7f9 fa9c 	bl	8000ad8 <__aeabi_dcmpeq>
 80075a0:	4681      	mov	r9, r0
 80075a2:	b168      	cbz	r0, 80075c0 <_dtoa_r+0xc8>
 80075a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80075a6:	2301      	movs	r3, #1
 80075a8:	6013      	str	r3, [r2, #0]
 80075aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f000 8524 	beq.w	8007ffa <_dtoa_r+0xb02>
 80075b2:	4b9a      	ldr	r3, [pc, #616]	; (800781c <_dtoa_r+0x324>)
 80075b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80075b6:	f103 3bff 	add.w	fp, r3, #4294967295
 80075ba:	6013      	str	r3, [r2, #0]
 80075bc:	f000 bd28 	b.w	8008010 <_dtoa_r+0xb18>
 80075c0:	aa14      	add	r2, sp, #80	; 0x50
 80075c2:	a915      	add	r1, sp, #84	; 0x54
 80075c4:	ec47 6b10 	vmov	d0, r6, r7
 80075c8:	4620      	mov	r0, r4
 80075ca:	f001 fbfb 	bl	8008dc4 <__d2b>
 80075ce:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80075d2:	9004      	str	r0, [sp, #16]
 80075d4:	2d00      	cmp	r5, #0
 80075d6:	d07c      	beq.n	80076d2 <_dtoa_r+0x1da>
 80075d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80075dc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80075e0:	46b2      	mov	sl, r6
 80075e2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80075e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80075ea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80075ee:	2200      	movs	r2, #0
 80075f0:	4b8b      	ldr	r3, [pc, #556]	; (8007820 <_dtoa_r+0x328>)
 80075f2:	4650      	mov	r0, sl
 80075f4:	4659      	mov	r1, fp
 80075f6:	f7f8 fe4f 	bl	8000298 <__aeabi_dsub>
 80075fa:	a381      	add	r3, pc, #516	; (adr r3, 8007800 <_dtoa_r+0x308>)
 80075fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007600:	f7f9 f802 	bl	8000608 <__aeabi_dmul>
 8007604:	a380      	add	r3, pc, #512	; (adr r3, 8007808 <_dtoa_r+0x310>)
 8007606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760a:	f7f8 fe47 	bl	800029c <__adddf3>
 800760e:	4606      	mov	r6, r0
 8007610:	4628      	mov	r0, r5
 8007612:	460f      	mov	r7, r1
 8007614:	f7f8 ff8e 	bl	8000534 <__aeabi_i2d>
 8007618:	a37d      	add	r3, pc, #500	; (adr r3, 8007810 <_dtoa_r+0x318>)
 800761a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761e:	f7f8 fff3 	bl	8000608 <__aeabi_dmul>
 8007622:	4602      	mov	r2, r0
 8007624:	460b      	mov	r3, r1
 8007626:	4630      	mov	r0, r6
 8007628:	4639      	mov	r1, r7
 800762a:	f7f8 fe37 	bl	800029c <__adddf3>
 800762e:	4606      	mov	r6, r0
 8007630:	460f      	mov	r7, r1
 8007632:	f7f9 fa99 	bl	8000b68 <__aeabi_d2iz>
 8007636:	2200      	movs	r2, #0
 8007638:	4682      	mov	sl, r0
 800763a:	2300      	movs	r3, #0
 800763c:	4630      	mov	r0, r6
 800763e:	4639      	mov	r1, r7
 8007640:	f7f9 fa54 	bl	8000aec <__aeabi_dcmplt>
 8007644:	b148      	cbz	r0, 800765a <_dtoa_r+0x162>
 8007646:	4650      	mov	r0, sl
 8007648:	f7f8 ff74 	bl	8000534 <__aeabi_i2d>
 800764c:	4632      	mov	r2, r6
 800764e:	463b      	mov	r3, r7
 8007650:	f7f9 fa42 	bl	8000ad8 <__aeabi_dcmpeq>
 8007654:	b908      	cbnz	r0, 800765a <_dtoa_r+0x162>
 8007656:	f10a 3aff 	add.w	sl, sl, #4294967295
 800765a:	f1ba 0f16 	cmp.w	sl, #22
 800765e:	d859      	bhi.n	8007714 <_dtoa_r+0x21c>
 8007660:	4970      	ldr	r1, [pc, #448]	; (8007824 <_dtoa_r+0x32c>)
 8007662:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007666:	e9dd 2300 	ldrd	r2, r3, [sp]
 800766a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800766e:	f7f9 fa5b 	bl	8000b28 <__aeabi_dcmpgt>
 8007672:	2800      	cmp	r0, #0
 8007674:	d050      	beq.n	8007718 <_dtoa_r+0x220>
 8007676:	f10a 3aff 	add.w	sl, sl, #4294967295
 800767a:	2300      	movs	r3, #0
 800767c:	930f      	str	r3, [sp, #60]	; 0x3c
 800767e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007680:	1b5d      	subs	r5, r3, r5
 8007682:	f1b5 0801 	subs.w	r8, r5, #1
 8007686:	bf49      	itett	mi
 8007688:	f1c5 0301 	rsbmi	r3, r5, #1
 800768c:	2300      	movpl	r3, #0
 800768e:	9305      	strmi	r3, [sp, #20]
 8007690:	f04f 0800 	movmi.w	r8, #0
 8007694:	bf58      	it	pl
 8007696:	9305      	strpl	r3, [sp, #20]
 8007698:	f1ba 0f00 	cmp.w	sl, #0
 800769c:	db3e      	blt.n	800771c <_dtoa_r+0x224>
 800769e:	2300      	movs	r3, #0
 80076a0:	44d0      	add	r8, sl
 80076a2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80076a6:	9307      	str	r3, [sp, #28]
 80076a8:	9b06      	ldr	r3, [sp, #24]
 80076aa:	2b09      	cmp	r3, #9
 80076ac:	f200 8090 	bhi.w	80077d0 <_dtoa_r+0x2d8>
 80076b0:	2b05      	cmp	r3, #5
 80076b2:	bfc4      	itt	gt
 80076b4:	3b04      	subgt	r3, #4
 80076b6:	9306      	strgt	r3, [sp, #24]
 80076b8:	9b06      	ldr	r3, [sp, #24]
 80076ba:	f1a3 0302 	sub.w	r3, r3, #2
 80076be:	bfcc      	ite	gt
 80076c0:	2500      	movgt	r5, #0
 80076c2:	2501      	movle	r5, #1
 80076c4:	2b03      	cmp	r3, #3
 80076c6:	f200 808f 	bhi.w	80077e8 <_dtoa_r+0x2f0>
 80076ca:	e8df f003 	tbb	[pc, r3]
 80076ce:	7f7d      	.short	0x7f7d
 80076d0:	7131      	.short	0x7131
 80076d2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80076d6:	441d      	add	r5, r3
 80076d8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80076dc:	2820      	cmp	r0, #32
 80076de:	dd13      	ble.n	8007708 <_dtoa_r+0x210>
 80076e0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80076e4:	9b00      	ldr	r3, [sp, #0]
 80076e6:	fa08 f800 	lsl.w	r8, r8, r0
 80076ea:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80076ee:	fa23 f000 	lsr.w	r0, r3, r0
 80076f2:	ea48 0000 	orr.w	r0, r8, r0
 80076f6:	f7f8 ff0d 	bl	8000514 <__aeabi_ui2d>
 80076fa:	2301      	movs	r3, #1
 80076fc:	4682      	mov	sl, r0
 80076fe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007702:	3d01      	subs	r5, #1
 8007704:	9313      	str	r3, [sp, #76]	; 0x4c
 8007706:	e772      	b.n	80075ee <_dtoa_r+0xf6>
 8007708:	9b00      	ldr	r3, [sp, #0]
 800770a:	f1c0 0020 	rsb	r0, r0, #32
 800770e:	fa03 f000 	lsl.w	r0, r3, r0
 8007712:	e7f0      	b.n	80076f6 <_dtoa_r+0x1fe>
 8007714:	2301      	movs	r3, #1
 8007716:	e7b1      	b.n	800767c <_dtoa_r+0x184>
 8007718:	900f      	str	r0, [sp, #60]	; 0x3c
 800771a:	e7b0      	b.n	800767e <_dtoa_r+0x186>
 800771c:	9b05      	ldr	r3, [sp, #20]
 800771e:	eba3 030a 	sub.w	r3, r3, sl
 8007722:	9305      	str	r3, [sp, #20]
 8007724:	f1ca 0300 	rsb	r3, sl, #0
 8007728:	9307      	str	r3, [sp, #28]
 800772a:	2300      	movs	r3, #0
 800772c:	930e      	str	r3, [sp, #56]	; 0x38
 800772e:	e7bb      	b.n	80076a8 <_dtoa_r+0x1b0>
 8007730:	2301      	movs	r3, #1
 8007732:	930a      	str	r3, [sp, #40]	; 0x28
 8007734:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007736:	2b00      	cmp	r3, #0
 8007738:	dd59      	ble.n	80077ee <_dtoa_r+0x2f6>
 800773a:	9302      	str	r3, [sp, #8]
 800773c:	4699      	mov	r9, r3
 800773e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007740:	2200      	movs	r2, #0
 8007742:	6072      	str	r2, [r6, #4]
 8007744:	2204      	movs	r2, #4
 8007746:	f102 0014 	add.w	r0, r2, #20
 800774a:	4298      	cmp	r0, r3
 800774c:	6871      	ldr	r1, [r6, #4]
 800774e:	d953      	bls.n	80077f8 <_dtoa_r+0x300>
 8007750:	4620      	mov	r0, r4
 8007752:	f000 fff6 	bl	8008742 <_Balloc>
 8007756:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007758:	6030      	str	r0, [r6, #0]
 800775a:	f1b9 0f0e 	cmp.w	r9, #14
 800775e:	f8d3 b000 	ldr.w	fp, [r3]
 8007762:	f200 80e6 	bhi.w	8007932 <_dtoa_r+0x43a>
 8007766:	2d00      	cmp	r5, #0
 8007768:	f000 80e3 	beq.w	8007932 <_dtoa_r+0x43a>
 800776c:	ed9d 7b00 	vldr	d7, [sp]
 8007770:	f1ba 0f00 	cmp.w	sl, #0
 8007774:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007778:	dd74      	ble.n	8007864 <_dtoa_r+0x36c>
 800777a:	4a2a      	ldr	r2, [pc, #168]	; (8007824 <_dtoa_r+0x32c>)
 800777c:	f00a 030f 	and.w	r3, sl, #15
 8007780:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007784:	ed93 7b00 	vldr	d7, [r3]
 8007788:	ea4f 162a 	mov.w	r6, sl, asr #4
 800778c:	06f0      	lsls	r0, r6, #27
 800778e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007792:	d565      	bpl.n	8007860 <_dtoa_r+0x368>
 8007794:	4b24      	ldr	r3, [pc, #144]	; (8007828 <_dtoa_r+0x330>)
 8007796:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800779a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800779e:	f7f9 f85d 	bl	800085c <__aeabi_ddiv>
 80077a2:	e9cd 0100 	strd	r0, r1, [sp]
 80077a6:	f006 060f 	and.w	r6, r6, #15
 80077aa:	2503      	movs	r5, #3
 80077ac:	4f1e      	ldr	r7, [pc, #120]	; (8007828 <_dtoa_r+0x330>)
 80077ae:	e04c      	b.n	800784a <_dtoa_r+0x352>
 80077b0:	2301      	movs	r3, #1
 80077b2:	930a      	str	r3, [sp, #40]	; 0x28
 80077b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077b6:	4453      	add	r3, sl
 80077b8:	f103 0901 	add.w	r9, r3, #1
 80077bc:	9302      	str	r3, [sp, #8]
 80077be:	464b      	mov	r3, r9
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	bfb8      	it	lt
 80077c4:	2301      	movlt	r3, #1
 80077c6:	e7ba      	b.n	800773e <_dtoa_r+0x246>
 80077c8:	2300      	movs	r3, #0
 80077ca:	e7b2      	b.n	8007732 <_dtoa_r+0x23a>
 80077cc:	2300      	movs	r3, #0
 80077ce:	e7f0      	b.n	80077b2 <_dtoa_r+0x2ba>
 80077d0:	2501      	movs	r5, #1
 80077d2:	2300      	movs	r3, #0
 80077d4:	9306      	str	r3, [sp, #24]
 80077d6:	950a      	str	r5, [sp, #40]	; 0x28
 80077d8:	f04f 33ff 	mov.w	r3, #4294967295
 80077dc:	9302      	str	r3, [sp, #8]
 80077de:	4699      	mov	r9, r3
 80077e0:	2200      	movs	r2, #0
 80077e2:	2312      	movs	r3, #18
 80077e4:	920b      	str	r2, [sp, #44]	; 0x2c
 80077e6:	e7aa      	b.n	800773e <_dtoa_r+0x246>
 80077e8:	2301      	movs	r3, #1
 80077ea:	930a      	str	r3, [sp, #40]	; 0x28
 80077ec:	e7f4      	b.n	80077d8 <_dtoa_r+0x2e0>
 80077ee:	2301      	movs	r3, #1
 80077f0:	9302      	str	r3, [sp, #8]
 80077f2:	4699      	mov	r9, r3
 80077f4:	461a      	mov	r2, r3
 80077f6:	e7f5      	b.n	80077e4 <_dtoa_r+0x2ec>
 80077f8:	3101      	adds	r1, #1
 80077fa:	6071      	str	r1, [r6, #4]
 80077fc:	0052      	lsls	r2, r2, #1
 80077fe:	e7a2      	b.n	8007746 <_dtoa_r+0x24e>
 8007800:	636f4361 	.word	0x636f4361
 8007804:	3fd287a7 	.word	0x3fd287a7
 8007808:	8b60c8b3 	.word	0x8b60c8b3
 800780c:	3fc68a28 	.word	0x3fc68a28
 8007810:	509f79fb 	.word	0x509f79fb
 8007814:	3fd34413 	.word	0x3fd34413
 8007818:	7ff00000 	.word	0x7ff00000
 800781c:	0800cbac 	.word	0x0800cbac
 8007820:	3ff80000 	.word	0x3ff80000
 8007824:	0800cab0 	.word	0x0800cab0
 8007828:	0800ca88 	.word	0x0800ca88
 800782c:	0800ca79 	.word	0x0800ca79
 8007830:	07f1      	lsls	r1, r6, #31
 8007832:	d508      	bpl.n	8007846 <_dtoa_r+0x34e>
 8007834:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007838:	e9d7 2300 	ldrd	r2, r3, [r7]
 800783c:	f7f8 fee4 	bl	8000608 <__aeabi_dmul>
 8007840:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007844:	3501      	adds	r5, #1
 8007846:	1076      	asrs	r6, r6, #1
 8007848:	3708      	adds	r7, #8
 800784a:	2e00      	cmp	r6, #0
 800784c:	d1f0      	bne.n	8007830 <_dtoa_r+0x338>
 800784e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007852:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007856:	f7f9 f801 	bl	800085c <__aeabi_ddiv>
 800785a:	e9cd 0100 	strd	r0, r1, [sp]
 800785e:	e01a      	b.n	8007896 <_dtoa_r+0x39e>
 8007860:	2502      	movs	r5, #2
 8007862:	e7a3      	b.n	80077ac <_dtoa_r+0x2b4>
 8007864:	f000 80a0 	beq.w	80079a8 <_dtoa_r+0x4b0>
 8007868:	f1ca 0600 	rsb	r6, sl, #0
 800786c:	4b9f      	ldr	r3, [pc, #636]	; (8007aec <_dtoa_r+0x5f4>)
 800786e:	4fa0      	ldr	r7, [pc, #640]	; (8007af0 <_dtoa_r+0x5f8>)
 8007870:	f006 020f 	and.w	r2, r6, #15
 8007874:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007880:	f7f8 fec2 	bl	8000608 <__aeabi_dmul>
 8007884:	e9cd 0100 	strd	r0, r1, [sp]
 8007888:	1136      	asrs	r6, r6, #4
 800788a:	2300      	movs	r3, #0
 800788c:	2502      	movs	r5, #2
 800788e:	2e00      	cmp	r6, #0
 8007890:	d17f      	bne.n	8007992 <_dtoa_r+0x49a>
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1e1      	bne.n	800785a <_dtoa_r+0x362>
 8007896:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007898:	2b00      	cmp	r3, #0
 800789a:	f000 8087 	beq.w	80079ac <_dtoa_r+0x4b4>
 800789e:	e9dd 6700 	ldrd	r6, r7, [sp]
 80078a2:	2200      	movs	r2, #0
 80078a4:	4b93      	ldr	r3, [pc, #588]	; (8007af4 <_dtoa_r+0x5fc>)
 80078a6:	4630      	mov	r0, r6
 80078a8:	4639      	mov	r1, r7
 80078aa:	f7f9 f91f 	bl	8000aec <__aeabi_dcmplt>
 80078ae:	2800      	cmp	r0, #0
 80078b0:	d07c      	beq.n	80079ac <_dtoa_r+0x4b4>
 80078b2:	f1b9 0f00 	cmp.w	r9, #0
 80078b6:	d079      	beq.n	80079ac <_dtoa_r+0x4b4>
 80078b8:	9b02      	ldr	r3, [sp, #8]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	dd35      	ble.n	800792a <_dtoa_r+0x432>
 80078be:	f10a 33ff 	add.w	r3, sl, #4294967295
 80078c2:	9308      	str	r3, [sp, #32]
 80078c4:	4639      	mov	r1, r7
 80078c6:	2200      	movs	r2, #0
 80078c8:	4b8b      	ldr	r3, [pc, #556]	; (8007af8 <_dtoa_r+0x600>)
 80078ca:	4630      	mov	r0, r6
 80078cc:	f7f8 fe9c 	bl	8000608 <__aeabi_dmul>
 80078d0:	e9cd 0100 	strd	r0, r1, [sp]
 80078d4:	9f02      	ldr	r7, [sp, #8]
 80078d6:	3501      	adds	r5, #1
 80078d8:	4628      	mov	r0, r5
 80078da:	f7f8 fe2b 	bl	8000534 <__aeabi_i2d>
 80078de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078e2:	f7f8 fe91 	bl	8000608 <__aeabi_dmul>
 80078e6:	2200      	movs	r2, #0
 80078e8:	4b84      	ldr	r3, [pc, #528]	; (8007afc <_dtoa_r+0x604>)
 80078ea:	f7f8 fcd7 	bl	800029c <__adddf3>
 80078ee:	4605      	mov	r5, r0
 80078f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80078f4:	2f00      	cmp	r7, #0
 80078f6:	d15d      	bne.n	80079b4 <_dtoa_r+0x4bc>
 80078f8:	2200      	movs	r2, #0
 80078fa:	4b81      	ldr	r3, [pc, #516]	; (8007b00 <_dtoa_r+0x608>)
 80078fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007900:	f7f8 fcca 	bl	8000298 <__aeabi_dsub>
 8007904:	462a      	mov	r2, r5
 8007906:	4633      	mov	r3, r6
 8007908:	e9cd 0100 	strd	r0, r1, [sp]
 800790c:	f7f9 f90c 	bl	8000b28 <__aeabi_dcmpgt>
 8007910:	2800      	cmp	r0, #0
 8007912:	f040 8288 	bne.w	8007e26 <_dtoa_r+0x92e>
 8007916:	462a      	mov	r2, r5
 8007918:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800791c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007920:	f7f9 f8e4 	bl	8000aec <__aeabi_dcmplt>
 8007924:	2800      	cmp	r0, #0
 8007926:	f040 827c 	bne.w	8007e22 <_dtoa_r+0x92a>
 800792a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800792e:	e9cd 2300 	strd	r2, r3, [sp]
 8007932:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007934:	2b00      	cmp	r3, #0
 8007936:	f2c0 8150 	blt.w	8007bda <_dtoa_r+0x6e2>
 800793a:	f1ba 0f0e 	cmp.w	sl, #14
 800793e:	f300 814c 	bgt.w	8007bda <_dtoa_r+0x6e2>
 8007942:	4b6a      	ldr	r3, [pc, #424]	; (8007aec <_dtoa_r+0x5f4>)
 8007944:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007948:	ed93 7b00 	vldr	d7, [r3]
 800794c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800794e:	2b00      	cmp	r3, #0
 8007950:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007954:	f280 80d8 	bge.w	8007b08 <_dtoa_r+0x610>
 8007958:	f1b9 0f00 	cmp.w	r9, #0
 800795c:	f300 80d4 	bgt.w	8007b08 <_dtoa_r+0x610>
 8007960:	f040 825e 	bne.w	8007e20 <_dtoa_r+0x928>
 8007964:	2200      	movs	r2, #0
 8007966:	4b66      	ldr	r3, [pc, #408]	; (8007b00 <_dtoa_r+0x608>)
 8007968:	ec51 0b17 	vmov	r0, r1, d7
 800796c:	f7f8 fe4c 	bl	8000608 <__aeabi_dmul>
 8007970:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007974:	f7f9 f8ce 	bl	8000b14 <__aeabi_dcmpge>
 8007978:	464f      	mov	r7, r9
 800797a:	464e      	mov	r6, r9
 800797c:	2800      	cmp	r0, #0
 800797e:	f040 8234 	bne.w	8007dea <_dtoa_r+0x8f2>
 8007982:	2331      	movs	r3, #49	; 0x31
 8007984:	f10b 0501 	add.w	r5, fp, #1
 8007988:	f88b 3000 	strb.w	r3, [fp]
 800798c:	f10a 0a01 	add.w	sl, sl, #1
 8007990:	e22f      	b.n	8007df2 <_dtoa_r+0x8fa>
 8007992:	07f2      	lsls	r2, r6, #31
 8007994:	d505      	bpl.n	80079a2 <_dtoa_r+0x4aa>
 8007996:	e9d7 2300 	ldrd	r2, r3, [r7]
 800799a:	f7f8 fe35 	bl	8000608 <__aeabi_dmul>
 800799e:	3501      	adds	r5, #1
 80079a0:	2301      	movs	r3, #1
 80079a2:	1076      	asrs	r6, r6, #1
 80079a4:	3708      	adds	r7, #8
 80079a6:	e772      	b.n	800788e <_dtoa_r+0x396>
 80079a8:	2502      	movs	r5, #2
 80079aa:	e774      	b.n	8007896 <_dtoa_r+0x39e>
 80079ac:	f8cd a020 	str.w	sl, [sp, #32]
 80079b0:	464f      	mov	r7, r9
 80079b2:	e791      	b.n	80078d8 <_dtoa_r+0x3e0>
 80079b4:	4b4d      	ldr	r3, [pc, #308]	; (8007aec <_dtoa_r+0x5f4>)
 80079b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80079ba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80079be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d047      	beq.n	8007a54 <_dtoa_r+0x55c>
 80079c4:	4602      	mov	r2, r0
 80079c6:	460b      	mov	r3, r1
 80079c8:	2000      	movs	r0, #0
 80079ca:	494e      	ldr	r1, [pc, #312]	; (8007b04 <_dtoa_r+0x60c>)
 80079cc:	f7f8 ff46 	bl	800085c <__aeabi_ddiv>
 80079d0:	462a      	mov	r2, r5
 80079d2:	4633      	mov	r3, r6
 80079d4:	f7f8 fc60 	bl	8000298 <__aeabi_dsub>
 80079d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80079dc:	465d      	mov	r5, fp
 80079de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079e2:	f7f9 f8c1 	bl	8000b68 <__aeabi_d2iz>
 80079e6:	4606      	mov	r6, r0
 80079e8:	f7f8 fda4 	bl	8000534 <__aeabi_i2d>
 80079ec:	4602      	mov	r2, r0
 80079ee:	460b      	mov	r3, r1
 80079f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079f4:	f7f8 fc50 	bl	8000298 <__aeabi_dsub>
 80079f8:	3630      	adds	r6, #48	; 0x30
 80079fa:	f805 6b01 	strb.w	r6, [r5], #1
 80079fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007a02:	e9cd 0100 	strd	r0, r1, [sp]
 8007a06:	f7f9 f871 	bl	8000aec <__aeabi_dcmplt>
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	d163      	bne.n	8007ad6 <_dtoa_r+0x5de>
 8007a0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a12:	2000      	movs	r0, #0
 8007a14:	4937      	ldr	r1, [pc, #220]	; (8007af4 <_dtoa_r+0x5fc>)
 8007a16:	f7f8 fc3f 	bl	8000298 <__aeabi_dsub>
 8007a1a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007a1e:	f7f9 f865 	bl	8000aec <__aeabi_dcmplt>
 8007a22:	2800      	cmp	r0, #0
 8007a24:	f040 80b7 	bne.w	8007b96 <_dtoa_r+0x69e>
 8007a28:	eba5 030b 	sub.w	r3, r5, fp
 8007a2c:	429f      	cmp	r7, r3
 8007a2e:	f77f af7c 	ble.w	800792a <_dtoa_r+0x432>
 8007a32:	2200      	movs	r2, #0
 8007a34:	4b30      	ldr	r3, [pc, #192]	; (8007af8 <_dtoa_r+0x600>)
 8007a36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a3a:	f7f8 fde5 	bl	8000608 <__aeabi_dmul>
 8007a3e:	2200      	movs	r2, #0
 8007a40:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007a44:	4b2c      	ldr	r3, [pc, #176]	; (8007af8 <_dtoa_r+0x600>)
 8007a46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a4a:	f7f8 fddd 	bl	8000608 <__aeabi_dmul>
 8007a4e:	e9cd 0100 	strd	r0, r1, [sp]
 8007a52:	e7c4      	b.n	80079de <_dtoa_r+0x4e6>
 8007a54:	462a      	mov	r2, r5
 8007a56:	4633      	mov	r3, r6
 8007a58:	f7f8 fdd6 	bl	8000608 <__aeabi_dmul>
 8007a5c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007a60:	eb0b 0507 	add.w	r5, fp, r7
 8007a64:	465e      	mov	r6, fp
 8007a66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a6a:	f7f9 f87d 	bl	8000b68 <__aeabi_d2iz>
 8007a6e:	4607      	mov	r7, r0
 8007a70:	f7f8 fd60 	bl	8000534 <__aeabi_i2d>
 8007a74:	3730      	adds	r7, #48	; 0x30
 8007a76:	4602      	mov	r2, r0
 8007a78:	460b      	mov	r3, r1
 8007a7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a7e:	f7f8 fc0b 	bl	8000298 <__aeabi_dsub>
 8007a82:	f806 7b01 	strb.w	r7, [r6], #1
 8007a86:	42ae      	cmp	r6, r5
 8007a88:	e9cd 0100 	strd	r0, r1, [sp]
 8007a8c:	f04f 0200 	mov.w	r2, #0
 8007a90:	d126      	bne.n	8007ae0 <_dtoa_r+0x5e8>
 8007a92:	4b1c      	ldr	r3, [pc, #112]	; (8007b04 <_dtoa_r+0x60c>)
 8007a94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a98:	f7f8 fc00 	bl	800029c <__adddf3>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007aa4:	f7f9 f840 	bl	8000b28 <__aeabi_dcmpgt>
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	d174      	bne.n	8007b96 <_dtoa_r+0x69e>
 8007aac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	4914      	ldr	r1, [pc, #80]	; (8007b04 <_dtoa_r+0x60c>)
 8007ab4:	f7f8 fbf0 	bl	8000298 <__aeabi_dsub>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	460b      	mov	r3, r1
 8007abc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ac0:	f7f9 f814 	bl	8000aec <__aeabi_dcmplt>
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	f43f af30 	beq.w	800792a <_dtoa_r+0x432>
 8007aca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007ace:	2b30      	cmp	r3, #48	; 0x30
 8007ad0:	f105 32ff 	add.w	r2, r5, #4294967295
 8007ad4:	d002      	beq.n	8007adc <_dtoa_r+0x5e4>
 8007ad6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007ada:	e04a      	b.n	8007b72 <_dtoa_r+0x67a>
 8007adc:	4615      	mov	r5, r2
 8007ade:	e7f4      	b.n	8007aca <_dtoa_r+0x5d2>
 8007ae0:	4b05      	ldr	r3, [pc, #20]	; (8007af8 <_dtoa_r+0x600>)
 8007ae2:	f7f8 fd91 	bl	8000608 <__aeabi_dmul>
 8007ae6:	e9cd 0100 	strd	r0, r1, [sp]
 8007aea:	e7bc      	b.n	8007a66 <_dtoa_r+0x56e>
 8007aec:	0800cab0 	.word	0x0800cab0
 8007af0:	0800ca88 	.word	0x0800ca88
 8007af4:	3ff00000 	.word	0x3ff00000
 8007af8:	40240000 	.word	0x40240000
 8007afc:	401c0000 	.word	0x401c0000
 8007b00:	40140000 	.word	0x40140000
 8007b04:	3fe00000 	.word	0x3fe00000
 8007b08:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007b0c:	465d      	mov	r5, fp
 8007b0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b12:	4630      	mov	r0, r6
 8007b14:	4639      	mov	r1, r7
 8007b16:	f7f8 fea1 	bl	800085c <__aeabi_ddiv>
 8007b1a:	f7f9 f825 	bl	8000b68 <__aeabi_d2iz>
 8007b1e:	4680      	mov	r8, r0
 8007b20:	f7f8 fd08 	bl	8000534 <__aeabi_i2d>
 8007b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b28:	f7f8 fd6e 	bl	8000608 <__aeabi_dmul>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	460b      	mov	r3, r1
 8007b30:	4630      	mov	r0, r6
 8007b32:	4639      	mov	r1, r7
 8007b34:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007b38:	f7f8 fbae 	bl	8000298 <__aeabi_dsub>
 8007b3c:	f805 6b01 	strb.w	r6, [r5], #1
 8007b40:	eba5 060b 	sub.w	r6, r5, fp
 8007b44:	45b1      	cmp	r9, r6
 8007b46:	4602      	mov	r2, r0
 8007b48:	460b      	mov	r3, r1
 8007b4a:	d139      	bne.n	8007bc0 <_dtoa_r+0x6c8>
 8007b4c:	f7f8 fba6 	bl	800029c <__adddf3>
 8007b50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b54:	4606      	mov	r6, r0
 8007b56:	460f      	mov	r7, r1
 8007b58:	f7f8 ffe6 	bl	8000b28 <__aeabi_dcmpgt>
 8007b5c:	b9c8      	cbnz	r0, 8007b92 <_dtoa_r+0x69a>
 8007b5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b62:	4630      	mov	r0, r6
 8007b64:	4639      	mov	r1, r7
 8007b66:	f7f8 ffb7 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b6a:	b110      	cbz	r0, 8007b72 <_dtoa_r+0x67a>
 8007b6c:	f018 0f01 	tst.w	r8, #1
 8007b70:	d10f      	bne.n	8007b92 <_dtoa_r+0x69a>
 8007b72:	9904      	ldr	r1, [sp, #16]
 8007b74:	4620      	mov	r0, r4
 8007b76:	f000 fe18 	bl	80087aa <_Bfree>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b7e:	702b      	strb	r3, [r5, #0]
 8007b80:	f10a 0301 	add.w	r3, sl, #1
 8007b84:	6013      	str	r3, [r2, #0]
 8007b86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f000 8241 	beq.w	8008010 <_dtoa_r+0xb18>
 8007b8e:	601d      	str	r5, [r3, #0]
 8007b90:	e23e      	b.n	8008010 <_dtoa_r+0xb18>
 8007b92:	f8cd a020 	str.w	sl, [sp, #32]
 8007b96:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007b9a:	2a39      	cmp	r2, #57	; 0x39
 8007b9c:	f105 33ff 	add.w	r3, r5, #4294967295
 8007ba0:	d108      	bne.n	8007bb4 <_dtoa_r+0x6bc>
 8007ba2:	459b      	cmp	fp, r3
 8007ba4:	d10a      	bne.n	8007bbc <_dtoa_r+0x6c4>
 8007ba6:	9b08      	ldr	r3, [sp, #32]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	9308      	str	r3, [sp, #32]
 8007bac:	2330      	movs	r3, #48	; 0x30
 8007bae:	f88b 3000 	strb.w	r3, [fp]
 8007bb2:	465b      	mov	r3, fp
 8007bb4:	781a      	ldrb	r2, [r3, #0]
 8007bb6:	3201      	adds	r2, #1
 8007bb8:	701a      	strb	r2, [r3, #0]
 8007bba:	e78c      	b.n	8007ad6 <_dtoa_r+0x5de>
 8007bbc:	461d      	mov	r5, r3
 8007bbe:	e7ea      	b.n	8007b96 <_dtoa_r+0x69e>
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	4b9b      	ldr	r3, [pc, #620]	; (8007e30 <_dtoa_r+0x938>)
 8007bc4:	f7f8 fd20 	bl	8000608 <__aeabi_dmul>
 8007bc8:	2200      	movs	r2, #0
 8007bca:	2300      	movs	r3, #0
 8007bcc:	4606      	mov	r6, r0
 8007bce:	460f      	mov	r7, r1
 8007bd0:	f7f8 ff82 	bl	8000ad8 <__aeabi_dcmpeq>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	d09a      	beq.n	8007b0e <_dtoa_r+0x616>
 8007bd8:	e7cb      	b.n	8007b72 <_dtoa_r+0x67a>
 8007bda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bdc:	2a00      	cmp	r2, #0
 8007bde:	f000 808b 	beq.w	8007cf8 <_dtoa_r+0x800>
 8007be2:	9a06      	ldr	r2, [sp, #24]
 8007be4:	2a01      	cmp	r2, #1
 8007be6:	dc6e      	bgt.n	8007cc6 <_dtoa_r+0x7ce>
 8007be8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007bea:	2a00      	cmp	r2, #0
 8007bec:	d067      	beq.n	8007cbe <_dtoa_r+0x7c6>
 8007bee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007bf2:	9f07      	ldr	r7, [sp, #28]
 8007bf4:	9d05      	ldr	r5, [sp, #20]
 8007bf6:	9a05      	ldr	r2, [sp, #20]
 8007bf8:	2101      	movs	r1, #1
 8007bfa:	441a      	add	r2, r3
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	9205      	str	r2, [sp, #20]
 8007c00:	4498      	add	r8, r3
 8007c02:	f000 feb0 	bl	8008966 <__i2b>
 8007c06:	4606      	mov	r6, r0
 8007c08:	2d00      	cmp	r5, #0
 8007c0a:	dd0c      	ble.n	8007c26 <_dtoa_r+0x72e>
 8007c0c:	f1b8 0f00 	cmp.w	r8, #0
 8007c10:	dd09      	ble.n	8007c26 <_dtoa_r+0x72e>
 8007c12:	4545      	cmp	r5, r8
 8007c14:	9a05      	ldr	r2, [sp, #20]
 8007c16:	462b      	mov	r3, r5
 8007c18:	bfa8      	it	ge
 8007c1a:	4643      	movge	r3, r8
 8007c1c:	1ad2      	subs	r2, r2, r3
 8007c1e:	9205      	str	r2, [sp, #20]
 8007c20:	1aed      	subs	r5, r5, r3
 8007c22:	eba8 0803 	sub.w	r8, r8, r3
 8007c26:	9b07      	ldr	r3, [sp, #28]
 8007c28:	b1eb      	cbz	r3, 8007c66 <_dtoa_r+0x76e>
 8007c2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d067      	beq.n	8007d00 <_dtoa_r+0x808>
 8007c30:	b18f      	cbz	r7, 8007c56 <_dtoa_r+0x75e>
 8007c32:	4631      	mov	r1, r6
 8007c34:	463a      	mov	r2, r7
 8007c36:	4620      	mov	r0, r4
 8007c38:	f000 ff34 	bl	8008aa4 <__pow5mult>
 8007c3c:	9a04      	ldr	r2, [sp, #16]
 8007c3e:	4601      	mov	r1, r0
 8007c40:	4606      	mov	r6, r0
 8007c42:	4620      	mov	r0, r4
 8007c44:	f000 fe98 	bl	8008978 <__multiply>
 8007c48:	9904      	ldr	r1, [sp, #16]
 8007c4a:	9008      	str	r0, [sp, #32]
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	f000 fdac 	bl	80087aa <_Bfree>
 8007c52:	9b08      	ldr	r3, [sp, #32]
 8007c54:	9304      	str	r3, [sp, #16]
 8007c56:	9b07      	ldr	r3, [sp, #28]
 8007c58:	1bda      	subs	r2, r3, r7
 8007c5a:	d004      	beq.n	8007c66 <_dtoa_r+0x76e>
 8007c5c:	9904      	ldr	r1, [sp, #16]
 8007c5e:	4620      	mov	r0, r4
 8007c60:	f000 ff20 	bl	8008aa4 <__pow5mult>
 8007c64:	9004      	str	r0, [sp, #16]
 8007c66:	2101      	movs	r1, #1
 8007c68:	4620      	mov	r0, r4
 8007c6a:	f000 fe7c 	bl	8008966 <__i2b>
 8007c6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c70:	4607      	mov	r7, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f000 81d0 	beq.w	8008018 <_dtoa_r+0xb20>
 8007c78:	461a      	mov	r2, r3
 8007c7a:	4601      	mov	r1, r0
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	f000 ff11 	bl	8008aa4 <__pow5mult>
 8007c82:	9b06      	ldr	r3, [sp, #24]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	4607      	mov	r7, r0
 8007c88:	dc40      	bgt.n	8007d0c <_dtoa_r+0x814>
 8007c8a:	9b00      	ldr	r3, [sp, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d139      	bne.n	8007d04 <_dtoa_r+0x80c>
 8007c90:	9b01      	ldr	r3, [sp, #4]
 8007c92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d136      	bne.n	8007d08 <_dtoa_r+0x810>
 8007c9a:	9b01      	ldr	r3, [sp, #4]
 8007c9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ca0:	0d1b      	lsrs	r3, r3, #20
 8007ca2:	051b      	lsls	r3, r3, #20
 8007ca4:	b12b      	cbz	r3, 8007cb2 <_dtoa_r+0x7ba>
 8007ca6:	9b05      	ldr	r3, [sp, #20]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	9305      	str	r3, [sp, #20]
 8007cac:	f108 0801 	add.w	r8, r8, #1
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	9307      	str	r3, [sp, #28]
 8007cb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d12a      	bne.n	8007d10 <_dtoa_r+0x818>
 8007cba:	2001      	movs	r0, #1
 8007cbc:	e030      	b.n	8007d20 <_dtoa_r+0x828>
 8007cbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007cc0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007cc4:	e795      	b.n	8007bf2 <_dtoa_r+0x6fa>
 8007cc6:	9b07      	ldr	r3, [sp, #28]
 8007cc8:	f109 37ff 	add.w	r7, r9, #4294967295
 8007ccc:	42bb      	cmp	r3, r7
 8007cce:	bfbf      	itttt	lt
 8007cd0:	9b07      	ldrlt	r3, [sp, #28]
 8007cd2:	9707      	strlt	r7, [sp, #28]
 8007cd4:	1afa      	sublt	r2, r7, r3
 8007cd6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007cd8:	bfbb      	ittet	lt
 8007cda:	189b      	addlt	r3, r3, r2
 8007cdc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007cde:	1bdf      	subge	r7, r3, r7
 8007ce0:	2700      	movlt	r7, #0
 8007ce2:	f1b9 0f00 	cmp.w	r9, #0
 8007ce6:	bfb5      	itete	lt
 8007ce8:	9b05      	ldrlt	r3, [sp, #20]
 8007cea:	9d05      	ldrge	r5, [sp, #20]
 8007cec:	eba3 0509 	sublt.w	r5, r3, r9
 8007cf0:	464b      	movge	r3, r9
 8007cf2:	bfb8      	it	lt
 8007cf4:	2300      	movlt	r3, #0
 8007cf6:	e77e      	b.n	8007bf6 <_dtoa_r+0x6fe>
 8007cf8:	9f07      	ldr	r7, [sp, #28]
 8007cfa:	9d05      	ldr	r5, [sp, #20]
 8007cfc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007cfe:	e783      	b.n	8007c08 <_dtoa_r+0x710>
 8007d00:	9a07      	ldr	r2, [sp, #28]
 8007d02:	e7ab      	b.n	8007c5c <_dtoa_r+0x764>
 8007d04:	2300      	movs	r3, #0
 8007d06:	e7d4      	b.n	8007cb2 <_dtoa_r+0x7ba>
 8007d08:	9b00      	ldr	r3, [sp, #0]
 8007d0a:	e7d2      	b.n	8007cb2 <_dtoa_r+0x7ba>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	9307      	str	r3, [sp, #28]
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007d16:	6918      	ldr	r0, [r3, #16]
 8007d18:	f000 fdd7 	bl	80088ca <__hi0bits>
 8007d1c:	f1c0 0020 	rsb	r0, r0, #32
 8007d20:	4440      	add	r0, r8
 8007d22:	f010 001f 	ands.w	r0, r0, #31
 8007d26:	d047      	beq.n	8007db8 <_dtoa_r+0x8c0>
 8007d28:	f1c0 0320 	rsb	r3, r0, #32
 8007d2c:	2b04      	cmp	r3, #4
 8007d2e:	dd3b      	ble.n	8007da8 <_dtoa_r+0x8b0>
 8007d30:	9b05      	ldr	r3, [sp, #20]
 8007d32:	f1c0 001c 	rsb	r0, r0, #28
 8007d36:	4403      	add	r3, r0
 8007d38:	9305      	str	r3, [sp, #20]
 8007d3a:	4405      	add	r5, r0
 8007d3c:	4480      	add	r8, r0
 8007d3e:	9b05      	ldr	r3, [sp, #20]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	dd05      	ble.n	8007d50 <_dtoa_r+0x858>
 8007d44:	461a      	mov	r2, r3
 8007d46:	9904      	ldr	r1, [sp, #16]
 8007d48:	4620      	mov	r0, r4
 8007d4a:	f000 fef9 	bl	8008b40 <__lshift>
 8007d4e:	9004      	str	r0, [sp, #16]
 8007d50:	f1b8 0f00 	cmp.w	r8, #0
 8007d54:	dd05      	ble.n	8007d62 <_dtoa_r+0x86a>
 8007d56:	4639      	mov	r1, r7
 8007d58:	4642      	mov	r2, r8
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	f000 fef0 	bl	8008b40 <__lshift>
 8007d60:	4607      	mov	r7, r0
 8007d62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d64:	b353      	cbz	r3, 8007dbc <_dtoa_r+0x8c4>
 8007d66:	4639      	mov	r1, r7
 8007d68:	9804      	ldr	r0, [sp, #16]
 8007d6a:	f000 ff3d 	bl	8008be8 <__mcmp>
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	da24      	bge.n	8007dbc <_dtoa_r+0x8c4>
 8007d72:	2300      	movs	r3, #0
 8007d74:	220a      	movs	r2, #10
 8007d76:	9904      	ldr	r1, [sp, #16]
 8007d78:	4620      	mov	r0, r4
 8007d7a:	f000 fd2d 	bl	80087d8 <__multadd>
 8007d7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d80:	9004      	str	r0, [sp, #16]
 8007d82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	f000 814d 	beq.w	8008026 <_dtoa_r+0xb2e>
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	4631      	mov	r1, r6
 8007d90:	220a      	movs	r2, #10
 8007d92:	4620      	mov	r0, r4
 8007d94:	f000 fd20 	bl	80087d8 <__multadd>
 8007d98:	9b02      	ldr	r3, [sp, #8]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	4606      	mov	r6, r0
 8007d9e:	dc4f      	bgt.n	8007e40 <_dtoa_r+0x948>
 8007da0:	9b06      	ldr	r3, [sp, #24]
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	dd4c      	ble.n	8007e40 <_dtoa_r+0x948>
 8007da6:	e011      	b.n	8007dcc <_dtoa_r+0x8d4>
 8007da8:	d0c9      	beq.n	8007d3e <_dtoa_r+0x846>
 8007daa:	9a05      	ldr	r2, [sp, #20]
 8007dac:	331c      	adds	r3, #28
 8007dae:	441a      	add	r2, r3
 8007db0:	9205      	str	r2, [sp, #20]
 8007db2:	441d      	add	r5, r3
 8007db4:	4498      	add	r8, r3
 8007db6:	e7c2      	b.n	8007d3e <_dtoa_r+0x846>
 8007db8:	4603      	mov	r3, r0
 8007dba:	e7f6      	b.n	8007daa <_dtoa_r+0x8b2>
 8007dbc:	f1b9 0f00 	cmp.w	r9, #0
 8007dc0:	dc38      	bgt.n	8007e34 <_dtoa_r+0x93c>
 8007dc2:	9b06      	ldr	r3, [sp, #24]
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	dd35      	ble.n	8007e34 <_dtoa_r+0x93c>
 8007dc8:	f8cd 9008 	str.w	r9, [sp, #8]
 8007dcc:	9b02      	ldr	r3, [sp, #8]
 8007dce:	b963      	cbnz	r3, 8007dea <_dtoa_r+0x8f2>
 8007dd0:	4639      	mov	r1, r7
 8007dd2:	2205      	movs	r2, #5
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f000 fcff 	bl	80087d8 <__multadd>
 8007dda:	4601      	mov	r1, r0
 8007ddc:	4607      	mov	r7, r0
 8007dde:	9804      	ldr	r0, [sp, #16]
 8007de0:	f000 ff02 	bl	8008be8 <__mcmp>
 8007de4:	2800      	cmp	r0, #0
 8007de6:	f73f adcc 	bgt.w	8007982 <_dtoa_r+0x48a>
 8007dea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dec:	465d      	mov	r5, fp
 8007dee:	ea6f 0a03 	mvn.w	sl, r3
 8007df2:	f04f 0900 	mov.w	r9, #0
 8007df6:	4639      	mov	r1, r7
 8007df8:	4620      	mov	r0, r4
 8007dfa:	f000 fcd6 	bl	80087aa <_Bfree>
 8007dfe:	2e00      	cmp	r6, #0
 8007e00:	f43f aeb7 	beq.w	8007b72 <_dtoa_r+0x67a>
 8007e04:	f1b9 0f00 	cmp.w	r9, #0
 8007e08:	d005      	beq.n	8007e16 <_dtoa_r+0x91e>
 8007e0a:	45b1      	cmp	r9, r6
 8007e0c:	d003      	beq.n	8007e16 <_dtoa_r+0x91e>
 8007e0e:	4649      	mov	r1, r9
 8007e10:	4620      	mov	r0, r4
 8007e12:	f000 fcca 	bl	80087aa <_Bfree>
 8007e16:	4631      	mov	r1, r6
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f000 fcc6 	bl	80087aa <_Bfree>
 8007e1e:	e6a8      	b.n	8007b72 <_dtoa_r+0x67a>
 8007e20:	2700      	movs	r7, #0
 8007e22:	463e      	mov	r6, r7
 8007e24:	e7e1      	b.n	8007dea <_dtoa_r+0x8f2>
 8007e26:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007e2a:	463e      	mov	r6, r7
 8007e2c:	e5a9      	b.n	8007982 <_dtoa_r+0x48a>
 8007e2e:	bf00      	nop
 8007e30:	40240000 	.word	0x40240000
 8007e34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e36:	f8cd 9008 	str.w	r9, [sp, #8]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f000 80fa 	beq.w	8008034 <_dtoa_r+0xb3c>
 8007e40:	2d00      	cmp	r5, #0
 8007e42:	dd05      	ble.n	8007e50 <_dtoa_r+0x958>
 8007e44:	4631      	mov	r1, r6
 8007e46:	462a      	mov	r2, r5
 8007e48:	4620      	mov	r0, r4
 8007e4a:	f000 fe79 	bl	8008b40 <__lshift>
 8007e4e:	4606      	mov	r6, r0
 8007e50:	9b07      	ldr	r3, [sp, #28]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d04c      	beq.n	8007ef0 <_dtoa_r+0x9f8>
 8007e56:	6871      	ldr	r1, [r6, #4]
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f000 fc72 	bl	8008742 <_Balloc>
 8007e5e:	6932      	ldr	r2, [r6, #16]
 8007e60:	3202      	adds	r2, #2
 8007e62:	4605      	mov	r5, r0
 8007e64:	0092      	lsls	r2, r2, #2
 8007e66:	f106 010c 	add.w	r1, r6, #12
 8007e6a:	300c      	adds	r0, #12
 8007e6c:	f000 fc5e 	bl	800872c <memcpy>
 8007e70:	2201      	movs	r2, #1
 8007e72:	4629      	mov	r1, r5
 8007e74:	4620      	mov	r0, r4
 8007e76:	f000 fe63 	bl	8008b40 <__lshift>
 8007e7a:	9b00      	ldr	r3, [sp, #0]
 8007e7c:	f8cd b014 	str.w	fp, [sp, #20]
 8007e80:	f003 0301 	and.w	r3, r3, #1
 8007e84:	46b1      	mov	r9, r6
 8007e86:	9307      	str	r3, [sp, #28]
 8007e88:	4606      	mov	r6, r0
 8007e8a:	4639      	mov	r1, r7
 8007e8c:	9804      	ldr	r0, [sp, #16]
 8007e8e:	f7ff faa5 	bl	80073dc <quorem>
 8007e92:	4649      	mov	r1, r9
 8007e94:	4605      	mov	r5, r0
 8007e96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007e9a:	9804      	ldr	r0, [sp, #16]
 8007e9c:	f000 fea4 	bl	8008be8 <__mcmp>
 8007ea0:	4632      	mov	r2, r6
 8007ea2:	9000      	str	r0, [sp, #0]
 8007ea4:	4639      	mov	r1, r7
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	f000 feb8 	bl	8008c1c <__mdiff>
 8007eac:	68c3      	ldr	r3, [r0, #12]
 8007eae:	4602      	mov	r2, r0
 8007eb0:	bb03      	cbnz	r3, 8007ef4 <_dtoa_r+0x9fc>
 8007eb2:	4601      	mov	r1, r0
 8007eb4:	9008      	str	r0, [sp, #32]
 8007eb6:	9804      	ldr	r0, [sp, #16]
 8007eb8:	f000 fe96 	bl	8008be8 <__mcmp>
 8007ebc:	9a08      	ldr	r2, [sp, #32]
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	4611      	mov	r1, r2
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	9308      	str	r3, [sp, #32]
 8007ec6:	f000 fc70 	bl	80087aa <_Bfree>
 8007eca:	9b08      	ldr	r3, [sp, #32]
 8007ecc:	b9a3      	cbnz	r3, 8007ef8 <_dtoa_r+0xa00>
 8007ece:	9a06      	ldr	r2, [sp, #24]
 8007ed0:	b992      	cbnz	r2, 8007ef8 <_dtoa_r+0xa00>
 8007ed2:	9a07      	ldr	r2, [sp, #28]
 8007ed4:	b982      	cbnz	r2, 8007ef8 <_dtoa_r+0xa00>
 8007ed6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007eda:	d029      	beq.n	8007f30 <_dtoa_r+0xa38>
 8007edc:	9b00      	ldr	r3, [sp, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	dd01      	ble.n	8007ee6 <_dtoa_r+0x9ee>
 8007ee2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007ee6:	9b05      	ldr	r3, [sp, #20]
 8007ee8:	1c5d      	adds	r5, r3, #1
 8007eea:	f883 8000 	strb.w	r8, [r3]
 8007eee:	e782      	b.n	8007df6 <_dtoa_r+0x8fe>
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	e7c2      	b.n	8007e7a <_dtoa_r+0x982>
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e7e3      	b.n	8007ec0 <_dtoa_r+0x9c8>
 8007ef8:	9a00      	ldr	r2, [sp, #0]
 8007efa:	2a00      	cmp	r2, #0
 8007efc:	db04      	blt.n	8007f08 <_dtoa_r+0xa10>
 8007efe:	d125      	bne.n	8007f4c <_dtoa_r+0xa54>
 8007f00:	9a06      	ldr	r2, [sp, #24]
 8007f02:	bb1a      	cbnz	r2, 8007f4c <_dtoa_r+0xa54>
 8007f04:	9a07      	ldr	r2, [sp, #28]
 8007f06:	bb0a      	cbnz	r2, 8007f4c <_dtoa_r+0xa54>
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	ddec      	ble.n	8007ee6 <_dtoa_r+0x9ee>
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	9904      	ldr	r1, [sp, #16]
 8007f10:	4620      	mov	r0, r4
 8007f12:	f000 fe15 	bl	8008b40 <__lshift>
 8007f16:	4639      	mov	r1, r7
 8007f18:	9004      	str	r0, [sp, #16]
 8007f1a:	f000 fe65 	bl	8008be8 <__mcmp>
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	dc03      	bgt.n	8007f2a <_dtoa_r+0xa32>
 8007f22:	d1e0      	bne.n	8007ee6 <_dtoa_r+0x9ee>
 8007f24:	f018 0f01 	tst.w	r8, #1
 8007f28:	d0dd      	beq.n	8007ee6 <_dtoa_r+0x9ee>
 8007f2a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007f2e:	d1d8      	bne.n	8007ee2 <_dtoa_r+0x9ea>
 8007f30:	9b05      	ldr	r3, [sp, #20]
 8007f32:	9a05      	ldr	r2, [sp, #20]
 8007f34:	1c5d      	adds	r5, r3, #1
 8007f36:	2339      	movs	r3, #57	; 0x39
 8007f38:	7013      	strb	r3, [r2, #0]
 8007f3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007f3e:	2b39      	cmp	r3, #57	; 0x39
 8007f40:	f105 32ff 	add.w	r2, r5, #4294967295
 8007f44:	d04f      	beq.n	8007fe6 <_dtoa_r+0xaee>
 8007f46:	3301      	adds	r3, #1
 8007f48:	7013      	strb	r3, [r2, #0]
 8007f4a:	e754      	b.n	8007df6 <_dtoa_r+0x8fe>
 8007f4c:	9a05      	ldr	r2, [sp, #20]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f102 0501 	add.w	r5, r2, #1
 8007f54:	dd06      	ble.n	8007f64 <_dtoa_r+0xa6c>
 8007f56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007f5a:	d0e9      	beq.n	8007f30 <_dtoa_r+0xa38>
 8007f5c:	f108 0801 	add.w	r8, r8, #1
 8007f60:	9b05      	ldr	r3, [sp, #20]
 8007f62:	e7c2      	b.n	8007eea <_dtoa_r+0x9f2>
 8007f64:	9a02      	ldr	r2, [sp, #8]
 8007f66:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007f6a:	eba5 030b 	sub.w	r3, r5, fp
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d021      	beq.n	8007fb6 <_dtoa_r+0xabe>
 8007f72:	2300      	movs	r3, #0
 8007f74:	220a      	movs	r2, #10
 8007f76:	9904      	ldr	r1, [sp, #16]
 8007f78:	4620      	mov	r0, r4
 8007f7a:	f000 fc2d 	bl	80087d8 <__multadd>
 8007f7e:	45b1      	cmp	r9, r6
 8007f80:	9004      	str	r0, [sp, #16]
 8007f82:	f04f 0300 	mov.w	r3, #0
 8007f86:	f04f 020a 	mov.w	r2, #10
 8007f8a:	4649      	mov	r1, r9
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	d105      	bne.n	8007f9c <_dtoa_r+0xaa4>
 8007f90:	f000 fc22 	bl	80087d8 <__multadd>
 8007f94:	4681      	mov	r9, r0
 8007f96:	4606      	mov	r6, r0
 8007f98:	9505      	str	r5, [sp, #20]
 8007f9a:	e776      	b.n	8007e8a <_dtoa_r+0x992>
 8007f9c:	f000 fc1c 	bl	80087d8 <__multadd>
 8007fa0:	4631      	mov	r1, r6
 8007fa2:	4681      	mov	r9, r0
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	220a      	movs	r2, #10
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f000 fc15 	bl	80087d8 <__multadd>
 8007fae:	4606      	mov	r6, r0
 8007fb0:	e7f2      	b.n	8007f98 <_dtoa_r+0xaa0>
 8007fb2:	f04f 0900 	mov.w	r9, #0
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	9904      	ldr	r1, [sp, #16]
 8007fba:	4620      	mov	r0, r4
 8007fbc:	f000 fdc0 	bl	8008b40 <__lshift>
 8007fc0:	4639      	mov	r1, r7
 8007fc2:	9004      	str	r0, [sp, #16]
 8007fc4:	f000 fe10 	bl	8008be8 <__mcmp>
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	dcb6      	bgt.n	8007f3a <_dtoa_r+0xa42>
 8007fcc:	d102      	bne.n	8007fd4 <_dtoa_r+0xadc>
 8007fce:	f018 0f01 	tst.w	r8, #1
 8007fd2:	d1b2      	bne.n	8007f3a <_dtoa_r+0xa42>
 8007fd4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007fd8:	2b30      	cmp	r3, #48	; 0x30
 8007fda:	f105 32ff 	add.w	r2, r5, #4294967295
 8007fde:	f47f af0a 	bne.w	8007df6 <_dtoa_r+0x8fe>
 8007fe2:	4615      	mov	r5, r2
 8007fe4:	e7f6      	b.n	8007fd4 <_dtoa_r+0xadc>
 8007fe6:	4593      	cmp	fp, r2
 8007fe8:	d105      	bne.n	8007ff6 <_dtoa_r+0xafe>
 8007fea:	2331      	movs	r3, #49	; 0x31
 8007fec:	f10a 0a01 	add.w	sl, sl, #1
 8007ff0:	f88b 3000 	strb.w	r3, [fp]
 8007ff4:	e6ff      	b.n	8007df6 <_dtoa_r+0x8fe>
 8007ff6:	4615      	mov	r5, r2
 8007ff8:	e79f      	b.n	8007f3a <_dtoa_r+0xa42>
 8007ffa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008060 <_dtoa_r+0xb68>
 8007ffe:	e007      	b.n	8008010 <_dtoa_r+0xb18>
 8008000:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008002:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008064 <_dtoa_r+0xb6c>
 8008006:	b11b      	cbz	r3, 8008010 <_dtoa_r+0xb18>
 8008008:	f10b 0308 	add.w	r3, fp, #8
 800800c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800800e:	6013      	str	r3, [r2, #0]
 8008010:	4658      	mov	r0, fp
 8008012:	b017      	add	sp, #92	; 0x5c
 8008014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008018:	9b06      	ldr	r3, [sp, #24]
 800801a:	2b01      	cmp	r3, #1
 800801c:	f77f ae35 	ble.w	8007c8a <_dtoa_r+0x792>
 8008020:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008022:	9307      	str	r3, [sp, #28]
 8008024:	e649      	b.n	8007cba <_dtoa_r+0x7c2>
 8008026:	9b02      	ldr	r3, [sp, #8]
 8008028:	2b00      	cmp	r3, #0
 800802a:	dc03      	bgt.n	8008034 <_dtoa_r+0xb3c>
 800802c:	9b06      	ldr	r3, [sp, #24]
 800802e:	2b02      	cmp	r3, #2
 8008030:	f73f aecc 	bgt.w	8007dcc <_dtoa_r+0x8d4>
 8008034:	465d      	mov	r5, fp
 8008036:	4639      	mov	r1, r7
 8008038:	9804      	ldr	r0, [sp, #16]
 800803a:	f7ff f9cf 	bl	80073dc <quorem>
 800803e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008042:	f805 8b01 	strb.w	r8, [r5], #1
 8008046:	9a02      	ldr	r2, [sp, #8]
 8008048:	eba5 030b 	sub.w	r3, r5, fp
 800804c:	429a      	cmp	r2, r3
 800804e:	ddb0      	ble.n	8007fb2 <_dtoa_r+0xaba>
 8008050:	2300      	movs	r3, #0
 8008052:	220a      	movs	r2, #10
 8008054:	9904      	ldr	r1, [sp, #16]
 8008056:	4620      	mov	r0, r4
 8008058:	f000 fbbe 	bl	80087d8 <__multadd>
 800805c:	9004      	str	r0, [sp, #16]
 800805e:	e7ea      	b.n	8008036 <_dtoa_r+0xb3e>
 8008060:	0800cbab 	.word	0x0800cbab
 8008064:	0800ca70 	.word	0x0800ca70

08008068 <rshift>:
 8008068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800806a:	6906      	ldr	r6, [r0, #16]
 800806c:	114b      	asrs	r3, r1, #5
 800806e:	429e      	cmp	r6, r3
 8008070:	f100 0414 	add.w	r4, r0, #20
 8008074:	dd30      	ble.n	80080d8 <rshift+0x70>
 8008076:	f011 011f 	ands.w	r1, r1, #31
 800807a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800807e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008082:	d108      	bne.n	8008096 <rshift+0x2e>
 8008084:	4621      	mov	r1, r4
 8008086:	42b2      	cmp	r2, r6
 8008088:	460b      	mov	r3, r1
 800808a:	d211      	bcs.n	80080b0 <rshift+0x48>
 800808c:	f852 3b04 	ldr.w	r3, [r2], #4
 8008090:	f841 3b04 	str.w	r3, [r1], #4
 8008094:	e7f7      	b.n	8008086 <rshift+0x1e>
 8008096:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800809a:	f1c1 0c20 	rsb	ip, r1, #32
 800809e:	40cd      	lsrs	r5, r1
 80080a0:	3204      	adds	r2, #4
 80080a2:	4623      	mov	r3, r4
 80080a4:	42b2      	cmp	r2, r6
 80080a6:	4617      	mov	r7, r2
 80080a8:	d30c      	bcc.n	80080c4 <rshift+0x5c>
 80080aa:	601d      	str	r5, [r3, #0]
 80080ac:	b105      	cbz	r5, 80080b0 <rshift+0x48>
 80080ae:	3304      	adds	r3, #4
 80080b0:	1b1a      	subs	r2, r3, r4
 80080b2:	42a3      	cmp	r3, r4
 80080b4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80080b8:	bf08      	it	eq
 80080ba:	2300      	moveq	r3, #0
 80080bc:	6102      	str	r2, [r0, #16]
 80080be:	bf08      	it	eq
 80080c0:	6143      	streq	r3, [r0, #20]
 80080c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080c4:	683f      	ldr	r7, [r7, #0]
 80080c6:	fa07 f70c 	lsl.w	r7, r7, ip
 80080ca:	433d      	orrs	r5, r7
 80080cc:	f843 5b04 	str.w	r5, [r3], #4
 80080d0:	f852 5b04 	ldr.w	r5, [r2], #4
 80080d4:	40cd      	lsrs	r5, r1
 80080d6:	e7e5      	b.n	80080a4 <rshift+0x3c>
 80080d8:	4623      	mov	r3, r4
 80080da:	e7e9      	b.n	80080b0 <rshift+0x48>

080080dc <__hexdig_fun>:
 80080dc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80080e0:	2b09      	cmp	r3, #9
 80080e2:	d802      	bhi.n	80080ea <__hexdig_fun+0xe>
 80080e4:	3820      	subs	r0, #32
 80080e6:	b2c0      	uxtb	r0, r0
 80080e8:	4770      	bx	lr
 80080ea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80080ee:	2b05      	cmp	r3, #5
 80080f0:	d801      	bhi.n	80080f6 <__hexdig_fun+0x1a>
 80080f2:	3847      	subs	r0, #71	; 0x47
 80080f4:	e7f7      	b.n	80080e6 <__hexdig_fun+0xa>
 80080f6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80080fa:	2b05      	cmp	r3, #5
 80080fc:	d801      	bhi.n	8008102 <__hexdig_fun+0x26>
 80080fe:	3827      	subs	r0, #39	; 0x27
 8008100:	e7f1      	b.n	80080e6 <__hexdig_fun+0xa>
 8008102:	2000      	movs	r0, #0
 8008104:	4770      	bx	lr

08008106 <__gethex>:
 8008106:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800810a:	b08b      	sub	sp, #44	; 0x2c
 800810c:	468a      	mov	sl, r1
 800810e:	9002      	str	r0, [sp, #8]
 8008110:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008112:	9306      	str	r3, [sp, #24]
 8008114:	4690      	mov	r8, r2
 8008116:	f000 fadf 	bl	80086d8 <__localeconv_l>
 800811a:	6803      	ldr	r3, [r0, #0]
 800811c:	9303      	str	r3, [sp, #12]
 800811e:	4618      	mov	r0, r3
 8008120:	f7f8 f85e 	bl	80001e0 <strlen>
 8008124:	9b03      	ldr	r3, [sp, #12]
 8008126:	9001      	str	r0, [sp, #4]
 8008128:	4403      	add	r3, r0
 800812a:	f04f 0b00 	mov.w	fp, #0
 800812e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008132:	9307      	str	r3, [sp, #28]
 8008134:	f8da 3000 	ldr.w	r3, [sl]
 8008138:	3302      	adds	r3, #2
 800813a:	461f      	mov	r7, r3
 800813c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008140:	2830      	cmp	r0, #48	; 0x30
 8008142:	d06c      	beq.n	800821e <__gethex+0x118>
 8008144:	f7ff ffca 	bl	80080dc <__hexdig_fun>
 8008148:	4604      	mov	r4, r0
 800814a:	2800      	cmp	r0, #0
 800814c:	d16a      	bne.n	8008224 <__gethex+0x11e>
 800814e:	9a01      	ldr	r2, [sp, #4]
 8008150:	9903      	ldr	r1, [sp, #12]
 8008152:	4638      	mov	r0, r7
 8008154:	f001 fc40 	bl	80099d8 <strncmp>
 8008158:	2800      	cmp	r0, #0
 800815a:	d166      	bne.n	800822a <__gethex+0x124>
 800815c:	9b01      	ldr	r3, [sp, #4]
 800815e:	5cf8      	ldrb	r0, [r7, r3]
 8008160:	18fe      	adds	r6, r7, r3
 8008162:	f7ff ffbb 	bl	80080dc <__hexdig_fun>
 8008166:	2800      	cmp	r0, #0
 8008168:	d062      	beq.n	8008230 <__gethex+0x12a>
 800816a:	4633      	mov	r3, r6
 800816c:	7818      	ldrb	r0, [r3, #0]
 800816e:	2830      	cmp	r0, #48	; 0x30
 8008170:	461f      	mov	r7, r3
 8008172:	f103 0301 	add.w	r3, r3, #1
 8008176:	d0f9      	beq.n	800816c <__gethex+0x66>
 8008178:	f7ff ffb0 	bl	80080dc <__hexdig_fun>
 800817c:	fab0 f580 	clz	r5, r0
 8008180:	096d      	lsrs	r5, r5, #5
 8008182:	4634      	mov	r4, r6
 8008184:	f04f 0b01 	mov.w	fp, #1
 8008188:	463a      	mov	r2, r7
 800818a:	4616      	mov	r6, r2
 800818c:	3201      	adds	r2, #1
 800818e:	7830      	ldrb	r0, [r6, #0]
 8008190:	f7ff ffa4 	bl	80080dc <__hexdig_fun>
 8008194:	2800      	cmp	r0, #0
 8008196:	d1f8      	bne.n	800818a <__gethex+0x84>
 8008198:	9a01      	ldr	r2, [sp, #4]
 800819a:	9903      	ldr	r1, [sp, #12]
 800819c:	4630      	mov	r0, r6
 800819e:	f001 fc1b 	bl	80099d8 <strncmp>
 80081a2:	b950      	cbnz	r0, 80081ba <__gethex+0xb4>
 80081a4:	b954      	cbnz	r4, 80081bc <__gethex+0xb6>
 80081a6:	9b01      	ldr	r3, [sp, #4]
 80081a8:	18f4      	adds	r4, r6, r3
 80081aa:	4622      	mov	r2, r4
 80081ac:	4616      	mov	r6, r2
 80081ae:	3201      	adds	r2, #1
 80081b0:	7830      	ldrb	r0, [r6, #0]
 80081b2:	f7ff ff93 	bl	80080dc <__hexdig_fun>
 80081b6:	2800      	cmp	r0, #0
 80081b8:	d1f8      	bne.n	80081ac <__gethex+0xa6>
 80081ba:	b10c      	cbz	r4, 80081c0 <__gethex+0xba>
 80081bc:	1ba4      	subs	r4, r4, r6
 80081be:	00a4      	lsls	r4, r4, #2
 80081c0:	7833      	ldrb	r3, [r6, #0]
 80081c2:	2b50      	cmp	r3, #80	; 0x50
 80081c4:	d001      	beq.n	80081ca <__gethex+0xc4>
 80081c6:	2b70      	cmp	r3, #112	; 0x70
 80081c8:	d140      	bne.n	800824c <__gethex+0x146>
 80081ca:	7873      	ldrb	r3, [r6, #1]
 80081cc:	2b2b      	cmp	r3, #43	; 0x2b
 80081ce:	d031      	beq.n	8008234 <__gethex+0x12e>
 80081d0:	2b2d      	cmp	r3, #45	; 0x2d
 80081d2:	d033      	beq.n	800823c <__gethex+0x136>
 80081d4:	1c71      	adds	r1, r6, #1
 80081d6:	f04f 0900 	mov.w	r9, #0
 80081da:	7808      	ldrb	r0, [r1, #0]
 80081dc:	f7ff ff7e 	bl	80080dc <__hexdig_fun>
 80081e0:	1e43      	subs	r3, r0, #1
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	2b18      	cmp	r3, #24
 80081e6:	d831      	bhi.n	800824c <__gethex+0x146>
 80081e8:	f1a0 0210 	sub.w	r2, r0, #16
 80081ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80081f0:	f7ff ff74 	bl	80080dc <__hexdig_fun>
 80081f4:	1e43      	subs	r3, r0, #1
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	2b18      	cmp	r3, #24
 80081fa:	d922      	bls.n	8008242 <__gethex+0x13c>
 80081fc:	f1b9 0f00 	cmp.w	r9, #0
 8008200:	d000      	beq.n	8008204 <__gethex+0xfe>
 8008202:	4252      	negs	r2, r2
 8008204:	4414      	add	r4, r2
 8008206:	f8ca 1000 	str.w	r1, [sl]
 800820a:	b30d      	cbz	r5, 8008250 <__gethex+0x14a>
 800820c:	f1bb 0f00 	cmp.w	fp, #0
 8008210:	bf0c      	ite	eq
 8008212:	2706      	moveq	r7, #6
 8008214:	2700      	movne	r7, #0
 8008216:	4638      	mov	r0, r7
 8008218:	b00b      	add	sp, #44	; 0x2c
 800821a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800821e:	f10b 0b01 	add.w	fp, fp, #1
 8008222:	e78a      	b.n	800813a <__gethex+0x34>
 8008224:	2500      	movs	r5, #0
 8008226:	462c      	mov	r4, r5
 8008228:	e7ae      	b.n	8008188 <__gethex+0x82>
 800822a:	463e      	mov	r6, r7
 800822c:	2501      	movs	r5, #1
 800822e:	e7c7      	b.n	80081c0 <__gethex+0xba>
 8008230:	4604      	mov	r4, r0
 8008232:	e7fb      	b.n	800822c <__gethex+0x126>
 8008234:	f04f 0900 	mov.w	r9, #0
 8008238:	1cb1      	adds	r1, r6, #2
 800823a:	e7ce      	b.n	80081da <__gethex+0xd4>
 800823c:	f04f 0901 	mov.w	r9, #1
 8008240:	e7fa      	b.n	8008238 <__gethex+0x132>
 8008242:	230a      	movs	r3, #10
 8008244:	fb03 0202 	mla	r2, r3, r2, r0
 8008248:	3a10      	subs	r2, #16
 800824a:	e7cf      	b.n	80081ec <__gethex+0xe6>
 800824c:	4631      	mov	r1, r6
 800824e:	e7da      	b.n	8008206 <__gethex+0x100>
 8008250:	1bf3      	subs	r3, r6, r7
 8008252:	3b01      	subs	r3, #1
 8008254:	4629      	mov	r1, r5
 8008256:	2b07      	cmp	r3, #7
 8008258:	dc49      	bgt.n	80082ee <__gethex+0x1e8>
 800825a:	9802      	ldr	r0, [sp, #8]
 800825c:	f000 fa71 	bl	8008742 <_Balloc>
 8008260:	9b01      	ldr	r3, [sp, #4]
 8008262:	f100 0914 	add.w	r9, r0, #20
 8008266:	f04f 0b00 	mov.w	fp, #0
 800826a:	f1c3 0301 	rsb	r3, r3, #1
 800826e:	4605      	mov	r5, r0
 8008270:	f8cd 9010 	str.w	r9, [sp, #16]
 8008274:	46da      	mov	sl, fp
 8008276:	9308      	str	r3, [sp, #32]
 8008278:	42b7      	cmp	r7, r6
 800827a:	d33b      	bcc.n	80082f4 <__gethex+0x1ee>
 800827c:	9804      	ldr	r0, [sp, #16]
 800827e:	f840 ab04 	str.w	sl, [r0], #4
 8008282:	eba0 0009 	sub.w	r0, r0, r9
 8008286:	1080      	asrs	r0, r0, #2
 8008288:	6128      	str	r0, [r5, #16]
 800828a:	0147      	lsls	r7, r0, #5
 800828c:	4650      	mov	r0, sl
 800828e:	f000 fb1c 	bl	80088ca <__hi0bits>
 8008292:	f8d8 6000 	ldr.w	r6, [r8]
 8008296:	1a3f      	subs	r7, r7, r0
 8008298:	42b7      	cmp	r7, r6
 800829a:	dd64      	ble.n	8008366 <__gethex+0x260>
 800829c:	1bbf      	subs	r7, r7, r6
 800829e:	4639      	mov	r1, r7
 80082a0:	4628      	mov	r0, r5
 80082a2:	f000 fe2b 	bl	8008efc <__any_on>
 80082a6:	4682      	mov	sl, r0
 80082a8:	b178      	cbz	r0, 80082ca <__gethex+0x1c4>
 80082aa:	1e7b      	subs	r3, r7, #1
 80082ac:	1159      	asrs	r1, r3, #5
 80082ae:	f003 021f 	and.w	r2, r3, #31
 80082b2:	f04f 0a01 	mov.w	sl, #1
 80082b6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80082ba:	fa0a f202 	lsl.w	r2, sl, r2
 80082be:	420a      	tst	r2, r1
 80082c0:	d003      	beq.n	80082ca <__gethex+0x1c4>
 80082c2:	4553      	cmp	r3, sl
 80082c4:	dc46      	bgt.n	8008354 <__gethex+0x24e>
 80082c6:	f04f 0a02 	mov.w	sl, #2
 80082ca:	4639      	mov	r1, r7
 80082cc:	4628      	mov	r0, r5
 80082ce:	f7ff fecb 	bl	8008068 <rshift>
 80082d2:	443c      	add	r4, r7
 80082d4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80082d8:	42a3      	cmp	r3, r4
 80082da:	da52      	bge.n	8008382 <__gethex+0x27c>
 80082dc:	4629      	mov	r1, r5
 80082de:	9802      	ldr	r0, [sp, #8]
 80082e0:	f000 fa63 	bl	80087aa <_Bfree>
 80082e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80082e6:	2300      	movs	r3, #0
 80082e8:	6013      	str	r3, [r2, #0]
 80082ea:	27a3      	movs	r7, #163	; 0xa3
 80082ec:	e793      	b.n	8008216 <__gethex+0x110>
 80082ee:	3101      	adds	r1, #1
 80082f0:	105b      	asrs	r3, r3, #1
 80082f2:	e7b0      	b.n	8008256 <__gethex+0x150>
 80082f4:	1e73      	subs	r3, r6, #1
 80082f6:	9305      	str	r3, [sp, #20]
 80082f8:	9a07      	ldr	r2, [sp, #28]
 80082fa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80082fe:	4293      	cmp	r3, r2
 8008300:	d018      	beq.n	8008334 <__gethex+0x22e>
 8008302:	f1bb 0f20 	cmp.w	fp, #32
 8008306:	d107      	bne.n	8008318 <__gethex+0x212>
 8008308:	9b04      	ldr	r3, [sp, #16]
 800830a:	f8c3 a000 	str.w	sl, [r3]
 800830e:	3304      	adds	r3, #4
 8008310:	f04f 0a00 	mov.w	sl, #0
 8008314:	9304      	str	r3, [sp, #16]
 8008316:	46d3      	mov	fp, sl
 8008318:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800831c:	f7ff fede 	bl	80080dc <__hexdig_fun>
 8008320:	f000 000f 	and.w	r0, r0, #15
 8008324:	fa00 f00b 	lsl.w	r0, r0, fp
 8008328:	ea4a 0a00 	orr.w	sl, sl, r0
 800832c:	f10b 0b04 	add.w	fp, fp, #4
 8008330:	9b05      	ldr	r3, [sp, #20]
 8008332:	e00d      	b.n	8008350 <__gethex+0x24a>
 8008334:	9b05      	ldr	r3, [sp, #20]
 8008336:	9a08      	ldr	r2, [sp, #32]
 8008338:	4413      	add	r3, r2
 800833a:	42bb      	cmp	r3, r7
 800833c:	d3e1      	bcc.n	8008302 <__gethex+0x1fc>
 800833e:	4618      	mov	r0, r3
 8008340:	9a01      	ldr	r2, [sp, #4]
 8008342:	9903      	ldr	r1, [sp, #12]
 8008344:	9309      	str	r3, [sp, #36]	; 0x24
 8008346:	f001 fb47 	bl	80099d8 <strncmp>
 800834a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800834c:	2800      	cmp	r0, #0
 800834e:	d1d8      	bne.n	8008302 <__gethex+0x1fc>
 8008350:	461e      	mov	r6, r3
 8008352:	e791      	b.n	8008278 <__gethex+0x172>
 8008354:	1eb9      	subs	r1, r7, #2
 8008356:	4628      	mov	r0, r5
 8008358:	f000 fdd0 	bl	8008efc <__any_on>
 800835c:	2800      	cmp	r0, #0
 800835e:	d0b2      	beq.n	80082c6 <__gethex+0x1c0>
 8008360:	f04f 0a03 	mov.w	sl, #3
 8008364:	e7b1      	b.n	80082ca <__gethex+0x1c4>
 8008366:	da09      	bge.n	800837c <__gethex+0x276>
 8008368:	1bf7      	subs	r7, r6, r7
 800836a:	4629      	mov	r1, r5
 800836c:	463a      	mov	r2, r7
 800836e:	9802      	ldr	r0, [sp, #8]
 8008370:	f000 fbe6 	bl	8008b40 <__lshift>
 8008374:	1be4      	subs	r4, r4, r7
 8008376:	4605      	mov	r5, r0
 8008378:	f100 0914 	add.w	r9, r0, #20
 800837c:	f04f 0a00 	mov.w	sl, #0
 8008380:	e7a8      	b.n	80082d4 <__gethex+0x1ce>
 8008382:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008386:	42a0      	cmp	r0, r4
 8008388:	dd6a      	ble.n	8008460 <__gethex+0x35a>
 800838a:	1b04      	subs	r4, r0, r4
 800838c:	42a6      	cmp	r6, r4
 800838e:	dc2e      	bgt.n	80083ee <__gethex+0x2e8>
 8008390:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008394:	2b02      	cmp	r3, #2
 8008396:	d022      	beq.n	80083de <__gethex+0x2d8>
 8008398:	2b03      	cmp	r3, #3
 800839a:	d024      	beq.n	80083e6 <__gethex+0x2e0>
 800839c:	2b01      	cmp	r3, #1
 800839e:	d115      	bne.n	80083cc <__gethex+0x2c6>
 80083a0:	42a6      	cmp	r6, r4
 80083a2:	d113      	bne.n	80083cc <__gethex+0x2c6>
 80083a4:	2e01      	cmp	r6, #1
 80083a6:	dc0b      	bgt.n	80083c0 <__gethex+0x2ba>
 80083a8:	9a06      	ldr	r2, [sp, #24]
 80083aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80083ae:	6013      	str	r3, [r2, #0]
 80083b0:	2301      	movs	r3, #1
 80083b2:	612b      	str	r3, [r5, #16]
 80083b4:	f8c9 3000 	str.w	r3, [r9]
 80083b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80083ba:	2762      	movs	r7, #98	; 0x62
 80083bc:	601d      	str	r5, [r3, #0]
 80083be:	e72a      	b.n	8008216 <__gethex+0x110>
 80083c0:	1e71      	subs	r1, r6, #1
 80083c2:	4628      	mov	r0, r5
 80083c4:	f000 fd9a 	bl	8008efc <__any_on>
 80083c8:	2800      	cmp	r0, #0
 80083ca:	d1ed      	bne.n	80083a8 <__gethex+0x2a2>
 80083cc:	4629      	mov	r1, r5
 80083ce:	9802      	ldr	r0, [sp, #8]
 80083d0:	f000 f9eb 	bl	80087aa <_Bfree>
 80083d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80083d6:	2300      	movs	r3, #0
 80083d8:	6013      	str	r3, [r2, #0]
 80083da:	2750      	movs	r7, #80	; 0x50
 80083dc:	e71b      	b.n	8008216 <__gethex+0x110>
 80083de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d0e1      	beq.n	80083a8 <__gethex+0x2a2>
 80083e4:	e7f2      	b.n	80083cc <__gethex+0x2c6>
 80083e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1dd      	bne.n	80083a8 <__gethex+0x2a2>
 80083ec:	e7ee      	b.n	80083cc <__gethex+0x2c6>
 80083ee:	1e67      	subs	r7, r4, #1
 80083f0:	f1ba 0f00 	cmp.w	sl, #0
 80083f4:	d131      	bne.n	800845a <__gethex+0x354>
 80083f6:	b127      	cbz	r7, 8008402 <__gethex+0x2fc>
 80083f8:	4639      	mov	r1, r7
 80083fa:	4628      	mov	r0, r5
 80083fc:	f000 fd7e 	bl	8008efc <__any_on>
 8008400:	4682      	mov	sl, r0
 8008402:	117a      	asrs	r2, r7, #5
 8008404:	2301      	movs	r3, #1
 8008406:	f007 071f 	and.w	r7, r7, #31
 800840a:	fa03 f707 	lsl.w	r7, r3, r7
 800840e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8008412:	4621      	mov	r1, r4
 8008414:	421f      	tst	r7, r3
 8008416:	4628      	mov	r0, r5
 8008418:	bf18      	it	ne
 800841a:	f04a 0a02 	orrne.w	sl, sl, #2
 800841e:	1b36      	subs	r6, r6, r4
 8008420:	f7ff fe22 	bl	8008068 <rshift>
 8008424:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008428:	2702      	movs	r7, #2
 800842a:	f1ba 0f00 	cmp.w	sl, #0
 800842e:	d048      	beq.n	80084c2 <__gethex+0x3bc>
 8008430:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008434:	2b02      	cmp	r3, #2
 8008436:	d015      	beq.n	8008464 <__gethex+0x35e>
 8008438:	2b03      	cmp	r3, #3
 800843a:	d017      	beq.n	800846c <__gethex+0x366>
 800843c:	2b01      	cmp	r3, #1
 800843e:	d109      	bne.n	8008454 <__gethex+0x34e>
 8008440:	f01a 0f02 	tst.w	sl, #2
 8008444:	d006      	beq.n	8008454 <__gethex+0x34e>
 8008446:	f8d9 3000 	ldr.w	r3, [r9]
 800844a:	ea4a 0a03 	orr.w	sl, sl, r3
 800844e:	f01a 0f01 	tst.w	sl, #1
 8008452:	d10e      	bne.n	8008472 <__gethex+0x36c>
 8008454:	f047 0710 	orr.w	r7, r7, #16
 8008458:	e033      	b.n	80084c2 <__gethex+0x3bc>
 800845a:	f04f 0a01 	mov.w	sl, #1
 800845e:	e7d0      	b.n	8008402 <__gethex+0x2fc>
 8008460:	2701      	movs	r7, #1
 8008462:	e7e2      	b.n	800842a <__gethex+0x324>
 8008464:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008466:	f1c3 0301 	rsb	r3, r3, #1
 800846a:	9315      	str	r3, [sp, #84]	; 0x54
 800846c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800846e:	2b00      	cmp	r3, #0
 8008470:	d0f0      	beq.n	8008454 <__gethex+0x34e>
 8008472:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8008476:	f105 0314 	add.w	r3, r5, #20
 800847a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800847e:	eb03 010a 	add.w	r1, r3, sl
 8008482:	f04f 0c00 	mov.w	ip, #0
 8008486:	4618      	mov	r0, r3
 8008488:	f853 2b04 	ldr.w	r2, [r3], #4
 800848c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008490:	d01c      	beq.n	80084cc <__gethex+0x3c6>
 8008492:	3201      	adds	r2, #1
 8008494:	6002      	str	r2, [r0, #0]
 8008496:	2f02      	cmp	r7, #2
 8008498:	f105 0314 	add.w	r3, r5, #20
 800849c:	d138      	bne.n	8008510 <__gethex+0x40a>
 800849e:	f8d8 2000 	ldr.w	r2, [r8]
 80084a2:	3a01      	subs	r2, #1
 80084a4:	42b2      	cmp	r2, r6
 80084a6:	d10a      	bne.n	80084be <__gethex+0x3b8>
 80084a8:	1171      	asrs	r1, r6, #5
 80084aa:	2201      	movs	r2, #1
 80084ac:	f006 061f 	and.w	r6, r6, #31
 80084b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80084b4:	fa02 f606 	lsl.w	r6, r2, r6
 80084b8:	421e      	tst	r6, r3
 80084ba:	bf18      	it	ne
 80084bc:	4617      	movne	r7, r2
 80084be:	f047 0720 	orr.w	r7, r7, #32
 80084c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80084c4:	601d      	str	r5, [r3, #0]
 80084c6:	9b06      	ldr	r3, [sp, #24]
 80084c8:	601c      	str	r4, [r3, #0]
 80084ca:	e6a4      	b.n	8008216 <__gethex+0x110>
 80084cc:	4299      	cmp	r1, r3
 80084ce:	f843 cc04 	str.w	ip, [r3, #-4]
 80084d2:	d8d8      	bhi.n	8008486 <__gethex+0x380>
 80084d4:	68ab      	ldr	r3, [r5, #8]
 80084d6:	4599      	cmp	r9, r3
 80084d8:	db12      	blt.n	8008500 <__gethex+0x3fa>
 80084da:	6869      	ldr	r1, [r5, #4]
 80084dc:	9802      	ldr	r0, [sp, #8]
 80084de:	3101      	adds	r1, #1
 80084e0:	f000 f92f 	bl	8008742 <_Balloc>
 80084e4:	692a      	ldr	r2, [r5, #16]
 80084e6:	3202      	adds	r2, #2
 80084e8:	f105 010c 	add.w	r1, r5, #12
 80084ec:	4683      	mov	fp, r0
 80084ee:	0092      	lsls	r2, r2, #2
 80084f0:	300c      	adds	r0, #12
 80084f2:	f000 f91b 	bl	800872c <memcpy>
 80084f6:	4629      	mov	r1, r5
 80084f8:	9802      	ldr	r0, [sp, #8]
 80084fa:	f000 f956 	bl	80087aa <_Bfree>
 80084fe:	465d      	mov	r5, fp
 8008500:	692b      	ldr	r3, [r5, #16]
 8008502:	1c5a      	adds	r2, r3, #1
 8008504:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008508:	612a      	str	r2, [r5, #16]
 800850a:	2201      	movs	r2, #1
 800850c:	615a      	str	r2, [r3, #20]
 800850e:	e7c2      	b.n	8008496 <__gethex+0x390>
 8008510:	692a      	ldr	r2, [r5, #16]
 8008512:	454a      	cmp	r2, r9
 8008514:	dd0b      	ble.n	800852e <__gethex+0x428>
 8008516:	2101      	movs	r1, #1
 8008518:	4628      	mov	r0, r5
 800851a:	f7ff fda5 	bl	8008068 <rshift>
 800851e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008522:	3401      	adds	r4, #1
 8008524:	42a3      	cmp	r3, r4
 8008526:	f6ff aed9 	blt.w	80082dc <__gethex+0x1d6>
 800852a:	2701      	movs	r7, #1
 800852c:	e7c7      	b.n	80084be <__gethex+0x3b8>
 800852e:	f016 061f 	ands.w	r6, r6, #31
 8008532:	d0fa      	beq.n	800852a <__gethex+0x424>
 8008534:	449a      	add	sl, r3
 8008536:	f1c6 0620 	rsb	r6, r6, #32
 800853a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800853e:	f000 f9c4 	bl	80088ca <__hi0bits>
 8008542:	42b0      	cmp	r0, r6
 8008544:	dbe7      	blt.n	8008516 <__gethex+0x410>
 8008546:	e7f0      	b.n	800852a <__gethex+0x424>

08008548 <L_shift>:
 8008548:	f1c2 0208 	rsb	r2, r2, #8
 800854c:	0092      	lsls	r2, r2, #2
 800854e:	b570      	push	{r4, r5, r6, lr}
 8008550:	f1c2 0620 	rsb	r6, r2, #32
 8008554:	6843      	ldr	r3, [r0, #4]
 8008556:	6804      	ldr	r4, [r0, #0]
 8008558:	fa03 f506 	lsl.w	r5, r3, r6
 800855c:	432c      	orrs	r4, r5
 800855e:	40d3      	lsrs	r3, r2
 8008560:	6004      	str	r4, [r0, #0]
 8008562:	f840 3f04 	str.w	r3, [r0, #4]!
 8008566:	4288      	cmp	r0, r1
 8008568:	d3f4      	bcc.n	8008554 <L_shift+0xc>
 800856a:	bd70      	pop	{r4, r5, r6, pc}

0800856c <__match>:
 800856c:	b530      	push	{r4, r5, lr}
 800856e:	6803      	ldr	r3, [r0, #0]
 8008570:	3301      	adds	r3, #1
 8008572:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008576:	b914      	cbnz	r4, 800857e <__match+0x12>
 8008578:	6003      	str	r3, [r0, #0]
 800857a:	2001      	movs	r0, #1
 800857c:	bd30      	pop	{r4, r5, pc}
 800857e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008582:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008586:	2d19      	cmp	r5, #25
 8008588:	bf98      	it	ls
 800858a:	3220      	addls	r2, #32
 800858c:	42a2      	cmp	r2, r4
 800858e:	d0f0      	beq.n	8008572 <__match+0x6>
 8008590:	2000      	movs	r0, #0
 8008592:	e7f3      	b.n	800857c <__match+0x10>

08008594 <__hexnan>:
 8008594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008598:	680b      	ldr	r3, [r1, #0]
 800859a:	6801      	ldr	r1, [r0, #0]
 800859c:	115f      	asrs	r7, r3, #5
 800859e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80085a2:	f013 031f 	ands.w	r3, r3, #31
 80085a6:	b087      	sub	sp, #28
 80085a8:	bf18      	it	ne
 80085aa:	3704      	addne	r7, #4
 80085ac:	2500      	movs	r5, #0
 80085ae:	1f3e      	subs	r6, r7, #4
 80085b0:	4682      	mov	sl, r0
 80085b2:	4690      	mov	r8, r2
 80085b4:	9301      	str	r3, [sp, #4]
 80085b6:	f847 5c04 	str.w	r5, [r7, #-4]
 80085ba:	46b1      	mov	r9, r6
 80085bc:	4634      	mov	r4, r6
 80085be:	9502      	str	r5, [sp, #8]
 80085c0:	46ab      	mov	fp, r5
 80085c2:	784a      	ldrb	r2, [r1, #1]
 80085c4:	1c4b      	adds	r3, r1, #1
 80085c6:	9303      	str	r3, [sp, #12]
 80085c8:	b342      	cbz	r2, 800861c <__hexnan+0x88>
 80085ca:	4610      	mov	r0, r2
 80085cc:	9105      	str	r1, [sp, #20]
 80085ce:	9204      	str	r2, [sp, #16]
 80085d0:	f7ff fd84 	bl	80080dc <__hexdig_fun>
 80085d4:	2800      	cmp	r0, #0
 80085d6:	d143      	bne.n	8008660 <__hexnan+0xcc>
 80085d8:	9a04      	ldr	r2, [sp, #16]
 80085da:	9905      	ldr	r1, [sp, #20]
 80085dc:	2a20      	cmp	r2, #32
 80085de:	d818      	bhi.n	8008612 <__hexnan+0x7e>
 80085e0:	9b02      	ldr	r3, [sp, #8]
 80085e2:	459b      	cmp	fp, r3
 80085e4:	dd13      	ble.n	800860e <__hexnan+0x7a>
 80085e6:	454c      	cmp	r4, r9
 80085e8:	d206      	bcs.n	80085f8 <__hexnan+0x64>
 80085ea:	2d07      	cmp	r5, #7
 80085ec:	dc04      	bgt.n	80085f8 <__hexnan+0x64>
 80085ee:	462a      	mov	r2, r5
 80085f0:	4649      	mov	r1, r9
 80085f2:	4620      	mov	r0, r4
 80085f4:	f7ff ffa8 	bl	8008548 <L_shift>
 80085f8:	4544      	cmp	r4, r8
 80085fa:	d944      	bls.n	8008686 <__hexnan+0xf2>
 80085fc:	2300      	movs	r3, #0
 80085fe:	f1a4 0904 	sub.w	r9, r4, #4
 8008602:	f844 3c04 	str.w	r3, [r4, #-4]
 8008606:	f8cd b008 	str.w	fp, [sp, #8]
 800860a:	464c      	mov	r4, r9
 800860c:	461d      	mov	r5, r3
 800860e:	9903      	ldr	r1, [sp, #12]
 8008610:	e7d7      	b.n	80085c2 <__hexnan+0x2e>
 8008612:	2a29      	cmp	r2, #41	; 0x29
 8008614:	d14a      	bne.n	80086ac <__hexnan+0x118>
 8008616:	3102      	adds	r1, #2
 8008618:	f8ca 1000 	str.w	r1, [sl]
 800861c:	f1bb 0f00 	cmp.w	fp, #0
 8008620:	d044      	beq.n	80086ac <__hexnan+0x118>
 8008622:	454c      	cmp	r4, r9
 8008624:	d206      	bcs.n	8008634 <__hexnan+0xa0>
 8008626:	2d07      	cmp	r5, #7
 8008628:	dc04      	bgt.n	8008634 <__hexnan+0xa0>
 800862a:	462a      	mov	r2, r5
 800862c:	4649      	mov	r1, r9
 800862e:	4620      	mov	r0, r4
 8008630:	f7ff ff8a 	bl	8008548 <L_shift>
 8008634:	4544      	cmp	r4, r8
 8008636:	d928      	bls.n	800868a <__hexnan+0xf6>
 8008638:	4643      	mov	r3, r8
 800863a:	f854 2b04 	ldr.w	r2, [r4], #4
 800863e:	f843 2b04 	str.w	r2, [r3], #4
 8008642:	42a6      	cmp	r6, r4
 8008644:	d2f9      	bcs.n	800863a <__hexnan+0xa6>
 8008646:	2200      	movs	r2, #0
 8008648:	f843 2b04 	str.w	r2, [r3], #4
 800864c:	429e      	cmp	r6, r3
 800864e:	d2fb      	bcs.n	8008648 <__hexnan+0xb4>
 8008650:	6833      	ldr	r3, [r6, #0]
 8008652:	b91b      	cbnz	r3, 800865c <__hexnan+0xc8>
 8008654:	4546      	cmp	r6, r8
 8008656:	d127      	bne.n	80086a8 <__hexnan+0x114>
 8008658:	2301      	movs	r3, #1
 800865a:	6033      	str	r3, [r6, #0]
 800865c:	2005      	movs	r0, #5
 800865e:	e026      	b.n	80086ae <__hexnan+0x11a>
 8008660:	3501      	adds	r5, #1
 8008662:	2d08      	cmp	r5, #8
 8008664:	f10b 0b01 	add.w	fp, fp, #1
 8008668:	dd06      	ble.n	8008678 <__hexnan+0xe4>
 800866a:	4544      	cmp	r4, r8
 800866c:	d9cf      	bls.n	800860e <__hexnan+0x7a>
 800866e:	2300      	movs	r3, #0
 8008670:	f844 3c04 	str.w	r3, [r4, #-4]
 8008674:	2501      	movs	r5, #1
 8008676:	3c04      	subs	r4, #4
 8008678:	6822      	ldr	r2, [r4, #0]
 800867a:	f000 000f 	and.w	r0, r0, #15
 800867e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008682:	6020      	str	r0, [r4, #0]
 8008684:	e7c3      	b.n	800860e <__hexnan+0x7a>
 8008686:	2508      	movs	r5, #8
 8008688:	e7c1      	b.n	800860e <__hexnan+0x7a>
 800868a:	9b01      	ldr	r3, [sp, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d0df      	beq.n	8008650 <__hexnan+0xbc>
 8008690:	f04f 32ff 	mov.w	r2, #4294967295
 8008694:	f1c3 0320 	rsb	r3, r3, #32
 8008698:	fa22 f303 	lsr.w	r3, r2, r3
 800869c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80086a0:	401a      	ands	r2, r3
 80086a2:	f847 2c04 	str.w	r2, [r7, #-4]
 80086a6:	e7d3      	b.n	8008650 <__hexnan+0xbc>
 80086a8:	3e04      	subs	r6, #4
 80086aa:	e7d1      	b.n	8008650 <__hexnan+0xbc>
 80086ac:	2004      	movs	r0, #4
 80086ae:	b007      	add	sp, #28
 80086b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080086b4 <__locale_ctype_ptr_l>:
 80086b4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80086b8:	4770      	bx	lr
	...

080086bc <__locale_ctype_ptr>:
 80086bc:	4b04      	ldr	r3, [pc, #16]	; (80086d0 <__locale_ctype_ptr+0x14>)
 80086be:	4a05      	ldr	r2, [pc, #20]	; (80086d4 <__locale_ctype_ptr+0x18>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	6a1b      	ldr	r3, [r3, #32]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	bf08      	it	eq
 80086c8:	4613      	moveq	r3, r2
 80086ca:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80086ce:	4770      	bx	lr
 80086d0:	2000003c 	.word	0x2000003c
 80086d4:	200000a0 	.word	0x200000a0

080086d8 <__localeconv_l>:
 80086d8:	30f0      	adds	r0, #240	; 0xf0
 80086da:	4770      	bx	lr

080086dc <_localeconv_r>:
 80086dc:	4b04      	ldr	r3, [pc, #16]	; (80086f0 <_localeconv_r+0x14>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	6a18      	ldr	r0, [r3, #32]
 80086e2:	4b04      	ldr	r3, [pc, #16]	; (80086f4 <_localeconv_r+0x18>)
 80086e4:	2800      	cmp	r0, #0
 80086e6:	bf08      	it	eq
 80086e8:	4618      	moveq	r0, r3
 80086ea:	30f0      	adds	r0, #240	; 0xf0
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop
 80086f0:	2000003c 	.word	0x2000003c
 80086f4:	200000a0 	.word	0x200000a0

080086f8 <malloc>:
 80086f8:	4b02      	ldr	r3, [pc, #8]	; (8008704 <malloc+0xc>)
 80086fa:	4601      	mov	r1, r0
 80086fc:	6818      	ldr	r0, [r3, #0]
 80086fe:	f000 bc7b 	b.w	8008ff8 <_malloc_r>
 8008702:	bf00      	nop
 8008704:	2000003c 	.word	0x2000003c

08008708 <__ascii_mbtowc>:
 8008708:	b082      	sub	sp, #8
 800870a:	b901      	cbnz	r1, 800870e <__ascii_mbtowc+0x6>
 800870c:	a901      	add	r1, sp, #4
 800870e:	b142      	cbz	r2, 8008722 <__ascii_mbtowc+0x1a>
 8008710:	b14b      	cbz	r3, 8008726 <__ascii_mbtowc+0x1e>
 8008712:	7813      	ldrb	r3, [r2, #0]
 8008714:	600b      	str	r3, [r1, #0]
 8008716:	7812      	ldrb	r2, [r2, #0]
 8008718:	1c10      	adds	r0, r2, #0
 800871a:	bf18      	it	ne
 800871c:	2001      	movne	r0, #1
 800871e:	b002      	add	sp, #8
 8008720:	4770      	bx	lr
 8008722:	4610      	mov	r0, r2
 8008724:	e7fb      	b.n	800871e <__ascii_mbtowc+0x16>
 8008726:	f06f 0001 	mvn.w	r0, #1
 800872a:	e7f8      	b.n	800871e <__ascii_mbtowc+0x16>

0800872c <memcpy>:
 800872c:	b510      	push	{r4, lr}
 800872e:	1e43      	subs	r3, r0, #1
 8008730:	440a      	add	r2, r1
 8008732:	4291      	cmp	r1, r2
 8008734:	d100      	bne.n	8008738 <memcpy+0xc>
 8008736:	bd10      	pop	{r4, pc}
 8008738:	f811 4b01 	ldrb.w	r4, [r1], #1
 800873c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008740:	e7f7      	b.n	8008732 <memcpy+0x6>

08008742 <_Balloc>:
 8008742:	b570      	push	{r4, r5, r6, lr}
 8008744:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008746:	4604      	mov	r4, r0
 8008748:	460e      	mov	r6, r1
 800874a:	b93d      	cbnz	r5, 800875c <_Balloc+0x1a>
 800874c:	2010      	movs	r0, #16
 800874e:	f7ff ffd3 	bl	80086f8 <malloc>
 8008752:	6260      	str	r0, [r4, #36]	; 0x24
 8008754:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008758:	6005      	str	r5, [r0, #0]
 800875a:	60c5      	str	r5, [r0, #12]
 800875c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800875e:	68eb      	ldr	r3, [r5, #12]
 8008760:	b183      	cbz	r3, 8008784 <_Balloc+0x42>
 8008762:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800876a:	b9b8      	cbnz	r0, 800879c <_Balloc+0x5a>
 800876c:	2101      	movs	r1, #1
 800876e:	fa01 f506 	lsl.w	r5, r1, r6
 8008772:	1d6a      	adds	r2, r5, #5
 8008774:	0092      	lsls	r2, r2, #2
 8008776:	4620      	mov	r0, r4
 8008778:	f000 fbe1 	bl	8008f3e <_calloc_r>
 800877c:	b160      	cbz	r0, 8008798 <_Balloc+0x56>
 800877e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008782:	e00e      	b.n	80087a2 <_Balloc+0x60>
 8008784:	2221      	movs	r2, #33	; 0x21
 8008786:	2104      	movs	r1, #4
 8008788:	4620      	mov	r0, r4
 800878a:	f000 fbd8 	bl	8008f3e <_calloc_r>
 800878e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008790:	60e8      	str	r0, [r5, #12]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d1e4      	bne.n	8008762 <_Balloc+0x20>
 8008798:	2000      	movs	r0, #0
 800879a:	bd70      	pop	{r4, r5, r6, pc}
 800879c:	6802      	ldr	r2, [r0, #0]
 800879e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80087a2:	2300      	movs	r3, #0
 80087a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80087a8:	e7f7      	b.n	800879a <_Balloc+0x58>

080087aa <_Bfree>:
 80087aa:	b570      	push	{r4, r5, r6, lr}
 80087ac:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80087ae:	4606      	mov	r6, r0
 80087b0:	460d      	mov	r5, r1
 80087b2:	b93c      	cbnz	r4, 80087c4 <_Bfree+0x1a>
 80087b4:	2010      	movs	r0, #16
 80087b6:	f7ff ff9f 	bl	80086f8 <malloc>
 80087ba:	6270      	str	r0, [r6, #36]	; 0x24
 80087bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80087c0:	6004      	str	r4, [r0, #0]
 80087c2:	60c4      	str	r4, [r0, #12]
 80087c4:	b13d      	cbz	r5, 80087d6 <_Bfree+0x2c>
 80087c6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80087c8:	686a      	ldr	r2, [r5, #4]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80087d0:	6029      	str	r1, [r5, #0]
 80087d2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80087d6:	bd70      	pop	{r4, r5, r6, pc}

080087d8 <__multadd>:
 80087d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087dc:	690d      	ldr	r5, [r1, #16]
 80087de:	461f      	mov	r7, r3
 80087e0:	4606      	mov	r6, r0
 80087e2:	460c      	mov	r4, r1
 80087e4:	f101 0c14 	add.w	ip, r1, #20
 80087e8:	2300      	movs	r3, #0
 80087ea:	f8dc 0000 	ldr.w	r0, [ip]
 80087ee:	b281      	uxth	r1, r0
 80087f0:	fb02 7101 	mla	r1, r2, r1, r7
 80087f4:	0c0f      	lsrs	r7, r1, #16
 80087f6:	0c00      	lsrs	r0, r0, #16
 80087f8:	fb02 7000 	mla	r0, r2, r0, r7
 80087fc:	b289      	uxth	r1, r1
 80087fe:	3301      	adds	r3, #1
 8008800:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008804:	429d      	cmp	r5, r3
 8008806:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800880a:	f84c 1b04 	str.w	r1, [ip], #4
 800880e:	dcec      	bgt.n	80087ea <__multadd+0x12>
 8008810:	b1d7      	cbz	r7, 8008848 <__multadd+0x70>
 8008812:	68a3      	ldr	r3, [r4, #8]
 8008814:	42ab      	cmp	r3, r5
 8008816:	dc12      	bgt.n	800883e <__multadd+0x66>
 8008818:	6861      	ldr	r1, [r4, #4]
 800881a:	4630      	mov	r0, r6
 800881c:	3101      	adds	r1, #1
 800881e:	f7ff ff90 	bl	8008742 <_Balloc>
 8008822:	6922      	ldr	r2, [r4, #16]
 8008824:	3202      	adds	r2, #2
 8008826:	f104 010c 	add.w	r1, r4, #12
 800882a:	4680      	mov	r8, r0
 800882c:	0092      	lsls	r2, r2, #2
 800882e:	300c      	adds	r0, #12
 8008830:	f7ff ff7c 	bl	800872c <memcpy>
 8008834:	4621      	mov	r1, r4
 8008836:	4630      	mov	r0, r6
 8008838:	f7ff ffb7 	bl	80087aa <_Bfree>
 800883c:	4644      	mov	r4, r8
 800883e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008842:	3501      	adds	r5, #1
 8008844:	615f      	str	r7, [r3, #20]
 8008846:	6125      	str	r5, [r4, #16]
 8008848:	4620      	mov	r0, r4
 800884a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800884e <__s2b>:
 800884e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008852:	460c      	mov	r4, r1
 8008854:	4615      	mov	r5, r2
 8008856:	461f      	mov	r7, r3
 8008858:	2209      	movs	r2, #9
 800885a:	3308      	adds	r3, #8
 800885c:	4606      	mov	r6, r0
 800885e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008862:	2100      	movs	r1, #0
 8008864:	2201      	movs	r2, #1
 8008866:	429a      	cmp	r2, r3
 8008868:	db20      	blt.n	80088ac <__s2b+0x5e>
 800886a:	4630      	mov	r0, r6
 800886c:	f7ff ff69 	bl	8008742 <_Balloc>
 8008870:	9b08      	ldr	r3, [sp, #32]
 8008872:	6143      	str	r3, [r0, #20]
 8008874:	2d09      	cmp	r5, #9
 8008876:	f04f 0301 	mov.w	r3, #1
 800887a:	6103      	str	r3, [r0, #16]
 800887c:	dd19      	ble.n	80088b2 <__s2b+0x64>
 800887e:	f104 0809 	add.w	r8, r4, #9
 8008882:	46c1      	mov	r9, r8
 8008884:	442c      	add	r4, r5
 8008886:	f819 3b01 	ldrb.w	r3, [r9], #1
 800888a:	4601      	mov	r1, r0
 800888c:	3b30      	subs	r3, #48	; 0x30
 800888e:	220a      	movs	r2, #10
 8008890:	4630      	mov	r0, r6
 8008892:	f7ff ffa1 	bl	80087d8 <__multadd>
 8008896:	45a1      	cmp	r9, r4
 8008898:	d1f5      	bne.n	8008886 <__s2b+0x38>
 800889a:	eb08 0405 	add.w	r4, r8, r5
 800889e:	3c08      	subs	r4, #8
 80088a0:	1b2d      	subs	r5, r5, r4
 80088a2:	1963      	adds	r3, r4, r5
 80088a4:	42bb      	cmp	r3, r7
 80088a6:	db07      	blt.n	80088b8 <__s2b+0x6a>
 80088a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088ac:	0052      	lsls	r2, r2, #1
 80088ae:	3101      	adds	r1, #1
 80088b0:	e7d9      	b.n	8008866 <__s2b+0x18>
 80088b2:	340a      	adds	r4, #10
 80088b4:	2509      	movs	r5, #9
 80088b6:	e7f3      	b.n	80088a0 <__s2b+0x52>
 80088b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80088bc:	4601      	mov	r1, r0
 80088be:	3b30      	subs	r3, #48	; 0x30
 80088c0:	220a      	movs	r2, #10
 80088c2:	4630      	mov	r0, r6
 80088c4:	f7ff ff88 	bl	80087d8 <__multadd>
 80088c8:	e7eb      	b.n	80088a2 <__s2b+0x54>

080088ca <__hi0bits>:
 80088ca:	0c02      	lsrs	r2, r0, #16
 80088cc:	0412      	lsls	r2, r2, #16
 80088ce:	4603      	mov	r3, r0
 80088d0:	b9b2      	cbnz	r2, 8008900 <__hi0bits+0x36>
 80088d2:	0403      	lsls	r3, r0, #16
 80088d4:	2010      	movs	r0, #16
 80088d6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80088da:	bf04      	itt	eq
 80088dc:	021b      	lsleq	r3, r3, #8
 80088de:	3008      	addeq	r0, #8
 80088e0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80088e4:	bf04      	itt	eq
 80088e6:	011b      	lsleq	r3, r3, #4
 80088e8:	3004      	addeq	r0, #4
 80088ea:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80088ee:	bf04      	itt	eq
 80088f0:	009b      	lsleq	r3, r3, #2
 80088f2:	3002      	addeq	r0, #2
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	db06      	blt.n	8008906 <__hi0bits+0x3c>
 80088f8:	005b      	lsls	r3, r3, #1
 80088fa:	d503      	bpl.n	8008904 <__hi0bits+0x3a>
 80088fc:	3001      	adds	r0, #1
 80088fe:	4770      	bx	lr
 8008900:	2000      	movs	r0, #0
 8008902:	e7e8      	b.n	80088d6 <__hi0bits+0xc>
 8008904:	2020      	movs	r0, #32
 8008906:	4770      	bx	lr

08008908 <__lo0bits>:
 8008908:	6803      	ldr	r3, [r0, #0]
 800890a:	f013 0207 	ands.w	r2, r3, #7
 800890e:	4601      	mov	r1, r0
 8008910:	d00b      	beq.n	800892a <__lo0bits+0x22>
 8008912:	07da      	lsls	r2, r3, #31
 8008914:	d423      	bmi.n	800895e <__lo0bits+0x56>
 8008916:	0798      	lsls	r0, r3, #30
 8008918:	bf49      	itett	mi
 800891a:	085b      	lsrmi	r3, r3, #1
 800891c:	089b      	lsrpl	r3, r3, #2
 800891e:	2001      	movmi	r0, #1
 8008920:	600b      	strmi	r3, [r1, #0]
 8008922:	bf5c      	itt	pl
 8008924:	600b      	strpl	r3, [r1, #0]
 8008926:	2002      	movpl	r0, #2
 8008928:	4770      	bx	lr
 800892a:	b298      	uxth	r0, r3
 800892c:	b9a8      	cbnz	r0, 800895a <__lo0bits+0x52>
 800892e:	0c1b      	lsrs	r3, r3, #16
 8008930:	2010      	movs	r0, #16
 8008932:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008936:	bf04      	itt	eq
 8008938:	0a1b      	lsreq	r3, r3, #8
 800893a:	3008      	addeq	r0, #8
 800893c:	071a      	lsls	r2, r3, #28
 800893e:	bf04      	itt	eq
 8008940:	091b      	lsreq	r3, r3, #4
 8008942:	3004      	addeq	r0, #4
 8008944:	079a      	lsls	r2, r3, #30
 8008946:	bf04      	itt	eq
 8008948:	089b      	lsreq	r3, r3, #2
 800894a:	3002      	addeq	r0, #2
 800894c:	07da      	lsls	r2, r3, #31
 800894e:	d402      	bmi.n	8008956 <__lo0bits+0x4e>
 8008950:	085b      	lsrs	r3, r3, #1
 8008952:	d006      	beq.n	8008962 <__lo0bits+0x5a>
 8008954:	3001      	adds	r0, #1
 8008956:	600b      	str	r3, [r1, #0]
 8008958:	4770      	bx	lr
 800895a:	4610      	mov	r0, r2
 800895c:	e7e9      	b.n	8008932 <__lo0bits+0x2a>
 800895e:	2000      	movs	r0, #0
 8008960:	4770      	bx	lr
 8008962:	2020      	movs	r0, #32
 8008964:	4770      	bx	lr

08008966 <__i2b>:
 8008966:	b510      	push	{r4, lr}
 8008968:	460c      	mov	r4, r1
 800896a:	2101      	movs	r1, #1
 800896c:	f7ff fee9 	bl	8008742 <_Balloc>
 8008970:	2201      	movs	r2, #1
 8008972:	6144      	str	r4, [r0, #20]
 8008974:	6102      	str	r2, [r0, #16]
 8008976:	bd10      	pop	{r4, pc}

08008978 <__multiply>:
 8008978:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800897c:	4614      	mov	r4, r2
 800897e:	690a      	ldr	r2, [r1, #16]
 8008980:	6923      	ldr	r3, [r4, #16]
 8008982:	429a      	cmp	r2, r3
 8008984:	bfb8      	it	lt
 8008986:	460b      	movlt	r3, r1
 8008988:	4688      	mov	r8, r1
 800898a:	bfbc      	itt	lt
 800898c:	46a0      	movlt	r8, r4
 800898e:	461c      	movlt	r4, r3
 8008990:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008994:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008998:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800899c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80089a0:	eb07 0609 	add.w	r6, r7, r9
 80089a4:	42b3      	cmp	r3, r6
 80089a6:	bfb8      	it	lt
 80089a8:	3101      	addlt	r1, #1
 80089aa:	f7ff feca 	bl	8008742 <_Balloc>
 80089ae:	f100 0514 	add.w	r5, r0, #20
 80089b2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80089b6:	462b      	mov	r3, r5
 80089b8:	2200      	movs	r2, #0
 80089ba:	4573      	cmp	r3, lr
 80089bc:	d316      	bcc.n	80089ec <__multiply+0x74>
 80089be:	f104 0214 	add.w	r2, r4, #20
 80089c2:	f108 0114 	add.w	r1, r8, #20
 80089c6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80089ca:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80089ce:	9300      	str	r3, [sp, #0]
 80089d0:	9b00      	ldr	r3, [sp, #0]
 80089d2:	9201      	str	r2, [sp, #4]
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d80c      	bhi.n	80089f2 <__multiply+0x7a>
 80089d8:	2e00      	cmp	r6, #0
 80089da:	dd03      	ble.n	80089e4 <__multiply+0x6c>
 80089dc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d05d      	beq.n	8008aa0 <__multiply+0x128>
 80089e4:	6106      	str	r6, [r0, #16]
 80089e6:	b003      	add	sp, #12
 80089e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ec:	f843 2b04 	str.w	r2, [r3], #4
 80089f0:	e7e3      	b.n	80089ba <__multiply+0x42>
 80089f2:	f8b2 b000 	ldrh.w	fp, [r2]
 80089f6:	f1bb 0f00 	cmp.w	fp, #0
 80089fa:	d023      	beq.n	8008a44 <__multiply+0xcc>
 80089fc:	4689      	mov	r9, r1
 80089fe:	46ac      	mov	ip, r5
 8008a00:	f04f 0800 	mov.w	r8, #0
 8008a04:	f859 4b04 	ldr.w	r4, [r9], #4
 8008a08:	f8dc a000 	ldr.w	sl, [ip]
 8008a0c:	b2a3      	uxth	r3, r4
 8008a0e:	fa1f fa8a 	uxth.w	sl, sl
 8008a12:	fb0b a303 	mla	r3, fp, r3, sl
 8008a16:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008a1a:	f8dc 4000 	ldr.w	r4, [ip]
 8008a1e:	4443      	add	r3, r8
 8008a20:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008a24:	fb0b 840a 	mla	r4, fp, sl, r8
 8008a28:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008a2c:	46e2      	mov	sl, ip
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008a34:	454f      	cmp	r7, r9
 8008a36:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008a3a:	f84a 3b04 	str.w	r3, [sl], #4
 8008a3e:	d82b      	bhi.n	8008a98 <__multiply+0x120>
 8008a40:	f8cc 8004 	str.w	r8, [ip, #4]
 8008a44:	9b01      	ldr	r3, [sp, #4]
 8008a46:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008a4a:	3204      	adds	r2, #4
 8008a4c:	f1ba 0f00 	cmp.w	sl, #0
 8008a50:	d020      	beq.n	8008a94 <__multiply+0x11c>
 8008a52:	682b      	ldr	r3, [r5, #0]
 8008a54:	4689      	mov	r9, r1
 8008a56:	46a8      	mov	r8, r5
 8008a58:	f04f 0b00 	mov.w	fp, #0
 8008a5c:	f8b9 c000 	ldrh.w	ip, [r9]
 8008a60:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008a64:	fb0a 440c 	mla	r4, sl, ip, r4
 8008a68:	445c      	add	r4, fp
 8008a6a:	46c4      	mov	ip, r8
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008a72:	f84c 3b04 	str.w	r3, [ip], #4
 8008a76:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a7a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008a7e:	0c1b      	lsrs	r3, r3, #16
 8008a80:	fb0a b303 	mla	r3, sl, r3, fp
 8008a84:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008a88:	454f      	cmp	r7, r9
 8008a8a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008a8e:	d805      	bhi.n	8008a9c <__multiply+0x124>
 8008a90:	f8c8 3004 	str.w	r3, [r8, #4]
 8008a94:	3504      	adds	r5, #4
 8008a96:	e79b      	b.n	80089d0 <__multiply+0x58>
 8008a98:	46d4      	mov	ip, sl
 8008a9a:	e7b3      	b.n	8008a04 <__multiply+0x8c>
 8008a9c:	46e0      	mov	r8, ip
 8008a9e:	e7dd      	b.n	8008a5c <__multiply+0xe4>
 8008aa0:	3e01      	subs	r6, #1
 8008aa2:	e799      	b.n	80089d8 <__multiply+0x60>

08008aa4 <__pow5mult>:
 8008aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008aa8:	4615      	mov	r5, r2
 8008aaa:	f012 0203 	ands.w	r2, r2, #3
 8008aae:	4606      	mov	r6, r0
 8008ab0:	460f      	mov	r7, r1
 8008ab2:	d007      	beq.n	8008ac4 <__pow5mult+0x20>
 8008ab4:	3a01      	subs	r2, #1
 8008ab6:	4c21      	ldr	r4, [pc, #132]	; (8008b3c <__pow5mult+0x98>)
 8008ab8:	2300      	movs	r3, #0
 8008aba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008abe:	f7ff fe8b 	bl	80087d8 <__multadd>
 8008ac2:	4607      	mov	r7, r0
 8008ac4:	10ad      	asrs	r5, r5, #2
 8008ac6:	d035      	beq.n	8008b34 <__pow5mult+0x90>
 8008ac8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008aca:	b93c      	cbnz	r4, 8008adc <__pow5mult+0x38>
 8008acc:	2010      	movs	r0, #16
 8008ace:	f7ff fe13 	bl	80086f8 <malloc>
 8008ad2:	6270      	str	r0, [r6, #36]	; 0x24
 8008ad4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ad8:	6004      	str	r4, [r0, #0]
 8008ada:	60c4      	str	r4, [r0, #12]
 8008adc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008ae0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ae4:	b94c      	cbnz	r4, 8008afa <__pow5mult+0x56>
 8008ae6:	f240 2171 	movw	r1, #625	; 0x271
 8008aea:	4630      	mov	r0, r6
 8008aec:	f7ff ff3b 	bl	8008966 <__i2b>
 8008af0:	2300      	movs	r3, #0
 8008af2:	f8c8 0008 	str.w	r0, [r8, #8]
 8008af6:	4604      	mov	r4, r0
 8008af8:	6003      	str	r3, [r0, #0]
 8008afa:	f04f 0800 	mov.w	r8, #0
 8008afe:	07eb      	lsls	r3, r5, #31
 8008b00:	d50a      	bpl.n	8008b18 <__pow5mult+0x74>
 8008b02:	4639      	mov	r1, r7
 8008b04:	4622      	mov	r2, r4
 8008b06:	4630      	mov	r0, r6
 8008b08:	f7ff ff36 	bl	8008978 <__multiply>
 8008b0c:	4639      	mov	r1, r7
 8008b0e:	4681      	mov	r9, r0
 8008b10:	4630      	mov	r0, r6
 8008b12:	f7ff fe4a 	bl	80087aa <_Bfree>
 8008b16:	464f      	mov	r7, r9
 8008b18:	106d      	asrs	r5, r5, #1
 8008b1a:	d00b      	beq.n	8008b34 <__pow5mult+0x90>
 8008b1c:	6820      	ldr	r0, [r4, #0]
 8008b1e:	b938      	cbnz	r0, 8008b30 <__pow5mult+0x8c>
 8008b20:	4622      	mov	r2, r4
 8008b22:	4621      	mov	r1, r4
 8008b24:	4630      	mov	r0, r6
 8008b26:	f7ff ff27 	bl	8008978 <__multiply>
 8008b2a:	6020      	str	r0, [r4, #0]
 8008b2c:	f8c0 8000 	str.w	r8, [r0]
 8008b30:	4604      	mov	r4, r0
 8008b32:	e7e4      	b.n	8008afe <__pow5mult+0x5a>
 8008b34:	4638      	mov	r0, r7
 8008b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b3a:	bf00      	nop
 8008b3c:	0800cb78 	.word	0x0800cb78

08008b40 <__lshift>:
 8008b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b44:	460c      	mov	r4, r1
 8008b46:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b4a:	6923      	ldr	r3, [r4, #16]
 8008b4c:	6849      	ldr	r1, [r1, #4]
 8008b4e:	eb0a 0903 	add.w	r9, sl, r3
 8008b52:	68a3      	ldr	r3, [r4, #8]
 8008b54:	4607      	mov	r7, r0
 8008b56:	4616      	mov	r6, r2
 8008b58:	f109 0501 	add.w	r5, r9, #1
 8008b5c:	42ab      	cmp	r3, r5
 8008b5e:	db32      	blt.n	8008bc6 <__lshift+0x86>
 8008b60:	4638      	mov	r0, r7
 8008b62:	f7ff fdee 	bl	8008742 <_Balloc>
 8008b66:	2300      	movs	r3, #0
 8008b68:	4680      	mov	r8, r0
 8008b6a:	f100 0114 	add.w	r1, r0, #20
 8008b6e:	461a      	mov	r2, r3
 8008b70:	4553      	cmp	r3, sl
 8008b72:	db2b      	blt.n	8008bcc <__lshift+0x8c>
 8008b74:	6920      	ldr	r0, [r4, #16]
 8008b76:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b7a:	f104 0314 	add.w	r3, r4, #20
 8008b7e:	f016 021f 	ands.w	r2, r6, #31
 8008b82:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b86:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008b8a:	d025      	beq.n	8008bd8 <__lshift+0x98>
 8008b8c:	f1c2 0e20 	rsb	lr, r2, #32
 8008b90:	2000      	movs	r0, #0
 8008b92:	681e      	ldr	r6, [r3, #0]
 8008b94:	468a      	mov	sl, r1
 8008b96:	4096      	lsls	r6, r2
 8008b98:	4330      	orrs	r0, r6
 8008b9a:	f84a 0b04 	str.w	r0, [sl], #4
 8008b9e:	f853 0b04 	ldr.w	r0, [r3], #4
 8008ba2:	459c      	cmp	ip, r3
 8008ba4:	fa20 f00e 	lsr.w	r0, r0, lr
 8008ba8:	d814      	bhi.n	8008bd4 <__lshift+0x94>
 8008baa:	6048      	str	r0, [r1, #4]
 8008bac:	b108      	cbz	r0, 8008bb2 <__lshift+0x72>
 8008bae:	f109 0502 	add.w	r5, r9, #2
 8008bb2:	3d01      	subs	r5, #1
 8008bb4:	4638      	mov	r0, r7
 8008bb6:	f8c8 5010 	str.w	r5, [r8, #16]
 8008bba:	4621      	mov	r1, r4
 8008bbc:	f7ff fdf5 	bl	80087aa <_Bfree>
 8008bc0:	4640      	mov	r0, r8
 8008bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bc6:	3101      	adds	r1, #1
 8008bc8:	005b      	lsls	r3, r3, #1
 8008bca:	e7c7      	b.n	8008b5c <__lshift+0x1c>
 8008bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	e7cd      	b.n	8008b70 <__lshift+0x30>
 8008bd4:	4651      	mov	r1, sl
 8008bd6:	e7dc      	b.n	8008b92 <__lshift+0x52>
 8008bd8:	3904      	subs	r1, #4
 8008bda:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bde:	f841 2f04 	str.w	r2, [r1, #4]!
 8008be2:	459c      	cmp	ip, r3
 8008be4:	d8f9      	bhi.n	8008bda <__lshift+0x9a>
 8008be6:	e7e4      	b.n	8008bb2 <__lshift+0x72>

08008be8 <__mcmp>:
 8008be8:	6903      	ldr	r3, [r0, #16]
 8008bea:	690a      	ldr	r2, [r1, #16]
 8008bec:	1a9b      	subs	r3, r3, r2
 8008bee:	b530      	push	{r4, r5, lr}
 8008bf0:	d10c      	bne.n	8008c0c <__mcmp+0x24>
 8008bf2:	0092      	lsls	r2, r2, #2
 8008bf4:	3014      	adds	r0, #20
 8008bf6:	3114      	adds	r1, #20
 8008bf8:	1884      	adds	r4, r0, r2
 8008bfa:	4411      	add	r1, r2
 8008bfc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008c00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008c04:	4295      	cmp	r5, r2
 8008c06:	d003      	beq.n	8008c10 <__mcmp+0x28>
 8008c08:	d305      	bcc.n	8008c16 <__mcmp+0x2e>
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	bd30      	pop	{r4, r5, pc}
 8008c10:	42a0      	cmp	r0, r4
 8008c12:	d3f3      	bcc.n	8008bfc <__mcmp+0x14>
 8008c14:	e7fa      	b.n	8008c0c <__mcmp+0x24>
 8008c16:	f04f 33ff 	mov.w	r3, #4294967295
 8008c1a:	e7f7      	b.n	8008c0c <__mcmp+0x24>

08008c1c <__mdiff>:
 8008c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c20:	460d      	mov	r5, r1
 8008c22:	4607      	mov	r7, r0
 8008c24:	4611      	mov	r1, r2
 8008c26:	4628      	mov	r0, r5
 8008c28:	4614      	mov	r4, r2
 8008c2a:	f7ff ffdd 	bl	8008be8 <__mcmp>
 8008c2e:	1e06      	subs	r6, r0, #0
 8008c30:	d108      	bne.n	8008c44 <__mdiff+0x28>
 8008c32:	4631      	mov	r1, r6
 8008c34:	4638      	mov	r0, r7
 8008c36:	f7ff fd84 	bl	8008742 <_Balloc>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c44:	bfa4      	itt	ge
 8008c46:	4623      	movge	r3, r4
 8008c48:	462c      	movge	r4, r5
 8008c4a:	4638      	mov	r0, r7
 8008c4c:	6861      	ldr	r1, [r4, #4]
 8008c4e:	bfa6      	itte	ge
 8008c50:	461d      	movge	r5, r3
 8008c52:	2600      	movge	r6, #0
 8008c54:	2601      	movlt	r6, #1
 8008c56:	f7ff fd74 	bl	8008742 <_Balloc>
 8008c5a:	692b      	ldr	r3, [r5, #16]
 8008c5c:	60c6      	str	r6, [r0, #12]
 8008c5e:	6926      	ldr	r6, [r4, #16]
 8008c60:	f105 0914 	add.w	r9, r5, #20
 8008c64:	f104 0214 	add.w	r2, r4, #20
 8008c68:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008c6c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008c70:	f100 0514 	add.w	r5, r0, #20
 8008c74:	f04f 0e00 	mov.w	lr, #0
 8008c78:	f852 ab04 	ldr.w	sl, [r2], #4
 8008c7c:	f859 4b04 	ldr.w	r4, [r9], #4
 8008c80:	fa1e f18a 	uxtah	r1, lr, sl
 8008c84:	b2a3      	uxth	r3, r4
 8008c86:	1ac9      	subs	r1, r1, r3
 8008c88:	0c23      	lsrs	r3, r4, #16
 8008c8a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008c8e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008c92:	b289      	uxth	r1, r1
 8008c94:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008c98:	45c8      	cmp	r8, r9
 8008c9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008c9e:	4694      	mov	ip, r2
 8008ca0:	f845 3b04 	str.w	r3, [r5], #4
 8008ca4:	d8e8      	bhi.n	8008c78 <__mdiff+0x5c>
 8008ca6:	45bc      	cmp	ip, r7
 8008ca8:	d304      	bcc.n	8008cb4 <__mdiff+0x98>
 8008caa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008cae:	b183      	cbz	r3, 8008cd2 <__mdiff+0xb6>
 8008cb0:	6106      	str	r6, [r0, #16]
 8008cb2:	e7c5      	b.n	8008c40 <__mdiff+0x24>
 8008cb4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008cb8:	fa1e f381 	uxtah	r3, lr, r1
 8008cbc:	141a      	asrs	r2, r3, #16
 8008cbe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cc8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008ccc:	f845 3b04 	str.w	r3, [r5], #4
 8008cd0:	e7e9      	b.n	8008ca6 <__mdiff+0x8a>
 8008cd2:	3e01      	subs	r6, #1
 8008cd4:	e7e9      	b.n	8008caa <__mdiff+0x8e>
	...

08008cd8 <__ulp>:
 8008cd8:	4b12      	ldr	r3, [pc, #72]	; (8008d24 <__ulp+0x4c>)
 8008cda:	ee10 2a90 	vmov	r2, s1
 8008cde:	401a      	ands	r2, r3
 8008ce0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	dd04      	ble.n	8008cf2 <__ulp+0x1a>
 8008ce8:	2000      	movs	r0, #0
 8008cea:	4619      	mov	r1, r3
 8008cec:	ec41 0b10 	vmov	d0, r0, r1
 8008cf0:	4770      	bx	lr
 8008cf2:	425b      	negs	r3, r3
 8008cf4:	151b      	asrs	r3, r3, #20
 8008cf6:	2b13      	cmp	r3, #19
 8008cf8:	f04f 0000 	mov.w	r0, #0
 8008cfc:	f04f 0100 	mov.w	r1, #0
 8008d00:	dc04      	bgt.n	8008d0c <__ulp+0x34>
 8008d02:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008d06:	fa42 f103 	asr.w	r1, r2, r3
 8008d0a:	e7ef      	b.n	8008cec <__ulp+0x14>
 8008d0c:	3b14      	subs	r3, #20
 8008d0e:	2b1e      	cmp	r3, #30
 8008d10:	f04f 0201 	mov.w	r2, #1
 8008d14:	bfda      	itte	le
 8008d16:	f1c3 031f 	rsble	r3, r3, #31
 8008d1a:	fa02 f303 	lslle.w	r3, r2, r3
 8008d1e:	4613      	movgt	r3, r2
 8008d20:	4618      	mov	r0, r3
 8008d22:	e7e3      	b.n	8008cec <__ulp+0x14>
 8008d24:	7ff00000 	.word	0x7ff00000

08008d28 <__b2d>:
 8008d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d2a:	6905      	ldr	r5, [r0, #16]
 8008d2c:	f100 0714 	add.w	r7, r0, #20
 8008d30:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008d34:	1f2e      	subs	r6, r5, #4
 8008d36:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	f7ff fdc5 	bl	80088ca <__hi0bits>
 8008d40:	f1c0 0320 	rsb	r3, r0, #32
 8008d44:	280a      	cmp	r0, #10
 8008d46:	600b      	str	r3, [r1, #0]
 8008d48:	f8df c074 	ldr.w	ip, [pc, #116]	; 8008dc0 <__b2d+0x98>
 8008d4c:	dc14      	bgt.n	8008d78 <__b2d+0x50>
 8008d4e:	f1c0 0e0b 	rsb	lr, r0, #11
 8008d52:	fa24 f10e 	lsr.w	r1, r4, lr
 8008d56:	42b7      	cmp	r7, r6
 8008d58:	ea41 030c 	orr.w	r3, r1, ip
 8008d5c:	bf34      	ite	cc
 8008d5e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008d62:	2100      	movcs	r1, #0
 8008d64:	3015      	adds	r0, #21
 8008d66:	fa04 f000 	lsl.w	r0, r4, r0
 8008d6a:	fa21 f10e 	lsr.w	r1, r1, lr
 8008d6e:	ea40 0201 	orr.w	r2, r0, r1
 8008d72:	ec43 2b10 	vmov	d0, r2, r3
 8008d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d78:	42b7      	cmp	r7, r6
 8008d7a:	bf3a      	itte	cc
 8008d7c:	f1a5 0608 	subcc.w	r6, r5, #8
 8008d80:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008d84:	2100      	movcs	r1, #0
 8008d86:	380b      	subs	r0, #11
 8008d88:	d015      	beq.n	8008db6 <__b2d+0x8e>
 8008d8a:	4084      	lsls	r4, r0
 8008d8c:	f1c0 0520 	rsb	r5, r0, #32
 8008d90:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8008d94:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8008d98:	42be      	cmp	r6, r7
 8008d9a:	fa21 fc05 	lsr.w	ip, r1, r5
 8008d9e:	ea44 030c 	orr.w	r3, r4, ip
 8008da2:	bf8c      	ite	hi
 8008da4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008da8:	2400      	movls	r4, #0
 8008daa:	fa01 f000 	lsl.w	r0, r1, r0
 8008dae:	40ec      	lsrs	r4, r5
 8008db0:	ea40 0204 	orr.w	r2, r0, r4
 8008db4:	e7dd      	b.n	8008d72 <__b2d+0x4a>
 8008db6:	ea44 030c 	orr.w	r3, r4, ip
 8008dba:	460a      	mov	r2, r1
 8008dbc:	e7d9      	b.n	8008d72 <__b2d+0x4a>
 8008dbe:	bf00      	nop
 8008dc0:	3ff00000 	.word	0x3ff00000

08008dc4 <__d2b>:
 8008dc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008dc8:	460e      	mov	r6, r1
 8008dca:	2101      	movs	r1, #1
 8008dcc:	ec59 8b10 	vmov	r8, r9, d0
 8008dd0:	4615      	mov	r5, r2
 8008dd2:	f7ff fcb6 	bl	8008742 <_Balloc>
 8008dd6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008dda:	4607      	mov	r7, r0
 8008ddc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008de0:	bb34      	cbnz	r4, 8008e30 <__d2b+0x6c>
 8008de2:	9301      	str	r3, [sp, #4]
 8008de4:	f1b8 0300 	subs.w	r3, r8, #0
 8008de8:	d027      	beq.n	8008e3a <__d2b+0x76>
 8008dea:	a802      	add	r0, sp, #8
 8008dec:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008df0:	f7ff fd8a 	bl	8008908 <__lo0bits>
 8008df4:	9900      	ldr	r1, [sp, #0]
 8008df6:	b1f0      	cbz	r0, 8008e36 <__d2b+0x72>
 8008df8:	9a01      	ldr	r2, [sp, #4]
 8008dfa:	f1c0 0320 	rsb	r3, r0, #32
 8008dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8008e02:	430b      	orrs	r3, r1
 8008e04:	40c2      	lsrs	r2, r0
 8008e06:	617b      	str	r3, [r7, #20]
 8008e08:	9201      	str	r2, [sp, #4]
 8008e0a:	9b01      	ldr	r3, [sp, #4]
 8008e0c:	61bb      	str	r3, [r7, #24]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	bf14      	ite	ne
 8008e12:	2102      	movne	r1, #2
 8008e14:	2101      	moveq	r1, #1
 8008e16:	6139      	str	r1, [r7, #16]
 8008e18:	b1c4      	cbz	r4, 8008e4c <__d2b+0x88>
 8008e1a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008e1e:	4404      	add	r4, r0
 8008e20:	6034      	str	r4, [r6, #0]
 8008e22:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008e26:	6028      	str	r0, [r5, #0]
 8008e28:	4638      	mov	r0, r7
 8008e2a:	b003      	add	sp, #12
 8008e2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e34:	e7d5      	b.n	8008de2 <__d2b+0x1e>
 8008e36:	6179      	str	r1, [r7, #20]
 8008e38:	e7e7      	b.n	8008e0a <__d2b+0x46>
 8008e3a:	a801      	add	r0, sp, #4
 8008e3c:	f7ff fd64 	bl	8008908 <__lo0bits>
 8008e40:	9b01      	ldr	r3, [sp, #4]
 8008e42:	617b      	str	r3, [r7, #20]
 8008e44:	2101      	movs	r1, #1
 8008e46:	6139      	str	r1, [r7, #16]
 8008e48:	3020      	adds	r0, #32
 8008e4a:	e7e5      	b.n	8008e18 <__d2b+0x54>
 8008e4c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008e50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008e54:	6030      	str	r0, [r6, #0]
 8008e56:	6918      	ldr	r0, [r3, #16]
 8008e58:	f7ff fd37 	bl	80088ca <__hi0bits>
 8008e5c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008e60:	e7e1      	b.n	8008e26 <__d2b+0x62>

08008e62 <__ratio>:
 8008e62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e66:	4688      	mov	r8, r1
 8008e68:	4669      	mov	r1, sp
 8008e6a:	4681      	mov	r9, r0
 8008e6c:	f7ff ff5c 	bl	8008d28 <__b2d>
 8008e70:	a901      	add	r1, sp, #4
 8008e72:	4640      	mov	r0, r8
 8008e74:	ec57 6b10 	vmov	r6, r7, d0
 8008e78:	f7ff ff56 	bl	8008d28 <__b2d>
 8008e7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008e80:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008e84:	eba3 0c02 	sub.w	ip, r3, r2
 8008e88:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008e8c:	1a9b      	subs	r3, r3, r2
 8008e8e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008e92:	ec5b ab10 	vmov	sl, fp, d0
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	bfce      	itee	gt
 8008e9a:	463a      	movgt	r2, r7
 8008e9c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008ea0:	465a      	movle	r2, fp
 8008ea2:	4659      	mov	r1, fp
 8008ea4:	463d      	mov	r5, r7
 8008ea6:	bfd4      	ite	le
 8008ea8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8008eac:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8008eb0:	4630      	mov	r0, r6
 8008eb2:	ee10 2a10 	vmov	r2, s0
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	4629      	mov	r1, r5
 8008eba:	f7f7 fccf 	bl	800085c <__aeabi_ddiv>
 8008ebe:	ec41 0b10 	vmov	d0, r0, r1
 8008ec2:	b003      	add	sp, #12
 8008ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008ec8 <__copybits>:
 8008ec8:	3901      	subs	r1, #1
 8008eca:	b510      	push	{r4, lr}
 8008ecc:	1149      	asrs	r1, r1, #5
 8008ece:	6914      	ldr	r4, [r2, #16]
 8008ed0:	3101      	adds	r1, #1
 8008ed2:	f102 0314 	add.w	r3, r2, #20
 8008ed6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008eda:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008ede:	42a3      	cmp	r3, r4
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	d303      	bcc.n	8008eec <__copybits+0x24>
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	428a      	cmp	r2, r1
 8008ee8:	d305      	bcc.n	8008ef6 <__copybits+0x2e>
 8008eea:	bd10      	pop	{r4, pc}
 8008eec:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ef0:	f840 2b04 	str.w	r2, [r0], #4
 8008ef4:	e7f3      	b.n	8008ede <__copybits+0x16>
 8008ef6:	f842 3b04 	str.w	r3, [r2], #4
 8008efa:	e7f4      	b.n	8008ee6 <__copybits+0x1e>

08008efc <__any_on>:
 8008efc:	f100 0214 	add.w	r2, r0, #20
 8008f00:	6900      	ldr	r0, [r0, #16]
 8008f02:	114b      	asrs	r3, r1, #5
 8008f04:	4298      	cmp	r0, r3
 8008f06:	b510      	push	{r4, lr}
 8008f08:	db11      	blt.n	8008f2e <__any_on+0x32>
 8008f0a:	dd0a      	ble.n	8008f22 <__any_on+0x26>
 8008f0c:	f011 011f 	ands.w	r1, r1, #31
 8008f10:	d007      	beq.n	8008f22 <__any_on+0x26>
 8008f12:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008f16:	fa24 f001 	lsr.w	r0, r4, r1
 8008f1a:	fa00 f101 	lsl.w	r1, r0, r1
 8008f1e:	428c      	cmp	r4, r1
 8008f20:	d10b      	bne.n	8008f3a <__any_on+0x3e>
 8008f22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d803      	bhi.n	8008f32 <__any_on+0x36>
 8008f2a:	2000      	movs	r0, #0
 8008f2c:	bd10      	pop	{r4, pc}
 8008f2e:	4603      	mov	r3, r0
 8008f30:	e7f7      	b.n	8008f22 <__any_on+0x26>
 8008f32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008f36:	2900      	cmp	r1, #0
 8008f38:	d0f5      	beq.n	8008f26 <__any_on+0x2a>
 8008f3a:	2001      	movs	r0, #1
 8008f3c:	e7f6      	b.n	8008f2c <__any_on+0x30>

08008f3e <_calloc_r>:
 8008f3e:	b538      	push	{r3, r4, r5, lr}
 8008f40:	fb02 f401 	mul.w	r4, r2, r1
 8008f44:	4621      	mov	r1, r4
 8008f46:	f000 f857 	bl	8008ff8 <_malloc_r>
 8008f4a:	4605      	mov	r5, r0
 8008f4c:	b118      	cbz	r0, 8008f56 <_calloc_r+0x18>
 8008f4e:	4622      	mov	r2, r4
 8008f50:	2100      	movs	r1, #0
 8008f52:	f7fc fce3 	bl	800591c <memset>
 8008f56:	4628      	mov	r0, r5
 8008f58:	bd38      	pop	{r3, r4, r5, pc}
	...

08008f5c <_free_r>:
 8008f5c:	b538      	push	{r3, r4, r5, lr}
 8008f5e:	4605      	mov	r5, r0
 8008f60:	2900      	cmp	r1, #0
 8008f62:	d045      	beq.n	8008ff0 <_free_r+0x94>
 8008f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f68:	1f0c      	subs	r4, r1, #4
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	bfb8      	it	lt
 8008f6e:	18e4      	addlt	r4, r4, r3
 8008f70:	f000 fe30 	bl	8009bd4 <__malloc_lock>
 8008f74:	4a1f      	ldr	r2, [pc, #124]	; (8008ff4 <_free_r+0x98>)
 8008f76:	6813      	ldr	r3, [r2, #0]
 8008f78:	4610      	mov	r0, r2
 8008f7a:	b933      	cbnz	r3, 8008f8a <_free_r+0x2e>
 8008f7c:	6063      	str	r3, [r4, #4]
 8008f7e:	6014      	str	r4, [r2, #0]
 8008f80:	4628      	mov	r0, r5
 8008f82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f86:	f000 be26 	b.w	8009bd6 <__malloc_unlock>
 8008f8a:	42a3      	cmp	r3, r4
 8008f8c:	d90c      	bls.n	8008fa8 <_free_r+0x4c>
 8008f8e:	6821      	ldr	r1, [r4, #0]
 8008f90:	1862      	adds	r2, r4, r1
 8008f92:	4293      	cmp	r3, r2
 8008f94:	bf04      	itt	eq
 8008f96:	681a      	ldreq	r2, [r3, #0]
 8008f98:	685b      	ldreq	r3, [r3, #4]
 8008f9a:	6063      	str	r3, [r4, #4]
 8008f9c:	bf04      	itt	eq
 8008f9e:	1852      	addeq	r2, r2, r1
 8008fa0:	6022      	streq	r2, [r4, #0]
 8008fa2:	6004      	str	r4, [r0, #0]
 8008fa4:	e7ec      	b.n	8008f80 <_free_r+0x24>
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	685a      	ldr	r2, [r3, #4]
 8008faa:	b10a      	cbz	r2, 8008fb0 <_free_r+0x54>
 8008fac:	42a2      	cmp	r2, r4
 8008fae:	d9fa      	bls.n	8008fa6 <_free_r+0x4a>
 8008fb0:	6819      	ldr	r1, [r3, #0]
 8008fb2:	1858      	adds	r0, r3, r1
 8008fb4:	42a0      	cmp	r0, r4
 8008fb6:	d10b      	bne.n	8008fd0 <_free_r+0x74>
 8008fb8:	6820      	ldr	r0, [r4, #0]
 8008fba:	4401      	add	r1, r0
 8008fbc:	1858      	adds	r0, r3, r1
 8008fbe:	4282      	cmp	r2, r0
 8008fc0:	6019      	str	r1, [r3, #0]
 8008fc2:	d1dd      	bne.n	8008f80 <_free_r+0x24>
 8008fc4:	6810      	ldr	r0, [r2, #0]
 8008fc6:	6852      	ldr	r2, [r2, #4]
 8008fc8:	605a      	str	r2, [r3, #4]
 8008fca:	4401      	add	r1, r0
 8008fcc:	6019      	str	r1, [r3, #0]
 8008fce:	e7d7      	b.n	8008f80 <_free_r+0x24>
 8008fd0:	d902      	bls.n	8008fd8 <_free_r+0x7c>
 8008fd2:	230c      	movs	r3, #12
 8008fd4:	602b      	str	r3, [r5, #0]
 8008fd6:	e7d3      	b.n	8008f80 <_free_r+0x24>
 8008fd8:	6820      	ldr	r0, [r4, #0]
 8008fda:	1821      	adds	r1, r4, r0
 8008fdc:	428a      	cmp	r2, r1
 8008fde:	bf04      	itt	eq
 8008fe0:	6811      	ldreq	r1, [r2, #0]
 8008fe2:	6852      	ldreq	r2, [r2, #4]
 8008fe4:	6062      	str	r2, [r4, #4]
 8008fe6:	bf04      	itt	eq
 8008fe8:	1809      	addeq	r1, r1, r0
 8008fea:	6021      	streq	r1, [r4, #0]
 8008fec:	605c      	str	r4, [r3, #4]
 8008fee:	e7c7      	b.n	8008f80 <_free_r+0x24>
 8008ff0:	bd38      	pop	{r3, r4, r5, pc}
 8008ff2:	bf00      	nop
 8008ff4:	20000658 	.word	0x20000658

08008ff8 <_malloc_r>:
 8008ff8:	b570      	push	{r4, r5, r6, lr}
 8008ffa:	1ccd      	adds	r5, r1, #3
 8008ffc:	f025 0503 	bic.w	r5, r5, #3
 8009000:	3508      	adds	r5, #8
 8009002:	2d0c      	cmp	r5, #12
 8009004:	bf38      	it	cc
 8009006:	250c      	movcc	r5, #12
 8009008:	2d00      	cmp	r5, #0
 800900a:	4606      	mov	r6, r0
 800900c:	db01      	blt.n	8009012 <_malloc_r+0x1a>
 800900e:	42a9      	cmp	r1, r5
 8009010:	d903      	bls.n	800901a <_malloc_r+0x22>
 8009012:	230c      	movs	r3, #12
 8009014:	6033      	str	r3, [r6, #0]
 8009016:	2000      	movs	r0, #0
 8009018:	bd70      	pop	{r4, r5, r6, pc}
 800901a:	f000 fddb 	bl	8009bd4 <__malloc_lock>
 800901e:	4a21      	ldr	r2, [pc, #132]	; (80090a4 <_malloc_r+0xac>)
 8009020:	6814      	ldr	r4, [r2, #0]
 8009022:	4621      	mov	r1, r4
 8009024:	b991      	cbnz	r1, 800904c <_malloc_r+0x54>
 8009026:	4c20      	ldr	r4, [pc, #128]	; (80090a8 <_malloc_r+0xb0>)
 8009028:	6823      	ldr	r3, [r4, #0]
 800902a:	b91b      	cbnz	r3, 8009034 <_malloc_r+0x3c>
 800902c:	4630      	mov	r0, r6
 800902e:	f000 fc91 	bl	8009954 <_sbrk_r>
 8009032:	6020      	str	r0, [r4, #0]
 8009034:	4629      	mov	r1, r5
 8009036:	4630      	mov	r0, r6
 8009038:	f000 fc8c 	bl	8009954 <_sbrk_r>
 800903c:	1c43      	adds	r3, r0, #1
 800903e:	d124      	bne.n	800908a <_malloc_r+0x92>
 8009040:	230c      	movs	r3, #12
 8009042:	6033      	str	r3, [r6, #0]
 8009044:	4630      	mov	r0, r6
 8009046:	f000 fdc6 	bl	8009bd6 <__malloc_unlock>
 800904a:	e7e4      	b.n	8009016 <_malloc_r+0x1e>
 800904c:	680b      	ldr	r3, [r1, #0]
 800904e:	1b5b      	subs	r3, r3, r5
 8009050:	d418      	bmi.n	8009084 <_malloc_r+0x8c>
 8009052:	2b0b      	cmp	r3, #11
 8009054:	d90f      	bls.n	8009076 <_malloc_r+0x7e>
 8009056:	600b      	str	r3, [r1, #0]
 8009058:	50cd      	str	r5, [r1, r3]
 800905a:	18cc      	adds	r4, r1, r3
 800905c:	4630      	mov	r0, r6
 800905e:	f000 fdba 	bl	8009bd6 <__malloc_unlock>
 8009062:	f104 000b 	add.w	r0, r4, #11
 8009066:	1d23      	adds	r3, r4, #4
 8009068:	f020 0007 	bic.w	r0, r0, #7
 800906c:	1ac3      	subs	r3, r0, r3
 800906e:	d0d3      	beq.n	8009018 <_malloc_r+0x20>
 8009070:	425a      	negs	r2, r3
 8009072:	50e2      	str	r2, [r4, r3]
 8009074:	e7d0      	b.n	8009018 <_malloc_r+0x20>
 8009076:	428c      	cmp	r4, r1
 8009078:	684b      	ldr	r3, [r1, #4]
 800907a:	bf16      	itet	ne
 800907c:	6063      	strne	r3, [r4, #4]
 800907e:	6013      	streq	r3, [r2, #0]
 8009080:	460c      	movne	r4, r1
 8009082:	e7eb      	b.n	800905c <_malloc_r+0x64>
 8009084:	460c      	mov	r4, r1
 8009086:	6849      	ldr	r1, [r1, #4]
 8009088:	e7cc      	b.n	8009024 <_malloc_r+0x2c>
 800908a:	1cc4      	adds	r4, r0, #3
 800908c:	f024 0403 	bic.w	r4, r4, #3
 8009090:	42a0      	cmp	r0, r4
 8009092:	d005      	beq.n	80090a0 <_malloc_r+0xa8>
 8009094:	1a21      	subs	r1, r4, r0
 8009096:	4630      	mov	r0, r6
 8009098:	f000 fc5c 	bl	8009954 <_sbrk_r>
 800909c:	3001      	adds	r0, #1
 800909e:	d0cf      	beq.n	8009040 <_malloc_r+0x48>
 80090a0:	6025      	str	r5, [r4, #0]
 80090a2:	e7db      	b.n	800905c <_malloc_r+0x64>
 80090a4:	20000658 	.word	0x20000658
 80090a8:	2000065c 	.word	0x2000065c

080090ac <__ssputs_r>:
 80090ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090b0:	688e      	ldr	r6, [r1, #8]
 80090b2:	429e      	cmp	r6, r3
 80090b4:	4682      	mov	sl, r0
 80090b6:	460c      	mov	r4, r1
 80090b8:	4690      	mov	r8, r2
 80090ba:	4699      	mov	r9, r3
 80090bc:	d837      	bhi.n	800912e <__ssputs_r+0x82>
 80090be:	898a      	ldrh	r2, [r1, #12]
 80090c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80090c4:	d031      	beq.n	800912a <__ssputs_r+0x7e>
 80090c6:	6825      	ldr	r5, [r4, #0]
 80090c8:	6909      	ldr	r1, [r1, #16]
 80090ca:	1a6f      	subs	r7, r5, r1
 80090cc:	6965      	ldr	r5, [r4, #20]
 80090ce:	2302      	movs	r3, #2
 80090d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090d4:	fb95 f5f3 	sdiv	r5, r5, r3
 80090d8:	f109 0301 	add.w	r3, r9, #1
 80090dc:	443b      	add	r3, r7
 80090de:	429d      	cmp	r5, r3
 80090e0:	bf38      	it	cc
 80090e2:	461d      	movcc	r5, r3
 80090e4:	0553      	lsls	r3, r2, #21
 80090e6:	d530      	bpl.n	800914a <__ssputs_r+0x9e>
 80090e8:	4629      	mov	r1, r5
 80090ea:	f7ff ff85 	bl	8008ff8 <_malloc_r>
 80090ee:	4606      	mov	r6, r0
 80090f0:	b950      	cbnz	r0, 8009108 <__ssputs_r+0x5c>
 80090f2:	230c      	movs	r3, #12
 80090f4:	f8ca 3000 	str.w	r3, [sl]
 80090f8:	89a3      	ldrh	r3, [r4, #12]
 80090fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090fe:	81a3      	strh	r3, [r4, #12]
 8009100:	f04f 30ff 	mov.w	r0, #4294967295
 8009104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009108:	463a      	mov	r2, r7
 800910a:	6921      	ldr	r1, [r4, #16]
 800910c:	f7ff fb0e 	bl	800872c <memcpy>
 8009110:	89a3      	ldrh	r3, [r4, #12]
 8009112:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800911a:	81a3      	strh	r3, [r4, #12]
 800911c:	6126      	str	r6, [r4, #16]
 800911e:	6165      	str	r5, [r4, #20]
 8009120:	443e      	add	r6, r7
 8009122:	1bed      	subs	r5, r5, r7
 8009124:	6026      	str	r6, [r4, #0]
 8009126:	60a5      	str	r5, [r4, #8]
 8009128:	464e      	mov	r6, r9
 800912a:	454e      	cmp	r6, r9
 800912c:	d900      	bls.n	8009130 <__ssputs_r+0x84>
 800912e:	464e      	mov	r6, r9
 8009130:	4632      	mov	r2, r6
 8009132:	4641      	mov	r1, r8
 8009134:	6820      	ldr	r0, [r4, #0]
 8009136:	f000 fd34 	bl	8009ba2 <memmove>
 800913a:	68a3      	ldr	r3, [r4, #8]
 800913c:	1b9b      	subs	r3, r3, r6
 800913e:	60a3      	str	r3, [r4, #8]
 8009140:	6823      	ldr	r3, [r4, #0]
 8009142:	441e      	add	r6, r3
 8009144:	6026      	str	r6, [r4, #0]
 8009146:	2000      	movs	r0, #0
 8009148:	e7dc      	b.n	8009104 <__ssputs_r+0x58>
 800914a:	462a      	mov	r2, r5
 800914c:	f000 fd44 	bl	8009bd8 <_realloc_r>
 8009150:	4606      	mov	r6, r0
 8009152:	2800      	cmp	r0, #0
 8009154:	d1e2      	bne.n	800911c <__ssputs_r+0x70>
 8009156:	6921      	ldr	r1, [r4, #16]
 8009158:	4650      	mov	r0, sl
 800915a:	f7ff feff 	bl	8008f5c <_free_r>
 800915e:	e7c8      	b.n	80090f2 <__ssputs_r+0x46>

08009160 <_svfiprintf_r>:
 8009160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009164:	461d      	mov	r5, r3
 8009166:	898b      	ldrh	r3, [r1, #12]
 8009168:	061f      	lsls	r7, r3, #24
 800916a:	b09d      	sub	sp, #116	; 0x74
 800916c:	4680      	mov	r8, r0
 800916e:	460c      	mov	r4, r1
 8009170:	4616      	mov	r6, r2
 8009172:	d50f      	bpl.n	8009194 <_svfiprintf_r+0x34>
 8009174:	690b      	ldr	r3, [r1, #16]
 8009176:	b96b      	cbnz	r3, 8009194 <_svfiprintf_r+0x34>
 8009178:	2140      	movs	r1, #64	; 0x40
 800917a:	f7ff ff3d 	bl	8008ff8 <_malloc_r>
 800917e:	6020      	str	r0, [r4, #0]
 8009180:	6120      	str	r0, [r4, #16]
 8009182:	b928      	cbnz	r0, 8009190 <_svfiprintf_r+0x30>
 8009184:	230c      	movs	r3, #12
 8009186:	f8c8 3000 	str.w	r3, [r8]
 800918a:	f04f 30ff 	mov.w	r0, #4294967295
 800918e:	e0c8      	b.n	8009322 <_svfiprintf_r+0x1c2>
 8009190:	2340      	movs	r3, #64	; 0x40
 8009192:	6163      	str	r3, [r4, #20]
 8009194:	2300      	movs	r3, #0
 8009196:	9309      	str	r3, [sp, #36]	; 0x24
 8009198:	2320      	movs	r3, #32
 800919a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800919e:	2330      	movs	r3, #48	; 0x30
 80091a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091a4:	9503      	str	r5, [sp, #12]
 80091a6:	f04f 0b01 	mov.w	fp, #1
 80091aa:	4637      	mov	r7, r6
 80091ac:	463d      	mov	r5, r7
 80091ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80091b2:	b10b      	cbz	r3, 80091b8 <_svfiprintf_r+0x58>
 80091b4:	2b25      	cmp	r3, #37	; 0x25
 80091b6:	d13e      	bne.n	8009236 <_svfiprintf_r+0xd6>
 80091b8:	ebb7 0a06 	subs.w	sl, r7, r6
 80091bc:	d00b      	beq.n	80091d6 <_svfiprintf_r+0x76>
 80091be:	4653      	mov	r3, sl
 80091c0:	4632      	mov	r2, r6
 80091c2:	4621      	mov	r1, r4
 80091c4:	4640      	mov	r0, r8
 80091c6:	f7ff ff71 	bl	80090ac <__ssputs_r>
 80091ca:	3001      	adds	r0, #1
 80091cc:	f000 80a4 	beq.w	8009318 <_svfiprintf_r+0x1b8>
 80091d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091d2:	4453      	add	r3, sl
 80091d4:	9309      	str	r3, [sp, #36]	; 0x24
 80091d6:	783b      	ldrb	r3, [r7, #0]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f000 809d 	beq.w	8009318 <_svfiprintf_r+0x1b8>
 80091de:	2300      	movs	r3, #0
 80091e0:	f04f 32ff 	mov.w	r2, #4294967295
 80091e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091e8:	9304      	str	r3, [sp, #16]
 80091ea:	9307      	str	r3, [sp, #28]
 80091ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091f0:	931a      	str	r3, [sp, #104]	; 0x68
 80091f2:	462f      	mov	r7, r5
 80091f4:	2205      	movs	r2, #5
 80091f6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80091fa:	4850      	ldr	r0, [pc, #320]	; (800933c <_svfiprintf_r+0x1dc>)
 80091fc:	f7f6 fff8 	bl	80001f0 <memchr>
 8009200:	9b04      	ldr	r3, [sp, #16]
 8009202:	b9d0      	cbnz	r0, 800923a <_svfiprintf_r+0xda>
 8009204:	06d9      	lsls	r1, r3, #27
 8009206:	bf44      	itt	mi
 8009208:	2220      	movmi	r2, #32
 800920a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800920e:	071a      	lsls	r2, r3, #28
 8009210:	bf44      	itt	mi
 8009212:	222b      	movmi	r2, #43	; 0x2b
 8009214:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009218:	782a      	ldrb	r2, [r5, #0]
 800921a:	2a2a      	cmp	r2, #42	; 0x2a
 800921c:	d015      	beq.n	800924a <_svfiprintf_r+0xea>
 800921e:	9a07      	ldr	r2, [sp, #28]
 8009220:	462f      	mov	r7, r5
 8009222:	2000      	movs	r0, #0
 8009224:	250a      	movs	r5, #10
 8009226:	4639      	mov	r1, r7
 8009228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800922c:	3b30      	subs	r3, #48	; 0x30
 800922e:	2b09      	cmp	r3, #9
 8009230:	d94d      	bls.n	80092ce <_svfiprintf_r+0x16e>
 8009232:	b1b8      	cbz	r0, 8009264 <_svfiprintf_r+0x104>
 8009234:	e00f      	b.n	8009256 <_svfiprintf_r+0xf6>
 8009236:	462f      	mov	r7, r5
 8009238:	e7b8      	b.n	80091ac <_svfiprintf_r+0x4c>
 800923a:	4a40      	ldr	r2, [pc, #256]	; (800933c <_svfiprintf_r+0x1dc>)
 800923c:	1a80      	subs	r0, r0, r2
 800923e:	fa0b f000 	lsl.w	r0, fp, r0
 8009242:	4318      	orrs	r0, r3
 8009244:	9004      	str	r0, [sp, #16]
 8009246:	463d      	mov	r5, r7
 8009248:	e7d3      	b.n	80091f2 <_svfiprintf_r+0x92>
 800924a:	9a03      	ldr	r2, [sp, #12]
 800924c:	1d11      	adds	r1, r2, #4
 800924e:	6812      	ldr	r2, [r2, #0]
 8009250:	9103      	str	r1, [sp, #12]
 8009252:	2a00      	cmp	r2, #0
 8009254:	db01      	blt.n	800925a <_svfiprintf_r+0xfa>
 8009256:	9207      	str	r2, [sp, #28]
 8009258:	e004      	b.n	8009264 <_svfiprintf_r+0x104>
 800925a:	4252      	negs	r2, r2
 800925c:	f043 0302 	orr.w	r3, r3, #2
 8009260:	9207      	str	r2, [sp, #28]
 8009262:	9304      	str	r3, [sp, #16]
 8009264:	783b      	ldrb	r3, [r7, #0]
 8009266:	2b2e      	cmp	r3, #46	; 0x2e
 8009268:	d10c      	bne.n	8009284 <_svfiprintf_r+0x124>
 800926a:	787b      	ldrb	r3, [r7, #1]
 800926c:	2b2a      	cmp	r3, #42	; 0x2a
 800926e:	d133      	bne.n	80092d8 <_svfiprintf_r+0x178>
 8009270:	9b03      	ldr	r3, [sp, #12]
 8009272:	1d1a      	adds	r2, r3, #4
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	9203      	str	r2, [sp, #12]
 8009278:	2b00      	cmp	r3, #0
 800927a:	bfb8      	it	lt
 800927c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009280:	3702      	adds	r7, #2
 8009282:	9305      	str	r3, [sp, #20]
 8009284:	4d2e      	ldr	r5, [pc, #184]	; (8009340 <_svfiprintf_r+0x1e0>)
 8009286:	7839      	ldrb	r1, [r7, #0]
 8009288:	2203      	movs	r2, #3
 800928a:	4628      	mov	r0, r5
 800928c:	f7f6 ffb0 	bl	80001f0 <memchr>
 8009290:	b138      	cbz	r0, 80092a2 <_svfiprintf_r+0x142>
 8009292:	2340      	movs	r3, #64	; 0x40
 8009294:	1b40      	subs	r0, r0, r5
 8009296:	fa03 f000 	lsl.w	r0, r3, r0
 800929a:	9b04      	ldr	r3, [sp, #16]
 800929c:	4303      	orrs	r3, r0
 800929e:	3701      	adds	r7, #1
 80092a0:	9304      	str	r3, [sp, #16]
 80092a2:	7839      	ldrb	r1, [r7, #0]
 80092a4:	4827      	ldr	r0, [pc, #156]	; (8009344 <_svfiprintf_r+0x1e4>)
 80092a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092aa:	2206      	movs	r2, #6
 80092ac:	1c7e      	adds	r6, r7, #1
 80092ae:	f7f6 ff9f 	bl	80001f0 <memchr>
 80092b2:	2800      	cmp	r0, #0
 80092b4:	d038      	beq.n	8009328 <_svfiprintf_r+0x1c8>
 80092b6:	4b24      	ldr	r3, [pc, #144]	; (8009348 <_svfiprintf_r+0x1e8>)
 80092b8:	bb13      	cbnz	r3, 8009300 <_svfiprintf_r+0x1a0>
 80092ba:	9b03      	ldr	r3, [sp, #12]
 80092bc:	3307      	adds	r3, #7
 80092be:	f023 0307 	bic.w	r3, r3, #7
 80092c2:	3308      	adds	r3, #8
 80092c4:	9303      	str	r3, [sp, #12]
 80092c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092c8:	444b      	add	r3, r9
 80092ca:	9309      	str	r3, [sp, #36]	; 0x24
 80092cc:	e76d      	b.n	80091aa <_svfiprintf_r+0x4a>
 80092ce:	fb05 3202 	mla	r2, r5, r2, r3
 80092d2:	2001      	movs	r0, #1
 80092d4:	460f      	mov	r7, r1
 80092d6:	e7a6      	b.n	8009226 <_svfiprintf_r+0xc6>
 80092d8:	2300      	movs	r3, #0
 80092da:	3701      	adds	r7, #1
 80092dc:	9305      	str	r3, [sp, #20]
 80092de:	4619      	mov	r1, r3
 80092e0:	250a      	movs	r5, #10
 80092e2:	4638      	mov	r0, r7
 80092e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092e8:	3a30      	subs	r2, #48	; 0x30
 80092ea:	2a09      	cmp	r2, #9
 80092ec:	d903      	bls.n	80092f6 <_svfiprintf_r+0x196>
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d0c8      	beq.n	8009284 <_svfiprintf_r+0x124>
 80092f2:	9105      	str	r1, [sp, #20]
 80092f4:	e7c6      	b.n	8009284 <_svfiprintf_r+0x124>
 80092f6:	fb05 2101 	mla	r1, r5, r1, r2
 80092fa:	2301      	movs	r3, #1
 80092fc:	4607      	mov	r7, r0
 80092fe:	e7f0      	b.n	80092e2 <_svfiprintf_r+0x182>
 8009300:	ab03      	add	r3, sp, #12
 8009302:	9300      	str	r3, [sp, #0]
 8009304:	4622      	mov	r2, r4
 8009306:	4b11      	ldr	r3, [pc, #68]	; (800934c <_svfiprintf_r+0x1ec>)
 8009308:	a904      	add	r1, sp, #16
 800930a:	4640      	mov	r0, r8
 800930c:	f7fc fba2 	bl	8005a54 <_printf_float>
 8009310:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009314:	4681      	mov	r9, r0
 8009316:	d1d6      	bne.n	80092c6 <_svfiprintf_r+0x166>
 8009318:	89a3      	ldrh	r3, [r4, #12]
 800931a:	065b      	lsls	r3, r3, #25
 800931c:	f53f af35 	bmi.w	800918a <_svfiprintf_r+0x2a>
 8009320:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009322:	b01d      	add	sp, #116	; 0x74
 8009324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009328:	ab03      	add	r3, sp, #12
 800932a:	9300      	str	r3, [sp, #0]
 800932c:	4622      	mov	r2, r4
 800932e:	4b07      	ldr	r3, [pc, #28]	; (800934c <_svfiprintf_r+0x1ec>)
 8009330:	a904      	add	r1, sp, #16
 8009332:	4640      	mov	r0, r8
 8009334:	f7fc fe44 	bl	8005fc0 <_printf_i>
 8009338:	e7ea      	b.n	8009310 <_svfiprintf_r+0x1b0>
 800933a:	bf00      	nop
 800933c:	0800cb84 	.word	0x0800cb84
 8009340:	0800cb8a 	.word	0x0800cb8a
 8009344:	0800cb8e 	.word	0x0800cb8e
 8009348:	08005a55 	.word	0x08005a55
 800934c:	080090ad 	.word	0x080090ad

08009350 <_sungetc_r>:
 8009350:	b538      	push	{r3, r4, r5, lr}
 8009352:	1c4b      	adds	r3, r1, #1
 8009354:	4614      	mov	r4, r2
 8009356:	d103      	bne.n	8009360 <_sungetc_r+0x10>
 8009358:	f04f 35ff 	mov.w	r5, #4294967295
 800935c:	4628      	mov	r0, r5
 800935e:	bd38      	pop	{r3, r4, r5, pc}
 8009360:	8993      	ldrh	r3, [r2, #12]
 8009362:	f023 0320 	bic.w	r3, r3, #32
 8009366:	8193      	strh	r3, [r2, #12]
 8009368:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800936a:	6852      	ldr	r2, [r2, #4]
 800936c:	b2cd      	uxtb	r5, r1
 800936e:	b18b      	cbz	r3, 8009394 <_sungetc_r+0x44>
 8009370:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009372:	4293      	cmp	r3, r2
 8009374:	dd08      	ble.n	8009388 <_sungetc_r+0x38>
 8009376:	6823      	ldr	r3, [r4, #0]
 8009378:	1e5a      	subs	r2, r3, #1
 800937a:	6022      	str	r2, [r4, #0]
 800937c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009380:	6863      	ldr	r3, [r4, #4]
 8009382:	3301      	adds	r3, #1
 8009384:	6063      	str	r3, [r4, #4]
 8009386:	e7e9      	b.n	800935c <_sungetc_r+0xc>
 8009388:	4621      	mov	r1, r4
 800938a:	f000 fbc3 	bl	8009b14 <__submore>
 800938e:	2800      	cmp	r0, #0
 8009390:	d0f1      	beq.n	8009376 <_sungetc_r+0x26>
 8009392:	e7e1      	b.n	8009358 <_sungetc_r+0x8>
 8009394:	6921      	ldr	r1, [r4, #16]
 8009396:	6823      	ldr	r3, [r4, #0]
 8009398:	b151      	cbz	r1, 80093b0 <_sungetc_r+0x60>
 800939a:	4299      	cmp	r1, r3
 800939c:	d208      	bcs.n	80093b0 <_sungetc_r+0x60>
 800939e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80093a2:	42a9      	cmp	r1, r5
 80093a4:	d104      	bne.n	80093b0 <_sungetc_r+0x60>
 80093a6:	3b01      	subs	r3, #1
 80093a8:	3201      	adds	r2, #1
 80093aa:	6023      	str	r3, [r4, #0]
 80093ac:	6062      	str	r2, [r4, #4]
 80093ae:	e7d5      	b.n	800935c <_sungetc_r+0xc>
 80093b0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80093b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093b8:	6363      	str	r3, [r4, #52]	; 0x34
 80093ba:	2303      	movs	r3, #3
 80093bc:	63a3      	str	r3, [r4, #56]	; 0x38
 80093be:	4623      	mov	r3, r4
 80093c0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80093c4:	6023      	str	r3, [r4, #0]
 80093c6:	2301      	movs	r3, #1
 80093c8:	e7dc      	b.n	8009384 <_sungetc_r+0x34>

080093ca <__ssrefill_r>:
 80093ca:	b510      	push	{r4, lr}
 80093cc:	460c      	mov	r4, r1
 80093ce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80093d0:	b169      	cbz	r1, 80093ee <__ssrefill_r+0x24>
 80093d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093d6:	4299      	cmp	r1, r3
 80093d8:	d001      	beq.n	80093de <__ssrefill_r+0x14>
 80093da:	f7ff fdbf 	bl	8008f5c <_free_r>
 80093de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80093e0:	6063      	str	r3, [r4, #4]
 80093e2:	2000      	movs	r0, #0
 80093e4:	6360      	str	r0, [r4, #52]	; 0x34
 80093e6:	b113      	cbz	r3, 80093ee <__ssrefill_r+0x24>
 80093e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80093ea:	6023      	str	r3, [r4, #0]
 80093ec:	bd10      	pop	{r4, pc}
 80093ee:	6923      	ldr	r3, [r4, #16]
 80093f0:	6023      	str	r3, [r4, #0]
 80093f2:	2300      	movs	r3, #0
 80093f4:	6063      	str	r3, [r4, #4]
 80093f6:	89a3      	ldrh	r3, [r4, #12]
 80093f8:	f043 0320 	orr.w	r3, r3, #32
 80093fc:	81a3      	strh	r3, [r4, #12]
 80093fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009402:	e7f3      	b.n	80093ec <__ssrefill_r+0x22>

08009404 <__ssvfiscanf_r>:
 8009404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009408:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800940c:	460c      	mov	r4, r1
 800940e:	2100      	movs	r1, #0
 8009410:	9144      	str	r1, [sp, #272]	; 0x110
 8009412:	9145      	str	r1, [sp, #276]	; 0x114
 8009414:	499f      	ldr	r1, [pc, #636]	; (8009694 <__ssvfiscanf_r+0x290>)
 8009416:	91a0      	str	r1, [sp, #640]	; 0x280
 8009418:	f10d 0804 	add.w	r8, sp, #4
 800941c:	499e      	ldr	r1, [pc, #632]	; (8009698 <__ssvfiscanf_r+0x294>)
 800941e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800969c <__ssvfiscanf_r+0x298>
 8009422:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009426:	4606      	mov	r6, r0
 8009428:	4692      	mov	sl, r2
 800942a:	91a1      	str	r1, [sp, #644]	; 0x284
 800942c:	9300      	str	r3, [sp, #0]
 800942e:	270a      	movs	r7, #10
 8009430:	f89a 3000 	ldrb.w	r3, [sl]
 8009434:	2b00      	cmp	r3, #0
 8009436:	f000 812a 	beq.w	800968e <__ssvfiscanf_r+0x28a>
 800943a:	4655      	mov	r5, sl
 800943c:	f7ff f93e 	bl	80086bc <__locale_ctype_ptr>
 8009440:	f815 bb01 	ldrb.w	fp, [r5], #1
 8009444:	4458      	add	r0, fp
 8009446:	7843      	ldrb	r3, [r0, #1]
 8009448:	f013 0308 	ands.w	r3, r3, #8
 800944c:	d01c      	beq.n	8009488 <__ssvfiscanf_r+0x84>
 800944e:	6863      	ldr	r3, [r4, #4]
 8009450:	2b00      	cmp	r3, #0
 8009452:	dd12      	ble.n	800947a <__ssvfiscanf_r+0x76>
 8009454:	f7ff f932 	bl	80086bc <__locale_ctype_ptr>
 8009458:	6823      	ldr	r3, [r4, #0]
 800945a:	781a      	ldrb	r2, [r3, #0]
 800945c:	4410      	add	r0, r2
 800945e:	7842      	ldrb	r2, [r0, #1]
 8009460:	0712      	lsls	r2, r2, #28
 8009462:	d401      	bmi.n	8009468 <__ssvfiscanf_r+0x64>
 8009464:	46aa      	mov	sl, r5
 8009466:	e7e3      	b.n	8009430 <__ssvfiscanf_r+0x2c>
 8009468:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800946a:	3201      	adds	r2, #1
 800946c:	9245      	str	r2, [sp, #276]	; 0x114
 800946e:	6862      	ldr	r2, [r4, #4]
 8009470:	3301      	adds	r3, #1
 8009472:	3a01      	subs	r2, #1
 8009474:	6062      	str	r2, [r4, #4]
 8009476:	6023      	str	r3, [r4, #0]
 8009478:	e7e9      	b.n	800944e <__ssvfiscanf_r+0x4a>
 800947a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800947c:	4621      	mov	r1, r4
 800947e:	4630      	mov	r0, r6
 8009480:	4798      	blx	r3
 8009482:	2800      	cmp	r0, #0
 8009484:	d0e6      	beq.n	8009454 <__ssvfiscanf_r+0x50>
 8009486:	e7ed      	b.n	8009464 <__ssvfiscanf_r+0x60>
 8009488:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800948c:	f040 8082 	bne.w	8009594 <__ssvfiscanf_r+0x190>
 8009490:	9343      	str	r3, [sp, #268]	; 0x10c
 8009492:	9341      	str	r3, [sp, #260]	; 0x104
 8009494:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8009498:	2b2a      	cmp	r3, #42	; 0x2a
 800949a:	d103      	bne.n	80094a4 <__ssvfiscanf_r+0xa0>
 800949c:	2310      	movs	r3, #16
 800949e:	9341      	str	r3, [sp, #260]	; 0x104
 80094a0:	f10a 0502 	add.w	r5, sl, #2
 80094a4:	46aa      	mov	sl, r5
 80094a6:	f815 1b01 	ldrb.w	r1, [r5], #1
 80094aa:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80094ae:	2a09      	cmp	r2, #9
 80094b0:	d922      	bls.n	80094f8 <__ssvfiscanf_r+0xf4>
 80094b2:	2203      	movs	r2, #3
 80094b4:	4879      	ldr	r0, [pc, #484]	; (800969c <__ssvfiscanf_r+0x298>)
 80094b6:	f7f6 fe9b 	bl	80001f0 <memchr>
 80094ba:	b138      	cbz	r0, 80094cc <__ssvfiscanf_r+0xc8>
 80094bc:	eba0 0309 	sub.w	r3, r0, r9
 80094c0:	2001      	movs	r0, #1
 80094c2:	4098      	lsls	r0, r3
 80094c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80094c6:	4318      	orrs	r0, r3
 80094c8:	9041      	str	r0, [sp, #260]	; 0x104
 80094ca:	46aa      	mov	sl, r5
 80094cc:	f89a 3000 	ldrb.w	r3, [sl]
 80094d0:	2b67      	cmp	r3, #103	; 0x67
 80094d2:	f10a 0501 	add.w	r5, sl, #1
 80094d6:	d82b      	bhi.n	8009530 <__ssvfiscanf_r+0x12c>
 80094d8:	2b65      	cmp	r3, #101	; 0x65
 80094da:	f080 809f 	bcs.w	800961c <__ssvfiscanf_r+0x218>
 80094de:	2b47      	cmp	r3, #71	; 0x47
 80094e0:	d810      	bhi.n	8009504 <__ssvfiscanf_r+0x100>
 80094e2:	2b45      	cmp	r3, #69	; 0x45
 80094e4:	f080 809a 	bcs.w	800961c <__ssvfiscanf_r+0x218>
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d06c      	beq.n	80095c6 <__ssvfiscanf_r+0x1c2>
 80094ec:	2b25      	cmp	r3, #37	; 0x25
 80094ee:	d051      	beq.n	8009594 <__ssvfiscanf_r+0x190>
 80094f0:	2303      	movs	r3, #3
 80094f2:	9347      	str	r3, [sp, #284]	; 0x11c
 80094f4:	9742      	str	r7, [sp, #264]	; 0x108
 80094f6:	e027      	b.n	8009548 <__ssvfiscanf_r+0x144>
 80094f8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80094fa:	fb07 1303 	mla	r3, r7, r3, r1
 80094fe:	3b30      	subs	r3, #48	; 0x30
 8009500:	9343      	str	r3, [sp, #268]	; 0x10c
 8009502:	e7cf      	b.n	80094a4 <__ssvfiscanf_r+0xa0>
 8009504:	2b5b      	cmp	r3, #91	; 0x5b
 8009506:	d06a      	beq.n	80095de <__ssvfiscanf_r+0x1da>
 8009508:	d80c      	bhi.n	8009524 <__ssvfiscanf_r+0x120>
 800950a:	2b58      	cmp	r3, #88	; 0x58
 800950c:	d1f0      	bne.n	80094f0 <__ssvfiscanf_r+0xec>
 800950e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009514:	9241      	str	r2, [sp, #260]	; 0x104
 8009516:	2210      	movs	r2, #16
 8009518:	9242      	str	r2, [sp, #264]	; 0x108
 800951a:	2b6e      	cmp	r3, #110	; 0x6e
 800951c:	bf8c      	ite	hi
 800951e:	2304      	movhi	r3, #4
 8009520:	2303      	movls	r3, #3
 8009522:	e010      	b.n	8009546 <__ssvfiscanf_r+0x142>
 8009524:	2b63      	cmp	r3, #99	; 0x63
 8009526:	d065      	beq.n	80095f4 <__ssvfiscanf_r+0x1f0>
 8009528:	2b64      	cmp	r3, #100	; 0x64
 800952a:	d1e1      	bne.n	80094f0 <__ssvfiscanf_r+0xec>
 800952c:	9742      	str	r7, [sp, #264]	; 0x108
 800952e:	e7f4      	b.n	800951a <__ssvfiscanf_r+0x116>
 8009530:	2b70      	cmp	r3, #112	; 0x70
 8009532:	d04b      	beq.n	80095cc <__ssvfiscanf_r+0x1c8>
 8009534:	d826      	bhi.n	8009584 <__ssvfiscanf_r+0x180>
 8009536:	2b6e      	cmp	r3, #110	; 0x6e
 8009538:	d062      	beq.n	8009600 <__ssvfiscanf_r+0x1fc>
 800953a:	d84c      	bhi.n	80095d6 <__ssvfiscanf_r+0x1d2>
 800953c:	2b69      	cmp	r3, #105	; 0x69
 800953e:	d1d7      	bne.n	80094f0 <__ssvfiscanf_r+0xec>
 8009540:	2300      	movs	r3, #0
 8009542:	9342      	str	r3, [sp, #264]	; 0x108
 8009544:	2303      	movs	r3, #3
 8009546:	9347      	str	r3, [sp, #284]	; 0x11c
 8009548:	6863      	ldr	r3, [r4, #4]
 800954a:	2b00      	cmp	r3, #0
 800954c:	dd68      	ble.n	8009620 <__ssvfiscanf_r+0x21c>
 800954e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009550:	0659      	lsls	r1, r3, #25
 8009552:	d407      	bmi.n	8009564 <__ssvfiscanf_r+0x160>
 8009554:	f7ff f8b2 	bl	80086bc <__locale_ctype_ptr>
 8009558:	6823      	ldr	r3, [r4, #0]
 800955a:	781a      	ldrb	r2, [r3, #0]
 800955c:	4410      	add	r0, r2
 800955e:	7842      	ldrb	r2, [r0, #1]
 8009560:	0712      	lsls	r2, r2, #28
 8009562:	d464      	bmi.n	800962e <__ssvfiscanf_r+0x22a>
 8009564:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009566:	2b02      	cmp	r3, #2
 8009568:	dc73      	bgt.n	8009652 <__ssvfiscanf_r+0x24e>
 800956a:	466b      	mov	r3, sp
 800956c:	4622      	mov	r2, r4
 800956e:	a941      	add	r1, sp, #260	; 0x104
 8009570:	4630      	mov	r0, r6
 8009572:	f000 f897 	bl	80096a4 <_scanf_chars>
 8009576:	2801      	cmp	r0, #1
 8009578:	f000 8089 	beq.w	800968e <__ssvfiscanf_r+0x28a>
 800957c:	2802      	cmp	r0, #2
 800957e:	f47f af71 	bne.w	8009464 <__ssvfiscanf_r+0x60>
 8009582:	e01d      	b.n	80095c0 <__ssvfiscanf_r+0x1bc>
 8009584:	2b75      	cmp	r3, #117	; 0x75
 8009586:	d0d1      	beq.n	800952c <__ssvfiscanf_r+0x128>
 8009588:	2b78      	cmp	r3, #120	; 0x78
 800958a:	d0c0      	beq.n	800950e <__ssvfiscanf_r+0x10a>
 800958c:	2b73      	cmp	r3, #115	; 0x73
 800958e:	d1af      	bne.n	80094f0 <__ssvfiscanf_r+0xec>
 8009590:	2302      	movs	r3, #2
 8009592:	e7d8      	b.n	8009546 <__ssvfiscanf_r+0x142>
 8009594:	6863      	ldr	r3, [r4, #4]
 8009596:	2b00      	cmp	r3, #0
 8009598:	dd0c      	ble.n	80095b4 <__ssvfiscanf_r+0x1b0>
 800959a:	6823      	ldr	r3, [r4, #0]
 800959c:	781a      	ldrb	r2, [r3, #0]
 800959e:	455a      	cmp	r2, fp
 80095a0:	d175      	bne.n	800968e <__ssvfiscanf_r+0x28a>
 80095a2:	3301      	adds	r3, #1
 80095a4:	6862      	ldr	r2, [r4, #4]
 80095a6:	6023      	str	r3, [r4, #0]
 80095a8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80095aa:	3a01      	subs	r2, #1
 80095ac:	3301      	adds	r3, #1
 80095ae:	6062      	str	r2, [r4, #4]
 80095b0:	9345      	str	r3, [sp, #276]	; 0x114
 80095b2:	e757      	b.n	8009464 <__ssvfiscanf_r+0x60>
 80095b4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80095b6:	4621      	mov	r1, r4
 80095b8:	4630      	mov	r0, r6
 80095ba:	4798      	blx	r3
 80095bc:	2800      	cmp	r0, #0
 80095be:	d0ec      	beq.n	800959a <__ssvfiscanf_r+0x196>
 80095c0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80095c2:	2800      	cmp	r0, #0
 80095c4:	d159      	bne.n	800967a <__ssvfiscanf_r+0x276>
 80095c6:	f04f 30ff 	mov.w	r0, #4294967295
 80095ca:	e05c      	b.n	8009686 <__ssvfiscanf_r+0x282>
 80095cc:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80095ce:	f042 0220 	orr.w	r2, r2, #32
 80095d2:	9241      	str	r2, [sp, #260]	; 0x104
 80095d4:	e79b      	b.n	800950e <__ssvfiscanf_r+0x10a>
 80095d6:	2308      	movs	r3, #8
 80095d8:	9342      	str	r3, [sp, #264]	; 0x108
 80095da:	2304      	movs	r3, #4
 80095dc:	e7b3      	b.n	8009546 <__ssvfiscanf_r+0x142>
 80095de:	4629      	mov	r1, r5
 80095e0:	4640      	mov	r0, r8
 80095e2:	f000 f9c7 	bl	8009974 <__sccl>
 80095e6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80095e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095ec:	9341      	str	r3, [sp, #260]	; 0x104
 80095ee:	4605      	mov	r5, r0
 80095f0:	2301      	movs	r3, #1
 80095f2:	e7a8      	b.n	8009546 <__ssvfiscanf_r+0x142>
 80095f4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80095f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095fa:	9341      	str	r3, [sp, #260]	; 0x104
 80095fc:	2300      	movs	r3, #0
 80095fe:	e7a2      	b.n	8009546 <__ssvfiscanf_r+0x142>
 8009600:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009602:	06c3      	lsls	r3, r0, #27
 8009604:	f53f af2e 	bmi.w	8009464 <__ssvfiscanf_r+0x60>
 8009608:	9b00      	ldr	r3, [sp, #0]
 800960a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800960c:	1d19      	adds	r1, r3, #4
 800960e:	9100      	str	r1, [sp, #0]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	07c0      	lsls	r0, r0, #31
 8009614:	bf4c      	ite	mi
 8009616:	801a      	strhmi	r2, [r3, #0]
 8009618:	601a      	strpl	r2, [r3, #0]
 800961a:	e723      	b.n	8009464 <__ssvfiscanf_r+0x60>
 800961c:	2305      	movs	r3, #5
 800961e:	e792      	b.n	8009546 <__ssvfiscanf_r+0x142>
 8009620:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009622:	4621      	mov	r1, r4
 8009624:	4630      	mov	r0, r6
 8009626:	4798      	blx	r3
 8009628:	2800      	cmp	r0, #0
 800962a:	d090      	beq.n	800954e <__ssvfiscanf_r+0x14a>
 800962c:	e7c8      	b.n	80095c0 <__ssvfiscanf_r+0x1bc>
 800962e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009630:	3201      	adds	r2, #1
 8009632:	9245      	str	r2, [sp, #276]	; 0x114
 8009634:	6862      	ldr	r2, [r4, #4]
 8009636:	3a01      	subs	r2, #1
 8009638:	2a00      	cmp	r2, #0
 800963a:	6062      	str	r2, [r4, #4]
 800963c:	dd02      	ble.n	8009644 <__ssvfiscanf_r+0x240>
 800963e:	3301      	adds	r3, #1
 8009640:	6023      	str	r3, [r4, #0]
 8009642:	e787      	b.n	8009554 <__ssvfiscanf_r+0x150>
 8009644:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009646:	4621      	mov	r1, r4
 8009648:	4630      	mov	r0, r6
 800964a:	4798      	blx	r3
 800964c:	2800      	cmp	r0, #0
 800964e:	d081      	beq.n	8009554 <__ssvfiscanf_r+0x150>
 8009650:	e7b6      	b.n	80095c0 <__ssvfiscanf_r+0x1bc>
 8009652:	2b04      	cmp	r3, #4
 8009654:	dc06      	bgt.n	8009664 <__ssvfiscanf_r+0x260>
 8009656:	466b      	mov	r3, sp
 8009658:	4622      	mov	r2, r4
 800965a:	a941      	add	r1, sp, #260	; 0x104
 800965c:	4630      	mov	r0, r6
 800965e:	f000 f885 	bl	800976c <_scanf_i>
 8009662:	e788      	b.n	8009576 <__ssvfiscanf_r+0x172>
 8009664:	4b0e      	ldr	r3, [pc, #56]	; (80096a0 <__ssvfiscanf_r+0x29c>)
 8009666:	2b00      	cmp	r3, #0
 8009668:	f43f aefc 	beq.w	8009464 <__ssvfiscanf_r+0x60>
 800966c:	466b      	mov	r3, sp
 800966e:	4622      	mov	r2, r4
 8009670:	a941      	add	r1, sp, #260	; 0x104
 8009672:	4630      	mov	r0, r6
 8009674:	f7fc fdb6 	bl	80061e4 <_scanf_float>
 8009678:	e77d      	b.n	8009576 <__ssvfiscanf_r+0x172>
 800967a:	89a3      	ldrh	r3, [r4, #12]
 800967c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009680:	bf18      	it	ne
 8009682:	f04f 30ff 	movne.w	r0, #4294967295
 8009686:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800968a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800968e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009690:	e7f9      	b.n	8009686 <__ssvfiscanf_r+0x282>
 8009692:	bf00      	nop
 8009694:	08009351 	.word	0x08009351
 8009698:	080093cb 	.word	0x080093cb
 800969c:	0800cb8a 	.word	0x0800cb8a
 80096a0:	080061e5 	.word	0x080061e5

080096a4 <_scanf_chars>:
 80096a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096a8:	4615      	mov	r5, r2
 80096aa:	688a      	ldr	r2, [r1, #8]
 80096ac:	4680      	mov	r8, r0
 80096ae:	460c      	mov	r4, r1
 80096b0:	b932      	cbnz	r2, 80096c0 <_scanf_chars+0x1c>
 80096b2:	698a      	ldr	r2, [r1, #24]
 80096b4:	2a00      	cmp	r2, #0
 80096b6:	bf14      	ite	ne
 80096b8:	f04f 32ff 	movne.w	r2, #4294967295
 80096bc:	2201      	moveq	r2, #1
 80096be:	608a      	str	r2, [r1, #8]
 80096c0:	6822      	ldr	r2, [r4, #0]
 80096c2:	06d1      	lsls	r1, r2, #27
 80096c4:	bf5f      	itttt	pl
 80096c6:	681a      	ldrpl	r2, [r3, #0]
 80096c8:	1d11      	addpl	r1, r2, #4
 80096ca:	6019      	strpl	r1, [r3, #0]
 80096cc:	6817      	ldrpl	r7, [r2, #0]
 80096ce:	2600      	movs	r6, #0
 80096d0:	69a3      	ldr	r3, [r4, #24]
 80096d2:	b1db      	cbz	r3, 800970c <_scanf_chars+0x68>
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d107      	bne.n	80096e8 <_scanf_chars+0x44>
 80096d8:	682b      	ldr	r3, [r5, #0]
 80096da:	6962      	ldr	r2, [r4, #20]
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	5cd3      	ldrb	r3, [r2, r3]
 80096e0:	b9a3      	cbnz	r3, 800970c <_scanf_chars+0x68>
 80096e2:	2e00      	cmp	r6, #0
 80096e4:	d132      	bne.n	800974c <_scanf_chars+0xa8>
 80096e6:	e006      	b.n	80096f6 <_scanf_chars+0x52>
 80096e8:	2b02      	cmp	r3, #2
 80096ea:	d007      	beq.n	80096fc <_scanf_chars+0x58>
 80096ec:	2e00      	cmp	r6, #0
 80096ee:	d12d      	bne.n	800974c <_scanf_chars+0xa8>
 80096f0:	69a3      	ldr	r3, [r4, #24]
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d12a      	bne.n	800974c <_scanf_chars+0xa8>
 80096f6:	2001      	movs	r0, #1
 80096f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096fc:	f7fe ffde 	bl	80086bc <__locale_ctype_ptr>
 8009700:	682b      	ldr	r3, [r5, #0]
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	4418      	add	r0, r3
 8009706:	7843      	ldrb	r3, [r0, #1]
 8009708:	071b      	lsls	r3, r3, #28
 800970a:	d4ef      	bmi.n	80096ec <_scanf_chars+0x48>
 800970c:	6823      	ldr	r3, [r4, #0]
 800970e:	06da      	lsls	r2, r3, #27
 8009710:	bf5e      	ittt	pl
 8009712:	682b      	ldrpl	r3, [r5, #0]
 8009714:	781b      	ldrbpl	r3, [r3, #0]
 8009716:	703b      	strbpl	r3, [r7, #0]
 8009718:	682a      	ldr	r2, [r5, #0]
 800971a:	686b      	ldr	r3, [r5, #4]
 800971c:	f102 0201 	add.w	r2, r2, #1
 8009720:	602a      	str	r2, [r5, #0]
 8009722:	68a2      	ldr	r2, [r4, #8]
 8009724:	f103 33ff 	add.w	r3, r3, #4294967295
 8009728:	f102 32ff 	add.w	r2, r2, #4294967295
 800972c:	606b      	str	r3, [r5, #4]
 800972e:	f106 0601 	add.w	r6, r6, #1
 8009732:	bf58      	it	pl
 8009734:	3701      	addpl	r7, #1
 8009736:	60a2      	str	r2, [r4, #8]
 8009738:	b142      	cbz	r2, 800974c <_scanf_chars+0xa8>
 800973a:	2b00      	cmp	r3, #0
 800973c:	dcc8      	bgt.n	80096d0 <_scanf_chars+0x2c>
 800973e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009742:	4629      	mov	r1, r5
 8009744:	4640      	mov	r0, r8
 8009746:	4798      	blx	r3
 8009748:	2800      	cmp	r0, #0
 800974a:	d0c1      	beq.n	80096d0 <_scanf_chars+0x2c>
 800974c:	6823      	ldr	r3, [r4, #0]
 800974e:	f013 0310 	ands.w	r3, r3, #16
 8009752:	d105      	bne.n	8009760 <_scanf_chars+0xbc>
 8009754:	68e2      	ldr	r2, [r4, #12]
 8009756:	3201      	adds	r2, #1
 8009758:	60e2      	str	r2, [r4, #12]
 800975a:	69a2      	ldr	r2, [r4, #24]
 800975c:	b102      	cbz	r2, 8009760 <_scanf_chars+0xbc>
 800975e:	703b      	strb	r3, [r7, #0]
 8009760:	6923      	ldr	r3, [r4, #16]
 8009762:	441e      	add	r6, r3
 8009764:	6126      	str	r6, [r4, #16]
 8009766:	2000      	movs	r0, #0
 8009768:	e7c6      	b.n	80096f8 <_scanf_chars+0x54>
	...

0800976c <_scanf_i>:
 800976c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009770:	469a      	mov	sl, r3
 8009772:	4b74      	ldr	r3, [pc, #464]	; (8009944 <_scanf_i+0x1d8>)
 8009774:	460c      	mov	r4, r1
 8009776:	4683      	mov	fp, r0
 8009778:	4616      	mov	r6, r2
 800977a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800977e:	b087      	sub	sp, #28
 8009780:	ab03      	add	r3, sp, #12
 8009782:	68a7      	ldr	r7, [r4, #8]
 8009784:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009788:	4b6f      	ldr	r3, [pc, #444]	; (8009948 <_scanf_i+0x1dc>)
 800978a:	69a1      	ldr	r1, [r4, #24]
 800978c:	4a6f      	ldr	r2, [pc, #444]	; (800994c <_scanf_i+0x1e0>)
 800978e:	2903      	cmp	r1, #3
 8009790:	bf08      	it	eq
 8009792:	461a      	moveq	r2, r3
 8009794:	1e7b      	subs	r3, r7, #1
 8009796:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800979a:	bf84      	itt	hi
 800979c:	f240 135d 	movwhi	r3, #349	; 0x15d
 80097a0:	60a3      	strhi	r3, [r4, #8]
 80097a2:	6823      	ldr	r3, [r4, #0]
 80097a4:	9200      	str	r2, [sp, #0]
 80097a6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80097aa:	bf88      	it	hi
 80097ac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80097b0:	f104 091c 	add.w	r9, r4, #28
 80097b4:	6023      	str	r3, [r4, #0]
 80097b6:	bf8c      	ite	hi
 80097b8:	197f      	addhi	r7, r7, r5
 80097ba:	2700      	movls	r7, #0
 80097bc:	464b      	mov	r3, r9
 80097be:	f04f 0800 	mov.w	r8, #0
 80097c2:	9301      	str	r3, [sp, #4]
 80097c4:	6831      	ldr	r1, [r6, #0]
 80097c6:	ab03      	add	r3, sp, #12
 80097c8:	2202      	movs	r2, #2
 80097ca:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80097ce:	7809      	ldrb	r1, [r1, #0]
 80097d0:	f7f6 fd0e 	bl	80001f0 <memchr>
 80097d4:	9b01      	ldr	r3, [sp, #4]
 80097d6:	b330      	cbz	r0, 8009826 <_scanf_i+0xba>
 80097d8:	f1b8 0f01 	cmp.w	r8, #1
 80097dc:	d15a      	bne.n	8009894 <_scanf_i+0x128>
 80097de:	6862      	ldr	r2, [r4, #4]
 80097e0:	b92a      	cbnz	r2, 80097ee <_scanf_i+0x82>
 80097e2:	6822      	ldr	r2, [r4, #0]
 80097e4:	2108      	movs	r1, #8
 80097e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097ea:	6061      	str	r1, [r4, #4]
 80097ec:	6022      	str	r2, [r4, #0]
 80097ee:	6822      	ldr	r2, [r4, #0]
 80097f0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80097f4:	6022      	str	r2, [r4, #0]
 80097f6:	68a2      	ldr	r2, [r4, #8]
 80097f8:	1e51      	subs	r1, r2, #1
 80097fa:	60a1      	str	r1, [r4, #8]
 80097fc:	b19a      	cbz	r2, 8009826 <_scanf_i+0xba>
 80097fe:	6832      	ldr	r2, [r6, #0]
 8009800:	1c51      	adds	r1, r2, #1
 8009802:	6031      	str	r1, [r6, #0]
 8009804:	7812      	ldrb	r2, [r2, #0]
 8009806:	701a      	strb	r2, [r3, #0]
 8009808:	1c5d      	adds	r5, r3, #1
 800980a:	6873      	ldr	r3, [r6, #4]
 800980c:	3b01      	subs	r3, #1
 800980e:	2b00      	cmp	r3, #0
 8009810:	6073      	str	r3, [r6, #4]
 8009812:	dc07      	bgt.n	8009824 <_scanf_i+0xb8>
 8009814:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009818:	4631      	mov	r1, r6
 800981a:	4658      	mov	r0, fp
 800981c:	4798      	blx	r3
 800981e:	2800      	cmp	r0, #0
 8009820:	f040 8086 	bne.w	8009930 <_scanf_i+0x1c4>
 8009824:	462b      	mov	r3, r5
 8009826:	f108 0801 	add.w	r8, r8, #1
 800982a:	f1b8 0f03 	cmp.w	r8, #3
 800982e:	d1c8      	bne.n	80097c2 <_scanf_i+0x56>
 8009830:	6862      	ldr	r2, [r4, #4]
 8009832:	b90a      	cbnz	r2, 8009838 <_scanf_i+0xcc>
 8009834:	220a      	movs	r2, #10
 8009836:	6062      	str	r2, [r4, #4]
 8009838:	6862      	ldr	r2, [r4, #4]
 800983a:	4945      	ldr	r1, [pc, #276]	; (8009950 <_scanf_i+0x1e4>)
 800983c:	6960      	ldr	r0, [r4, #20]
 800983e:	9301      	str	r3, [sp, #4]
 8009840:	1a89      	subs	r1, r1, r2
 8009842:	f000 f897 	bl	8009974 <__sccl>
 8009846:	9b01      	ldr	r3, [sp, #4]
 8009848:	f04f 0800 	mov.w	r8, #0
 800984c:	461d      	mov	r5, r3
 800984e:	68a3      	ldr	r3, [r4, #8]
 8009850:	6822      	ldr	r2, [r4, #0]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d03a      	beq.n	80098cc <_scanf_i+0x160>
 8009856:	6831      	ldr	r1, [r6, #0]
 8009858:	6960      	ldr	r0, [r4, #20]
 800985a:	f891 c000 	ldrb.w	ip, [r1]
 800985e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009862:	2800      	cmp	r0, #0
 8009864:	d032      	beq.n	80098cc <_scanf_i+0x160>
 8009866:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800986a:	d121      	bne.n	80098b0 <_scanf_i+0x144>
 800986c:	0510      	lsls	r0, r2, #20
 800986e:	d51f      	bpl.n	80098b0 <_scanf_i+0x144>
 8009870:	f108 0801 	add.w	r8, r8, #1
 8009874:	b117      	cbz	r7, 800987c <_scanf_i+0x110>
 8009876:	3301      	adds	r3, #1
 8009878:	3f01      	subs	r7, #1
 800987a:	60a3      	str	r3, [r4, #8]
 800987c:	6873      	ldr	r3, [r6, #4]
 800987e:	3b01      	subs	r3, #1
 8009880:	2b00      	cmp	r3, #0
 8009882:	6073      	str	r3, [r6, #4]
 8009884:	dd1b      	ble.n	80098be <_scanf_i+0x152>
 8009886:	6833      	ldr	r3, [r6, #0]
 8009888:	3301      	adds	r3, #1
 800988a:	6033      	str	r3, [r6, #0]
 800988c:	68a3      	ldr	r3, [r4, #8]
 800988e:	3b01      	subs	r3, #1
 8009890:	60a3      	str	r3, [r4, #8]
 8009892:	e7dc      	b.n	800984e <_scanf_i+0xe2>
 8009894:	f1b8 0f02 	cmp.w	r8, #2
 8009898:	d1ad      	bne.n	80097f6 <_scanf_i+0x8a>
 800989a:	6822      	ldr	r2, [r4, #0]
 800989c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80098a0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80098a4:	d1bf      	bne.n	8009826 <_scanf_i+0xba>
 80098a6:	2110      	movs	r1, #16
 80098a8:	6061      	str	r1, [r4, #4]
 80098aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098ae:	e7a1      	b.n	80097f4 <_scanf_i+0x88>
 80098b0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80098b4:	6022      	str	r2, [r4, #0]
 80098b6:	780b      	ldrb	r3, [r1, #0]
 80098b8:	702b      	strb	r3, [r5, #0]
 80098ba:	3501      	adds	r5, #1
 80098bc:	e7de      	b.n	800987c <_scanf_i+0x110>
 80098be:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80098c2:	4631      	mov	r1, r6
 80098c4:	4658      	mov	r0, fp
 80098c6:	4798      	blx	r3
 80098c8:	2800      	cmp	r0, #0
 80098ca:	d0df      	beq.n	800988c <_scanf_i+0x120>
 80098cc:	6823      	ldr	r3, [r4, #0]
 80098ce:	05d9      	lsls	r1, r3, #23
 80098d0:	d50c      	bpl.n	80098ec <_scanf_i+0x180>
 80098d2:	454d      	cmp	r5, r9
 80098d4:	d908      	bls.n	80098e8 <_scanf_i+0x17c>
 80098d6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80098da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098de:	4632      	mov	r2, r6
 80098e0:	4658      	mov	r0, fp
 80098e2:	4798      	blx	r3
 80098e4:	1e6f      	subs	r7, r5, #1
 80098e6:	463d      	mov	r5, r7
 80098e8:	454d      	cmp	r5, r9
 80098ea:	d029      	beq.n	8009940 <_scanf_i+0x1d4>
 80098ec:	6822      	ldr	r2, [r4, #0]
 80098ee:	f012 0210 	ands.w	r2, r2, #16
 80098f2:	d113      	bne.n	800991c <_scanf_i+0x1b0>
 80098f4:	702a      	strb	r2, [r5, #0]
 80098f6:	6863      	ldr	r3, [r4, #4]
 80098f8:	9e00      	ldr	r6, [sp, #0]
 80098fa:	4649      	mov	r1, r9
 80098fc:	4658      	mov	r0, fp
 80098fe:	47b0      	blx	r6
 8009900:	f8da 3000 	ldr.w	r3, [sl]
 8009904:	6821      	ldr	r1, [r4, #0]
 8009906:	1d1a      	adds	r2, r3, #4
 8009908:	f8ca 2000 	str.w	r2, [sl]
 800990c:	f011 0f20 	tst.w	r1, #32
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	d010      	beq.n	8009936 <_scanf_i+0x1ca>
 8009914:	6018      	str	r0, [r3, #0]
 8009916:	68e3      	ldr	r3, [r4, #12]
 8009918:	3301      	adds	r3, #1
 800991a:	60e3      	str	r3, [r4, #12]
 800991c:	eba5 0509 	sub.w	r5, r5, r9
 8009920:	44a8      	add	r8, r5
 8009922:	6925      	ldr	r5, [r4, #16]
 8009924:	4445      	add	r5, r8
 8009926:	6125      	str	r5, [r4, #16]
 8009928:	2000      	movs	r0, #0
 800992a:	b007      	add	sp, #28
 800992c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009930:	f04f 0800 	mov.w	r8, #0
 8009934:	e7ca      	b.n	80098cc <_scanf_i+0x160>
 8009936:	07ca      	lsls	r2, r1, #31
 8009938:	bf4c      	ite	mi
 800993a:	8018      	strhmi	r0, [r3, #0]
 800993c:	6018      	strpl	r0, [r3, #0]
 800993e:	e7ea      	b.n	8009916 <_scanf_i+0x1aa>
 8009940:	2001      	movs	r0, #1
 8009942:	e7f2      	b.n	800992a <_scanf_i+0x1be>
 8009944:	0800a1ac 	.word	0x0800a1ac
 8009948:	080073b9 	.word	0x080073b9
 800994c:	08009af1 	.word	0x08009af1
 8009950:	0800cba5 	.word	0x0800cba5

08009954 <_sbrk_r>:
 8009954:	b538      	push	{r3, r4, r5, lr}
 8009956:	4c06      	ldr	r4, [pc, #24]	; (8009970 <_sbrk_r+0x1c>)
 8009958:	2300      	movs	r3, #0
 800995a:	4605      	mov	r5, r0
 800995c:	4608      	mov	r0, r1
 800995e:	6023      	str	r3, [r4, #0]
 8009960:	f7f9 f9fa 	bl	8002d58 <_sbrk>
 8009964:	1c43      	adds	r3, r0, #1
 8009966:	d102      	bne.n	800996e <_sbrk_r+0x1a>
 8009968:	6823      	ldr	r3, [r4, #0]
 800996a:	b103      	cbz	r3, 800996e <_sbrk_r+0x1a>
 800996c:	602b      	str	r3, [r5, #0]
 800996e:	bd38      	pop	{r3, r4, r5, pc}
 8009970:	20002b4c 	.word	0x20002b4c

08009974 <__sccl>:
 8009974:	b570      	push	{r4, r5, r6, lr}
 8009976:	780b      	ldrb	r3, [r1, #0]
 8009978:	2b5e      	cmp	r3, #94	; 0x5e
 800997a:	bf13      	iteet	ne
 800997c:	1c4a      	addne	r2, r1, #1
 800997e:	1c8a      	addeq	r2, r1, #2
 8009980:	784b      	ldrbeq	r3, [r1, #1]
 8009982:	2100      	movne	r1, #0
 8009984:	bf08      	it	eq
 8009986:	2101      	moveq	r1, #1
 8009988:	1e44      	subs	r4, r0, #1
 800998a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800998e:	f804 1f01 	strb.w	r1, [r4, #1]!
 8009992:	42ac      	cmp	r4, r5
 8009994:	d1fb      	bne.n	800998e <__sccl+0x1a>
 8009996:	b913      	cbnz	r3, 800999e <__sccl+0x2a>
 8009998:	3a01      	subs	r2, #1
 800999a:	4610      	mov	r0, r2
 800999c:	bd70      	pop	{r4, r5, r6, pc}
 800999e:	f081 0401 	eor.w	r4, r1, #1
 80099a2:	54c4      	strb	r4, [r0, r3]
 80099a4:	1c51      	adds	r1, r2, #1
 80099a6:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80099aa:	2d2d      	cmp	r5, #45	; 0x2d
 80099ac:	f101 36ff 	add.w	r6, r1, #4294967295
 80099b0:	460a      	mov	r2, r1
 80099b2:	d006      	beq.n	80099c2 <__sccl+0x4e>
 80099b4:	2d5d      	cmp	r5, #93	; 0x5d
 80099b6:	d0f0      	beq.n	800999a <__sccl+0x26>
 80099b8:	b90d      	cbnz	r5, 80099be <__sccl+0x4a>
 80099ba:	4632      	mov	r2, r6
 80099bc:	e7ed      	b.n	800999a <__sccl+0x26>
 80099be:	462b      	mov	r3, r5
 80099c0:	e7ef      	b.n	80099a2 <__sccl+0x2e>
 80099c2:	780e      	ldrb	r6, [r1, #0]
 80099c4:	2e5d      	cmp	r6, #93	; 0x5d
 80099c6:	d0fa      	beq.n	80099be <__sccl+0x4a>
 80099c8:	42b3      	cmp	r3, r6
 80099ca:	dcf8      	bgt.n	80099be <__sccl+0x4a>
 80099cc:	3301      	adds	r3, #1
 80099ce:	429e      	cmp	r6, r3
 80099d0:	54c4      	strb	r4, [r0, r3]
 80099d2:	dcfb      	bgt.n	80099cc <__sccl+0x58>
 80099d4:	3102      	adds	r1, #2
 80099d6:	e7e6      	b.n	80099a6 <__sccl+0x32>

080099d8 <strncmp>:
 80099d8:	b510      	push	{r4, lr}
 80099da:	b16a      	cbz	r2, 80099f8 <strncmp+0x20>
 80099dc:	3901      	subs	r1, #1
 80099de:	1884      	adds	r4, r0, r2
 80099e0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80099e4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d103      	bne.n	80099f4 <strncmp+0x1c>
 80099ec:	42a0      	cmp	r0, r4
 80099ee:	d001      	beq.n	80099f4 <strncmp+0x1c>
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d1f5      	bne.n	80099e0 <strncmp+0x8>
 80099f4:	1a98      	subs	r0, r3, r2
 80099f6:	bd10      	pop	{r4, pc}
 80099f8:	4610      	mov	r0, r2
 80099fa:	e7fc      	b.n	80099f6 <strncmp+0x1e>

080099fc <_strtoul_l.isra.0>:
 80099fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a00:	4680      	mov	r8, r0
 8009a02:	4689      	mov	r9, r1
 8009a04:	4692      	mov	sl, r2
 8009a06:	461e      	mov	r6, r3
 8009a08:	460f      	mov	r7, r1
 8009a0a:	463d      	mov	r5, r7
 8009a0c:	9808      	ldr	r0, [sp, #32]
 8009a0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a12:	f7fe fe4f 	bl	80086b4 <__locale_ctype_ptr_l>
 8009a16:	4420      	add	r0, r4
 8009a18:	7843      	ldrb	r3, [r0, #1]
 8009a1a:	f013 0308 	ands.w	r3, r3, #8
 8009a1e:	d130      	bne.n	8009a82 <_strtoul_l.isra.0+0x86>
 8009a20:	2c2d      	cmp	r4, #45	; 0x2d
 8009a22:	d130      	bne.n	8009a86 <_strtoul_l.isra.0+0x8a>
 8009a24:	787c      	ldrb	r4, [r7, #1]
 8009a26:	1cbd      	adds	r5, r7, #2
 8009a28:	2101      	movs	r1, #1
 8009a2a:	2e00      	cmp	r6, #0
 8009a2c:	d05c      	beq.n	8009ae8 <_strtoul_l.isra.0+0xec>
 8009a2e:	2e10      	cmp	r6, #16
 8009a30:	d109      	bne.n	8009a46 <_strtoul_l.isra.0+0x4a>
 8009a32:	2c30      	cmp	r4, #48	; 0x30
 8009a34:	d107      	bne.n	8009a46 <_strtoul_l.isra.0+0x4a>
 8009a36:	782b      	ldrb	r3, [r5, #0]
 8009a38:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009a3c:	2b58      	cmp	r3, #88	; 0x58
 8009a3e:	d14e      	bne.n	8009ade <_strtoul_l.isra.0+0xe2>
 8009a40:	786c      	ldrb	r4, [r5, #1]
 8009a42:	2610      	movs	r6, #16
 8009a44:	3502      	adds	r5, #2
 8009a46:	f04f 32ff 	mov.w	r2, #4294967295
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	fbb2 f2f6 	udiv	r2, r2, r6
 8009a50:	fb06 fc02 	mul.w	ip, r6, r2
 8009a54:	ea6f 0c0c 	mvn.w	ip, ip
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009a5e:	2f09      	cmp	r7, #9
 8009a60:	d817      	bhi.n	8009a92 <_strtoul_l.isra.0+0x96>
 8009a62:	463c      	mov	r4, r7
 8009a64:	42a6      	cmp	r6, r4
 8009a66:	dd23      	ble.n	8009ab0 <_strtoul_l.isra.0+0xb4>
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	db1e      	blt.n	8009aaa <_strtoul_l.isra.0+0xae>
 8009a6c:	4282      	cmp	r2, r0
 8009a6e:	d31c      	bcc.n	8009aaa <_strtoul_l.isra.0+0xae>
 8009a70:	d101      	bne.n	8009a76 <_strtoul_l.isra.0+0x7a>
 8009a72:	45a4      	cmp	ip, r4
 8009a74:	db19      	blt.n	8009aaa <_strtoul_l.isra.0+0xae>
 8009a76:	fb00 4006 	mla	r0, r0, r6, r4
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a80:	e7eb      	b.n	8009a5a <_strtoul_l.isra.0+0x5e>
 8009a82:	462f      	mov	r7, r5
 8009a84:	e7c1      	b.n	8009a0a <_strtoul_l.isra.0+0xe>
 8009a86:	2c2b      	cmp	r4, #43	; 0x2b
 8009a88:	bf04      	itt	eq
 8009a8a:	1cbd      	addeq	r5, r7, #2
 8009a8c:	787c      	ldrbeq	r4, [r7, #1]
 8009a8e:	4619      	mov	r1, r3
 8009a90:	e7cb      	b.n	8009a2a <_strtoul_l.isra.0+0x2e>
 8009a92:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009a96:	2f19      	cmp	r7, #25
 8009a98:	d801      	bhi.n	8009a9e <_strtoul_l.isra.0+0xa2>
 8009a9a:	3c37      	subs	r4, #55	; 0x37
 8009a9c:	e7e2      	b.n	8009a64 <_strtoul_l.isra.0+0x68>
 8009a9e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009aa2:	2f19      	cmp	r7, #25
 8009aa4:	d804      	bhi.n	8009ab0 <_strtoul_l.isra.0+0xb4>
 8009aa6:	3c57      	subs	r4, #87	; 0x57
 8009aa8:	e7dc      	b.n	8009a64 <_strtoul_l.isra.0+0x68>
 8009aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8009aae:	e7e5      	b.n	8009a7c <_strtoul_l.isra.0+0x80>
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	da09      	bge.n	8009ac8 <_strtoul_l.isra.0+0xcc>
 8009ab4:	2322      	movs	r3, #34	; 0x22
 8009ab6:	f8c8 3000 	str.w	r3, [r8]
 8009aba:	f04f 30ff 	mov.w	r0, #4294967295
 8009abe:	f1ba 0f00 	cmp.w	sl, #0
 8009ac2:	d107      	bne.n	8009ad4 <_strtoul_l.isra.0+0xd8>
 8009ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ac8:	b101      	cbz	r1, 8009acc <_strtoul_l.isra.0+0xd0>
 8009aca:	4240      	negs	r0, r0
 8009acc:	f1ba 0f00 	cmp.w	sl, #0
 8009ad0:	d0f8      	beq.n	8009ac4 <_strtoul_l.isra.0+0xc8>
 8009ad2:	b10b      	cbz	r3, 8009ad8 <_strtoul_l.isra.0+0xdc>
 8009ad4:	f105 39ff 	add.w	r9, r5, #4294967295
 8009ad8:	f8ca 9000 	str.w	r9, [sl]
 8009adc:	e7f2      	b.n	8009ac4 <_strtoul_l.isra.0+0xc8>
 8009ade:	2430      	movs	r4, #48	; 0x30
 8009ae0:	2e00      	cmp	r6, #0
 8009ae2:	d1b0      	bne.n	8009a46 <_strtoul_l.isra.0+0x4a>
 8009ae4:	2608      	movs	r6, #8
 8009ae6:	e7ae      	b.n	8009a46 <_strtoul_l.isra.0+0x4a>
 8009ae8:	2c30      	cmp	r4, #48	; 0x30
 8009aea:	d0a4      	beq.n	8009a36 <_strtoul_l.isra.0+0x3a>
 8009aec:	260a      	movs	r6, #10
 8009aee:	e7aa      	b.n	8009a46 <_strtoul_l.isra.0+0x4a>

08009af0 <_strtoul_r>:
 8009af0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009af2:	4c06      	ldr	r4, [pc, #24]	; (8009b0c <_strtoul_r+0x1c>)
 8009af4:	4d06      	ldr	r5, [pc, #24]	; (8009b10 <_strtoul_r+0x20>)
 8009af6:	6824      	ldr	r4, [r4, #0]
 8009af8:	6a24      	ldr	r4, [r4, #32]
 8009afa:	2c00      	cmp	r4, #0
 8009afc:	bf08      	it	eq
 8009afe:	462c      	moveq	r4, r5
 8009b00:	9400      	str	r4, [sp, #0]
 8009b02:	f7ff ff7b 	bl	80099fc <_strtoul_l.isra.0>
 8009b06:	b003      	add	sp, #12
 8009b08:	bd30      	pop	{r4, r5, pc}
 8009b0a:	bf00      	nop
 8009b0c:	2000003c 	.word	0x2000003c
 8009b10:	200000a0 	.word	0x200000a0

08009b14 <__submore>:
 8009b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b18:	460c      	mov	r4, r1
 8009b1a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009b1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b20:	4299      	cmp	r1, r3
 8009b22:	d11d      	bne.n	8009b60 <__submore+0x4c>
 8009b24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009b28:	f7ff fa66 	bl	8008ff8 <_malloc_r>
 8009b2c:	b918      	cbnz	r0, 8009b36 <__submore+0x22>
 8009b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b3a:	63a3      	str	r3, [r4, #56]	; 0x38
 8009b3c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009b40:	6360      	str	r0, [r4, #52]	; 0x34
 8009b42:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009b46:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009b4a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009b4e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009b52:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009b56:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009b5a:	6020      	str	r0, [r4, #0]
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	e7e8      	b.n	8009b32 <__submore+0x1e>
 8009b60:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009b62:	0077      	lsls	r7, r6, #1
 8009b64:	463a      	mov	r2, r7
 8009b66:	f000 f837 	bl	8009bd8 <_realloc_r>
 8009b6a:	4605      	mov	r5, r0
 8009b6c:	2800      	cmp	r0, #0
 8009b6e:	d0de      	beq.n	8009b2e <__submore+0x1a>
 8009b70:	eb00 0806 	add.w	r8, r0, r6
 8009b74:	4601      	mov	r1, r0
 8009b76:	4632      	mov	r2, r6
 8009b78:	4640      	mov	r0, r8
 8009b7a:	f7fe fdd7 	bl	800872c <memcpy>
 8009b7e:	f8c4 8000 	str.w	r8, [r4]
 8009b82:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009b86:	e7e9      	b.n	8009b5c <__submore+0x48>

08009b88 <__ascii_wctomb>:
 8009b88:	b149      	cbz	r1, 8009b9e <__ascii_wctomb+0x16>
 8009b8a:	2aff      	cmp	r2, #255	; 0xff
 8009b8c:	bf85      	ittet	hi
 8009b8e:	238a      	movhi	r3, #138	; 0x8a
 8009b90:	6003      	strhi	r3, [r0, #0]
 8009b92:	700a      	strbls	r2, [r1, #0]
 8009b94:	f04f 30ff 	movhi.w	r0, #4294967295
 8009b98:	bf98      	it	ls
 8009b9a:	2001      	movls	r0, #1
 8009b9c:	4770      	bx	lr
 8009b9e:	4608      	mov	r0, r1
 8009ba0:	4770      	bx	lr

08009ba2 <memmove>:
 8009ba2:	4288      	cmp	r0, r1
 8009ba4:	b510      	push	{r4, lr}
 8009ba6:	eb01 0302 	add.w	r3, r1, r2
 8009baa:	d807      	bhi.n	8009bbc <memmove+0x1a>
 8009bac:	1e42      	subs	r2, r0, #1
 8009bae:	4299      	cmp	r1, r3
 8009bb0:	d00a      	beq.n	8009bc8 <memmove+0x26>
 8009bb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bb6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009bba:	e7f8      	b.n	8009bae <memmove+0xc>
 8009bbc:	4283      	cmp	r3, r0
 8009bbe:	d9f5      	bls.n	8009bac <memmove+0xa>
 8009bc0:	1881      	adds	r1, r0, r2
 8009bc2:	1ad2      	subs	r2, r2, r3
 8009bc4:	42d3      	cmn	r3, r2
 8009bc6:	d100      	bne.n	8009bca <memmove+0x28>
 8009bc8:	bd10      	pop	{r4, pc}
 8009bca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009bce:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009bd2:	e7f7      	b.n	8009bc4 <memmove+0x22>

08009bd4 <__malloc_lock>:
 8009bd4:	4770      	bx	lr

08009bd6 <__malloc_unlock>:
 8009bd6:	4770      	bx	lr

08009bd8 <_realloc_r>:
 8009bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bda:	4607      	mov	r7, r0
 8009bdc:	4614      	mov	r4, r2
 8009bde:	460e      	mov	r6, r1
 8009be0:	b921      	cbnz	r1, 8009bec <_realloc_r+0x14>
 8009be2:	4611      	mov	r1, r2
 8009be4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009be8:	f7ff ba06 	b.w	8008ff8 <_malloc_r>
 8009bec:	b922      	cbnz	r2, 8009bf8 <_realloc_r+0x20>
 8009bee:	f7ff f9b5 	bl	8008f5c <_free_r>
 8009bf2:	4625      	mov	r5, r4
 8009bf4:	4628      	mov	r0, r5
 8009bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bf8:	f000 f814 	bl	8009c24 <_malloc_usable_size_r>
 8009bfc:	42a0      	cmp	r0, r4
 8009bfe:	d20f      	bcs.n	8009c20 <_realloc_r+0x48>
 8009c00:	4621      	mov	r1, r4
 8009c02:	4638      	mov	r0, r7
 8009c04:	f7ff f9f8 	bl	8008ff8 <_malloc_r>
 8009c08:	4605      	mov	r5, r0
 8009c0a:	2800      	cmp	r0, #0
 8009c0c:	d0f2      	beq.n	8009bf4 <_realloc_r+0x1c>
 8009c0e:	4631      	mov	r1, r6
 8009c10:	4622      	mov	r2, r4
 8009c12:	f7fe fd8b 	bl	800872c <memcpy>
 8009c16:	4631      	mov	r1, r6
 8009c18:	4638      	mov	r0, r7
 8009c1a:	f7ff f99f 	bl	8008f5c <_free_r>
 8009c1e:	e7e9      	b.n	8009bf4 <_realloc_r+0x1c>
 8009c20:	4635      	mov	r5, r6
 8009c22:	e7e7      	b.n	8009bf4 <_realloc_r+0x1c>

08009c24 <_malloc_usable_size_r>:
 8009c24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c28:	1f18      	subs	r0, r3, #4
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	bfbc      	itt	lt
 8009c2e:	580b      	ldrlt	r3, [r1, r0]
 8009c30:	18c0      	addlt	r0, r0, r3
 8009c32:	4770      	bx	lr

08009c34 <fmod>:
 8009c34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c38:	ed2d 8b02 	vpush	{d8}
 8009c3c:	b08b      	sub	sp, #44	; 0x2c
 8009c3e:	ec55 4b10 	vmov	r4, r5, d0
 8009c42:	ec57 6b11 	vmov	r6, r7, d1
 8009c46:	f000 f859 	bl	8009cfc <__ieee754_fmod>
 8009c4a:	4b2a      	ldr	r3, [pc, #168]	; (8009cf4 <fmod+0xc0>)
 8009c4c:	eeb0 8a40 	vmov.f32	s16, s0
 8009c50:	eef0 8a60 	vmov.f32	s17, s1
 8009c54:	f993 8000 	ldrsb.w	r8, [r3]
 8009c58:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009c5c:	d030      	beq.n	8009cc0 <fmod+0x8c>
 8009c5e:	4632      	mov	r2, r6
 8009c60:	463b      	mov	r3, r7
 8009c62:	4630      	mov	r0, r6
 8009c64:	4639      	mov	r1, r7
 8009c66:	f7f6 ff69 	bl	8000b3c <__aeabi_dcmpun>
 8009c6a:	bb48      	cbnz	r0, 8009cc0 <fmod+0x8c>
 8009c6c:	4622      	mov	r2, r4
 8009c6e:	462b      	mov	r3, r5
 8009c70:	4620      	mov	r0, r4
 8009c72:	4629      	mov	r1, r5
 8009c74:	f7f6 ff62 	bl	8000b3c <__aeabi_dcmpun>
 8009c78:	4681      	mov	r9, r0
 8009c7a:	bb08      	cbnz	r0, 8009cc0 <fmod+0x8c>
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	2300      	movs	r3, #0
 8009c80:	4630      	mov	r0, r6
 8009c82:	4639      	mov	r1, r7
 8009c84:	f7f6 ff28 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c88:	b1d0      	cbz	r0, 8009cc0 <fmod+0x8c>
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	9300      	str	r3, [sp, #0]
 8009c8e:	4b1a      	ldr	r3, [pc, #104]	; (8009cf8 <fmod+0xc4>)
 8009c90:	9301      	str	r3, [sp, #4]
 8009c92:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009c96:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009c9a:	f8cd 9020 	str.w	r9, [sp, #32]
 8009c9e:	f1b8 0f00 	cmp.w	r8, #0
 8009ca2:	d116      	bne.n	8009cd2 <fmod+0x9e>
 8009ca4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009ca8:	4668      	mov	r0, sp
 8009caa:	f000 f939 	bl	8009f20 <matherr>
 8009cae:	b1d8      	cbz	r0, 8009ce8 <fmod+0xb4>
 8009cb0:	9b08      	ldr	r3, [sp, #32]
 8009cb2:	b11b      	cbz	r3, 8009cbc <fmod+0x88>
 8009cb4:	f7fb fe08 	bl	80058c8 <__errno>
 8009cb8:	9b08      	ldr	r3, [sp, #32]
 8009cba:	6003      	str	r3, [r0, #0]
 8009cbc:	ed9d 8b06 	vldr	d8, [sp, #24]
 8009cc0:	eeb0 0a48 	vmov.f32	s0, s16
 8009cc4:	eef0 0a68 	vmov.f32	s1, s17
 8009cc8:	b00b      	add	sp, #44	; 0x2c
 8009cca:	ecbd 8b02 	vpop	{d8}
 8009cce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	4610      	mov	r0, r2
 8009cd8:	4619      	mov	r1, r3
 8009cda:	f7f6 fdbf 	bl	800085c <__aeabi_ddiv>
 8009cde:	f1b8 0f02 	cmp.w	r8, #2
 8009ce2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009ce6:	d1df      	bne.n	8009ca8 <fmod+0x74>
 8009ce8:	f7fb fdee 	bl	80058c8 <__errno>
 8009cec:	2321      	movs	r3, #33	; 0x21
 8009cee:	6003      	str	r3, [r0, #0]
 8009cf0:	e7de      	b.n	8009cb0 <fmod+0x7c>
 8009cf2:	bf00      	nop
 8009cf4:	2000020c 	.word	0x2000020c
 8009cf8:	0800cd14 	.word	0x0800cd14

08009cfc <__ieee754_fmod>:
 8009cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d00:	ec53 2b11 	vmov	r2, r3, d1
 8009d04:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8009d08:	ea5e 0402 	orrs.w	r4, lr, r2
 8009d0c:	ec51 0b10 	vmov	r0, r1, d0
 8009d10:	461e      	mov	r6, r3
 8009d12:	ee11 5a10 	vmov	r5, s2
 8009d16:	4694      	mov	ip, r2
 8009d18:	d00c      	beq.n	8009d34 <__ieee754_fmod+0x38>
 8009d1a:	4c7a      	ldr	r4, [pc, #488]	; (8009f04 <__ieee754_fmod+0x208>)
 8009d1c:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8009d20:	45a0      	cmp	r8, r4
 8009d22:	4689      	mov	r9, r1
 8009d24:	dc06      	bgt.n	8009d34 <__ieee754_fmod+0x38>
 8009d26:	4254      	negs	r4, r2
 8009d28:	4314      	orrs	r4, r2
 8009d2a:	4f77      	ldr	r7, [pc, #476]	; (8009f08 <__ieee754_fmod+0x20c>)
 8009d2c:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8009d30:	42bc      	cmp	r4, r7
 8009d32:	d909      	bls.n	8009d48 <__ieee754_fmod+0x4c>
 8009d34:	f7f6 fc68 	bl	8000608 <__aeabi_dmul>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	460b      	mov	r3, r1
 8009d3c:	f7f6 fd8e 	bl	800085c <__aeabi_ddiv>
 8009d40:	ec41 0b10 	vmov	d0, r0, r1
 8009d44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d48:	45f0      	cmp	r8, lr
 8009d4a:	ee10 2a10 	vmov	r2, s0
 8009d4e:	4607      	mov	r7, r0
 8009d50:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 8009d54:	dc0a      	bgt.n	8009d6c <__ieee754_fmod+0x70>
 8009d56:	dbf3      	blt.n	8009d40 <__ieee754_fmod+0x44>
 8009d58:	42a8      	cmp	r0, r5
 8009d5a:	d3f1      	bcc.n	8009d40 <__ieee754_fmod+0x44>
 8009d5c:	d106      	bne.n	8009d6c <__ieee754_fmod+0x70>
 8009d5e:	496b      	ldr	r1, [pc, #428]	; (8009f0c <__ieee754_fmod+0x210>)
 8009d60:	0fe4      	lsrs	r4, r4, #31
 8009d62:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8009d66:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009d6a:	e7e9      	b.n	8009d40 <__ieee754_fmod+0x44>
 8009d6c:	4b68      	ldr	r3, [pc, #416]	; (8009f10 <__ieee754_fmod+0x214>)
 8009d6e:	4598      	cmp	r8, r3
 8009d70:	dc49      	bgt.n	8009e06 <__ieee754_fmod+0x10a>
 8009d72:	f1b8 0f00 	cmp.w	r8, #0
 8009d76:	d13d      	bne.n	8009df4 <__ieee754_fmod+0xf8>
 8009d78:	4866      	ldr	r0, [pc, #408]	; (8009f14 <__ieee754_fmod+0x218>)
 8009d7a:	4611      	mov	r1, r2
 8009d7c:	2900      	cmp	r1, #0
 8009d7e:	dc36      	bgt.n	8009dee <__ieee754_fmod+0xf2>
 8009d80:	459e      	cmp	lr, r3
 8009d82:	dc51      	bgt.n	8009e28 <__ieee754_fmod+0x12c>
 8009d84:	f1be 0f00 	cmp.w	lr, #0
 8009d88:	d145      	bne.n	8009e16 <__ieee754_fmod+0x11a>
 8009d8a:	4b62      	ldr	r3, [pc, #392]	; (8009f14 <__ieee754_fmod+0x218>)
 8009d8c:	4629      	mov	r1, r5
 8009d8e:	2900      	cmp	r1, #0
 8009d90:	dc3e      	bgt.n	8009e10 <__ieee754_fmod+0x114>
 8009d92:	4961      	ldr	r1, [pc, #388]	; (8009f18 <__ieee754_fmod+0x21c>)
 8009d94:	4288      	cmp	r0, r1
 8009d96:	db4c      	blt.n	8009e32 <__ieee754_fmod+0x136>
 8009d98:	f3c9 0113 	ubfx	r1, r9, #0, #20
 8009d9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009da0:	4a5d      	ldr	r2, [pc, #372]	; (8009f18 <__ieee754_fmod+0x21c>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	db59      	blt.n	8009e5a <__ieee754_fmod+0x15e>
 8009da6:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8009daa:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8009dae:	1ac0      	subs	r0, r0, r3
 8009db0:	1b8a      	subs	r2, r1, r6
 8009db2:	eba7 050c 	sub.w	r5, r7, ip
 8009db6:	2800      	cmp	r0, #0
 8009db8:	d166      	bne.n	8009e88 <__ieee754_fmod+0x18c>
 8009dba:	4567      	cmp	r7, ip
 8009dbc:	bf38      	it	cc
 8009dbe:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8009dc2:	2a00      	cmp	r2, #0
 8009dc4:	bfbc      	itt	lt
 8009dc6:	463d      	movlt	r5, r7
 8009dc8:	460a      	movlt	r2, r1
 8009dca:	ea52 0105 	orrs.w	r1, r2, r5
 8009dce:	d0c6      	beq.n	8009d5e <__ieee754_fmod+0x62>
 8009dd0:	494f      	ldr	r1, [pc, #316]	; (8009f10 <__ieee754_fmod+0x214>)
 8009dd2:	428a      	cmp	r2, r1
 8009dd4:	dd6d      	ble.n	8009eb2 <__ieee754_fmod+0x1b6>
 8009dd6:	4950      	ldr	r1, [pc, #320]	; (8009f18 <__ieee754_fmod+0x21c>)
 8009dd8:	428b      	cmp	r3, r1
 8009dda:	db70      	blt.n	8009ebe <__ieee754_fmod+0x1c2>
 8009ddc:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8009de0:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8009de4:	4314      	orrs	r4, r2
 8009de6:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 8009dea:	4628      	mov	r0, r5
 8009dec:	e7a8      	b.n	8009d40 <__ieee754_fmod+0x44>
 8009dee:	3801      	subs	r0, #1
 8009df0:	0049      	lsls	r1, r1, #1
 8009df2:	e7c3      	b.n	8009d7c <__ieee754_fmod+0x80>
 8009df4:	4848      	ldr	r0, [pc, #288]	; (8009f18 <__ieee754_fmod+0x21c>)
 8009df6:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8009dfa:	0049      	lsls	r1, r1, #1
 8009dfc:	2900      	cmp	r1, #0
 8009dfe:	f100 30ff 	add.w	r0, r0, #4294967295
 8009e02:	dcfa      	bgt.n	8009dfa <__ieee754_fmod+0xfe>
 8009e04:	e7bc      	b.n	8009d80 <__ieee754_fmod+0x84>
 8009e06:	ea4f 5028 	mov.w	r0, r8, asr #20
 8009e0a:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8009e0e:	e7b7      	b.n	8009d80 <__ieee754_fmod+0x84>
 8009e10:	3b01      	subs	r3, #1
 8009e12:	0049      	lsls	r1, r1, #1
 8009e14:	e7bb      	b.n	8009d8e <__ieee754_fmod+0x92>
 8009e16:	4b40      	ldr	r3, [pc, #256]	; (8009f18 <__ieee754_fmod+0x21c>)
 8009e18:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 8009e1c:	0049      	lsls	r1, r1, #1
 8009e1e:	2900      	cmp	r1, #0
 8009e20:	f103 33ff 	add.w	r3, r3, #4294967295
 8009e24:	dcfa      	bgt.n	8009e1c <__ieee754_fmod+0x120>
 8009e26:	e7b4      	b.n	8009d92 <__ieee754_fmod+0x96>
 8009e28:	ea4f 532e 	mov.w	r3, lr, asr #20
 8009e2c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009e30:	e7af      	b.n	8009d92 <__ieee754_fmod+0x96>
 8009e32:	1a0f      	subs	r7, r1, r0
 8009e34:	2f1f      	cmp	r7, #31
 8009e36:	dc0a      	bgt.n	8009e4e <__ieee754_fmod+0x152>
 8009e38:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 8009e3c:	fa08 f807 	lsl.w	r8, r8, r7
 8009e40:	fa22 f101 	lsr.w	r1, r2, r1
 8009e44:	ea41 0108 	orr.w	r1, r1, r8
 8009e48:	fa02 f707 	lsl.w	r7, r2, r7
 8009e4c:	e7a8      	b.n	8009da0 <__ieee754_fmod+0xa4>
 8009e4e:	4933      	ldr	r1, [pc, #204]	; (8009f1c <__ieee754_fmod+0x220>)
 8009e50:	1a09      	subs	r1, r1, r0
 8009e52:	fa02 f101 	lsl.w	r1, r2, r1
 8009e56:	2700      	movs	r7, #0
 8009e58:	e7a2      	b.n	8009da0 <__ieee754_fmod+0xa4>
 8009e5a:	eba2 0c03 	sub.w	ip, r2, r3
 8009e5e:	f1bc 0f1f 	cmp.w	ip, #31
 8009e62:	dc0a      	bgt.n	8009e7a <__ieee754_fmod+0x17e>
 8009e64:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 8009e68:	fa0e fe0c 	lsl.w	lr, lr, ip
 8009e6c:	fa25 f606 	lsr.w	r6, r5, r6
 8009e70:	ea46 060e 	orr.w	r6, r6, lr
 8009e74:	fa05 fc0c 	lsl.w	ip, r5, ip
 8009e78:	e799      	b.n	8009dae <__ieee754_fmod+0xb2>
 8009e7a:	4e28      	ldr	r6, [pc, #160]	; (8009f1c <__ieee754_fmod+0x220>)
 8009e7c:	1af6      	subs	r6, r6, r3
 8009e7e:	fa05 f606 	lsl.w	r6, r5, r6
 8009e82:	f04f 0c00 	mov.w	ip, #0
 8009e86:	e792      	b.n	8009dae <__ieee754_fmod+0xb2>
 8009e88:	4567      	cmp	r7, ip
 8009e8a:	bf38      	it	cc
 8009e8c:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8009e90:	2a00      	cmp	r2, #0
 8009e92:	da05      	bge.n	8009ea0 <__ieee754_fmod+0x1a4>
 8009e94:	0ffa      	lsrs	r2, r7, #31
 8009e96:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009e9a:	007f      	lsls	r7, r7, #1
 8009e9c:	3801      	subs	r0, #1
 8009e9e:	e787      	b.n	8009db0 <__ieee754_fmod+0xb4>
 8009ea0:	ea52 0105 	orrs.w	r1, r2, r5
 8009ea4:	f43f af5b 	beq.w	8009d5e <__ieee754_fmod+0x62>
 8009ea8:	0fe9      	lsrs	r1, r5, #31
 8009eaa:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8009eae:	006f      	lsls	r7, r5, #1
 8009eb0:	e7f4      	b.n	8009e9c <__ieee754_fmod+0x1a0>
 8009eb2:	0fe8      	lsrs	r0, r5, #31
 8009eb4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8009eb8:	006d      	lsls	r5, r5, #1
 8009eba:	3b01      	subs	r3, #1
 8009ebc:	e789      	b.n	8009dd2 <__ieee754_fmod+0xd6>
 8009ebe:	1ac9      	subs	r1, r1, r3
 8009ec0:	2914      	cmp	r1, #20
 8009ec2:	dc0a      	bgt.n	8009eda <__ieee754_fmod+0x1de>
 8009ec4:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8009ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8009ecc:	40cd      	lsrs	r5, r1
 8009ece:	432b      	orrs	r3, r5
 8009ed0:	410a      	asrs	r2, r1
 8009ed2:	ea42 0104 	orr.w	r1, r2, r4
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	e732      	b.n	8009d40 <__ieee754_fmod+0x44>
 8009eda:	291f      	cmp	r1, #31
 8009edc:	dc07      	bgt.n	8009eee <__ieee754_fmod+0x1f2>
 8009ede:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8009ee2:	40cd      	lsrs	r5, r1
 8009ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ee8:	432b      	orrs	r3, r5
 8009eea:	4622      	mov	r2, r4
 8009eec:	e7f1      	b.n	8009ed2 <__ieee754_fmod+0x1d6>
 8009eee:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8009ef2:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8009ef6:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8009efa:	33e2      	adds	r3, #226	; 0xe2
 8009efc:	fa42 f303 	asr.w	r3, r2, r3
 8009f00:	e7f3      	b.n	8009eea <__ieee754_fmod+0x1ee>
 8009f02:	bf00      	nop
 8009f04:	7fefffff 	.word	0x7fefffff
 8009f08:	7ff00000 	.word	0x7ff00000
 8009f0c:	0800cd20 	.word	0x0800cd20
 8009f10:	000fffff 	.word	0x000fffff
 8009f14:	fffffbed 	.word	0xfffffbed
 8009f18:	fffffc02 	.word	0xfffffc02
 8009f1c:	fffffbe2 	.word	0xfffffbe2

08009f20 <matherr>:
 8009f20:	2000      	movs	r0, #0
 8009f22:	4770      	bx	lr

08009f24 <_init>:
 8009f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f26:	bf00      	nop
 8009f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f2a:	bc08      	pop	{r3}
 8009f2c:	469e      	mov	lr, r3
 8009f2e:	4770      	bx	lr

08009f30 <_fini>:
 8009f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f32:	bf00      	nop
 8009f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f36:	bc08      	pop	{r3}
 8009f38:	469e      	mov	lr, r3
 8009f3a:	4770      	bx	lr
